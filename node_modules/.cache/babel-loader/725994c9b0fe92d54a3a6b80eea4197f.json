{"ast":null,"code":"var _jsxFileName = \"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/pages/pools/PoolPage/PoolCreateRedeemPanel.tsx\",\n    _s = $RefreshSig$();\n\nimport { getPoolBasket, PoolTransactions } from '@project-serum/pool';\nimport React, { useMemo, useState } from 'react';\nimport FloatingElement from '../../../components/layout/FloatingElement';\nimport { Button, Input, Spin, Tabs, Typography } from 'antd';\nimport { useAsyncData } from '../../../utils/fetch-loop';\nimport { useConnection } from '../../../utils/connection';\nimport tuple from 'immutable-tuple';\nimport PoolBasketDisplay from './PoolBasketDisplay';\nimport BN from 'bn.js';\nimport { notify } from '../../../utils/notifications';\nimport { useWallet } from '../../../utils/wallet';\nimport { useTokenAccounts } from '../../../utils/markets';\nimport { sendTransaction } from '../../../utils/send';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Text\n} = Typography;\nconst {\n  TabPane\n} = Tabs;\nexport default function PoolCreateRedeemPanel(_ref) {\n  let {\n    poolInfo,\n    mintInfo\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(FloatingElement, {\n    stretchVertical: true,\n    children: /*#__PURE__*/_jsxDEV(Tabs, {\n      children: [/*#__PURE__*/_jsxDEV(TabPane, {\n        tab: \"Create\",\n        children: /*#__PURE__*/_jsxDEV(CreateRedeemTab, {\n          poolInfo: poolInfo,\n          mintInfo: mintInfo,\n          tab: \"create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)\n      }, \"create\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TabPane, {\n        tab: \"Redeem\",\n        children: /*#__PURE__*/_jsxDEV(CreateRedeemTab, {\n          poolInfo: poolInfo,\n          mintInfo: mintInfo,\n          tab: \"redeem\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, \"redeem\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_c = PoolCreateRedeemPanel;\n\nfunction CreateRedeemTab(_ref2) {\n  _s();\n\n  let {\n    poolInfo,\n    mintInfo,\n    tab\n  } = _ref2;\n  const connection = useConnection();\n  const {\n    wallet,\n    connected\n  } = useWallet();\n  const [quantity, setQuantity] = useState('');\n  const [tokenAccounts] = useTokenAccounts();\n  const [submitting, setSubmitting] = useState(false);\n  const action = useMemo(() => {\n    const parsedQuantity = Math.round(parseFloat(quantity) * 10 ** mintInfo.decimals);\n\n    if (parsedQuantity > 0) {\n      if (tab === 'create') {\n        return {\n          create: new BN(parsedQuantity)\n        };\n      } else {\n        return {\n          redeem: new BN(parsedQuantity)\n        };\n      }\n    }\n\n    return null;\n  }, [mintInfo.decimals, quantity, tab]);\n  const [basket, basketLoaded] = useAsyncData(async () => action ? await getPoolBasket(connection, poolInfo, action) : null, tuple(getPoolBasket, connection, poolInfo.address.toBase58(), action));\n\n  function findTokenAccount(mint) {\n    const account = tokenAccounts === null || tokenAccounts === void 0 ? void 0 : tokenAccounts.find(account => account.effectiveMint.equals(mint));\n\n    if (account) {\n      return account.pubkey;\n    }\n\n    throw new Error('No token account for ' + mint.toBase58());\n  }\n\n  const canSubmit = connected && action && basket;\n\n  async function onSubmit(e) {\n    e.preventDefault();\n\n    if (!action || !basket || !connected || !canSubmit || !wallet) {\n      return;\n    }\n\n    setSubmitting(true);\n\n    try {\n      const {\n        transaction,\n        signers\n      } = PoolTransactions.execute(poolInfo, action, {\n        owner: wallet.publicKey,\n        poolTokenAccount: findTokenAccount(poolInfo.state.poolTokenMint),\n        assetAccounts: poolInfo.state.assets.map(asset => findTokenAccount(asset.mint))\n      }, basket);\n      await sendTransaction({\n        connection,\n        wallet,\n        transaction,\n        signers\n      });\n    } catch (e) {\n      console.warn(e);\n      notify({\n        message: 'Error ' + (tab === 'create' ? 'creating' : 'redeeming') + ' pool tokens',\n        description: e.message,\n        type: 'error'\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      addonBefore: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \"Quantity\"\n      }, void 0, false),\n      value: quantity,\n      onChange: e => setQuantity(e.target.value.trim()),\n      style: {\n        marginBottom: 24\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: !basket ? basketLoaded ? null : /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: [tab === 'create' ? 'Cost' : 'Proceeds', \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          type: \"secondary\",\n          children: \"(indicative only)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(PoolBasketDisplay, {\n          poolInfo: poolInfo,\n          basket: basket\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      htmlType: \"submit\",\n      type: \"primary\",\n      disabled: !canSubmit || submitting,\n      children: !connected ? 'Wallet not connected' : 'Submit'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreateRedeemTab, \"jzGR0Izay9vx81CGmta8W2P3GZE=\", false, function () {\n  return [useConnection, useWallet, useTokenAccounts, useAsyncData];\n});\n\n_c2 = CreateRedeemTab;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PoolCreateRedeemPanel\");\n$RefreshReg$(_c2, \"CreateRedeemTab\");","map":{"version":3,"sources":["/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/pages/pools/PoolPage/PoolCreateRedeemPanel.tsx"],"names":["getPoolBasket","PoolTransactions","React","useMemo","useState","FloatingElement","Button","Input","Spin","Tabs","Typography","useAsyncData","useConnection","tuple","PoolBasketDisplay","BN","notify","useWallet","useTokenAccounts","sendTransaction","Text","TabPane","PoolCreateRedeemPanel","poolInfo","mintInfo","CreateRedeemTab","tab","connection","wallet","connected","quantity","setQuantity","tokenAccounts","submitting","setSubmitting","action","parsedQuantity","Math","round","parseFloat","decimals","create","redeem","basket","basketLoaded","address","toBase58","findTokenAccount","mint","account","find","effectiveMint","equals","pubkey","Error","canSubmit","onSubmit","e","preventDefault","transaction","signers","execute","owner","publicKey","poolTokenAccount","state","poolTokenMint","assetAccounts","assets","map","asset","console","warn","message","description","type","target","value","trim","marginBottom"],"mappings":"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","sourcesContent":["import { getPoolBasket, PoolInfo, PoolTransactions } from '@project-serum/pool';\nimport React, { useMemo, useState } from 'react';\nimport FloatingElement from '../../../components/layout/FloatingElement';\nimport { Button, Input, Spin, Tabs, Typography } from 'antd';\nimport { MintInfo } from '../../../utils/tokens';\nimport { useAsyncData } from '../../../utils/fetch-loop';\nimport { useConnection } from '../../../utils/connection';\nimport { PublicKey } from '@solana/web3.js';\nimport tuple from 'immutable-tuple';\nimport PoolBasketDisplay from './PoolBasketDisplay';\nimport BN from 'bn.js';\nimport { notify } from '../../../utils/notifications';\nimport { useWallet } from '../../../utils/wallet';\nimport { useTokenAccounts } from '../../../utils/markets';\nimport { sendTransaction } from '../../../utils/send';\n\nconst { Text } = Typography;\nconst { TabPane } = Tabs;\n\ninterface PoolCreateRedeemPanel {\n  poolInfo: PoolInfo;\n  mintInfo: MintInfo;\n}\n\nexport default function PoolCreateRedeemPanel({\n  poolInfo,\n  mintInfo,\n}: PoolCreateRedeemPanel) {\n  return (\n    <FloatingElement stretchVertical>\n      <Tabs>\n        <TabPane tab=\"Create\" key=\"create\">\n          <CreateRedeemTab\n            poolInfo={poolInfo}\n            mintInfo={mintInfo}\n            tab=\"create\"\n          />\n        </TabPane>\n        <TabPane tab=\"Redeem\" key=\"redeem\">\n          <CreateRedeemTab\n            poolInfo={poolInfo}\n            mintInfo={mintInfo}\n            tab=\"redeem\"\n          />\n        </TabPane>\n      </Tabs>\n    </FloatingElement>\n  );\n}\n\ninterface CreateRedeemInnerPanel {\n  poolInfo: PoolInfo;\n  mintInfo: MintInfo;\n  tab: string;\n}\n\nfunction CreateRedeemTab({ poolInfo, mintInfo, tab }: CreateRedeemInnerPanel) {\n  const connection = useConnection();\n  const { wallet, connected } = useWallet();\n  const [quantity, setQuantity] = useState('');\n  const [tokenAccounts] = useTokenAccounts();\n  const [submitting, setSubmitting] = useState(false);\n\n  const action = useMemo(() => {\n    const parsedQuantity = Math.round(\n      parseFloat(quantity) * 10 ** mintInfo.decimals,\n    );\n    if (parsedQuantity > 0) {\n      if (tab === 'create') {\n        return { create: new BN(parsedQuantity) };\n      } else {\n        return { redeem: new BN(parsedQuantity) };\n      }\n    }\n    return null;\n  }, [mintInfo.decimals, quantity, tab]);\n\n  const [basket, basketLoaded] = useAsyncData(\n    async () =>\n      action ? await getPoolBasket(connection, poolInfo, action) : null,\n    tuple(getPoolBasket, connection, poolInfo.address.toBase58(), action),\n  );\n\n  function findTokenAccount(mint: PublicKey): PublicKey {\n    const account = tokenAccounts?.find((account) =>\n      account.effectiveMint.equals(mint),\n    );\n    if (account) {\n      return account.pubkey;\n    }\n    throw new Error('No token account for ' + mint.toBase58());\n  }\n\n  const canSubmit = connected && action && basket;\n\n  async function onSubmit(e) {\n    e.preventDefault();\n    if (!action || !basket || !connected || !canSubmit || !wallet) {\n      return;\n    }\n    setSubmitting(true);\n    try {\n      const { transaction, signers } = PoolTransactions.execute(\n        poolInfo,\n        action,\n        {\n          owner: wallet.publicKey,\n          poolTokenAccount: findTokenAccount(poolInfo.state.poolTokenMint),\n          assetAccounts: poolInfo.state.assets.map((asset) =>\n            findTokenAccount(asset.mint),\n          ),\n        },\n        basket,\n      );\n      await sendTransaction({ connection, wallet, transaction, signers });\n    } catch (e) {\n      console.warn(e);\n      notify({\n        message:\n          'Error ' +\n          (tab === 'create' ? 'creating' : 'redeeming') +\n          ' pool tokens',\n        description: e.message,\n        type: 'error',\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <Input\n        addonBefore={<>Quantity</>}\n        value={quantity}\n        onChange={(e) => setQuantity(e.target.value.trim())}\n        style={{ marginBottom: 24 }}\n      />\n      <div>\n        {!basket ? (\n          basketLoaded ? null : (\n            <Spin />\n          )\n        ) : (\n          <>\n            <Text>{tab === 'create' ? 'Cost' : 'Proceeds'}: </Text>\n            <Text type=\"secondary\">(indicative only)</Text>\n            <PoolBasketDisplay poolInfo={poolInfo} basket={basket} />\n          </>\n        )}\n      </div>\n      <Button\n        htmlType=\"submit\"\n        type=\"primary\"\n        disabled={!canSubmit || submitting}\n      >\n        {!connected ? 'Wallet not connected' : 'Submit'}\n      </Button>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}