{"ast":null,"code":"var _jsxFileName = \"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/pages/pools/PoolPage/PoolBalancesPanel.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { useAccountInfo } from '../../../utils/connection';\nimport { parseTokenAccountData, parseTokenMintData } from '../../../utils/tokens';\nimport { Button, Spin, Tabs } from 'antd';\nimport FloatingElement from '../../../components/layout/FloatingElement';\nimport { useTokenAccounts } from '../../../utils/markets';\nimport { MintName } from '../../../components/MintName';\nimport { LinkOutlined } from '@ant-design/icons';\nimport { WRAPPED_SOL_MINT } from '@project-serum/serum/lib/token-instructions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  TabPane\n} = Tabs;\nexport default function PoolBalancesPanel(_ref) {\n  let {\n    poolInfo\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(FloatingElement, {\n    children: /*#__PURE__*/_jsxDEV(Tabs, {\n      children: [/*#__PURE__*/_jsxDEV(TabPane, {\n        tab: \"Wallet Balances\",\n        children: /*#__PURE__*/_jsxDEV(WalletBalancesTab, {\n          poolInfo: poolInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this)\n      }, \"wallet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TabPane, {\n        tab: \"Pool Balances\",\n        children: /*#__PURE__*/_jsxDEV(PoolBalancesTab, {\n          poolInfo: poolInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)\n      }, \"pool\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_c = PoolBalancesPanel;\n\nfunction WalletBalancesTab(_ref2) {\n  _s();\n\n  let {\n    poolInfo\n  } = _ref2;\n  const [tokenAccounts] = useTokenAccounts();\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: [poolInfo.state.poolTokenMint, ...poolInfo.state.assets.map(asset => asset.mint)].map((mint, index) => {\n      const tokenAccount = tokenAccounts === null || tokenAccounts === void 0 ? void 0 : tokenAccounts.find(account => account.effectiveMint.equals(mint));\n\n      if (!tokenAccount) {\n        return null;\n      }\n\n      return /*#__PURE__*/_jsxDEV(BalanceItem, {\n        mint: mint,\n        publicKey: tokenAccount.pubkey,\n        isPoolToken: mint.equals(poolInfo.state.poolTokenMint)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WalletBalancesTab, \"i2HO/HomFMsiqC/bW/4XZYIF8AA=\", false, function () {\n  return [useTokenAccounts];\n});\n\n_c2 = WalletBalancesTab;\n\nfunction PoolBalancesTab(_ref3) {\n  let {\n    poolInfo\n  } = _ref3;\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: poolInfo.state.assets.map((asset, index) => {\n      return /*#__PURE__*/_jsxDEV(BalanceItem, {\n        mint: asset.mint,\n        publicKey: asset.vaultAddress\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = PoolBalancesTab;\n\nfunction BalanceItem(_ref4) {\n  _s2();\n\n  let {\n    mint,\n    publicKey,\n    isPoolToken\n  } = _ref4;\n  const [mintAccountInfo] = useAccountInfo(mint);\n  const [balanceAccountInfo] = useAccountInfo(publicKey);\n\n  let quantityDisplay = /*#__PURE__*/_jsxDEV(Spin, {\n    size: \"small\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 25\n  }, this);\n\n  if (mintAccountInfo && balanceAccountInfo) {\n    const mintInfo = parseTokenMintData(mintAccountInfo.data);\n\n    if (mint.equals(WRAPPED_SOL_MINT)) {\n      quantityDisplay = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: balanceAccountInfo.lamports / 10 ** mintInfo.decimals\n      }, void 0, false);\n    } else {\n      const accountInfo = parseTokenAccountData(balanceAccountInfo.data);\n      quantityDisplay = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: accountInfo.amount / 10 ** mintInfo.decimals\n      }, void 0, false);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [quantityDisplay, ' ', isPoolToken ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\"Pool Token (\", /*#__PURE__*/_jsxDEV(MintName, {\n        mint: mint\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 23\n      }, this), \")\"]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(MintName, {\n      mint: mint\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n      type: \"link\",\n      icon: /*#__PURE__*/_jsxDEV(LinkOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }, this),\n      href: 'https://solscan.io/address/' + publicKey.toBase58(),\n      target: \"_blank\",\n      rel: \"noopener noreferrer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(BalanceItem, \"s4fsFjl2OeSLfPVMwXVxbVYsbE0=\", false, function () {\n  return [useAccountInfo, useAccountInfo];\n});\n\n_c4 = BalanceItem;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"PoolBalancesPanel\");\n$RefreshReg$(_c2, \"WalletBalancesTab\");\n$RefreshReg$(_c3, \"PoolBalancesTab\");\n$RefreshReg$(_c4, \"BalanceItem\");","map":{"version":3,"sources":["/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/pages/pools/PoolPage/PoolBalancesPanel.tsx"],"names":["React","useAccountInfo","parseTokenAccountData","parseTokenMintData","Button","Spin","Tabs","FloatingElement","useTokenAccounts","MintName","LinkOutlined","WRAPPED_SOL_MINT","TabPane","PoolBalancesPanel","poolInfo","WalletBalancesTab","tokenAccounts","state","poolTokenMint","assets","map","asset","mint","index","tokenAccount","find","account","effectiveMint","equals","pubkey","PoolBalancesTab","vaultAddress","BalanceItem","publicKey","isPoolToken","mintAccountInfo","balanceAccountInfo","quantityDisplay","mintInfo","data","lamports","decimals","accountInfo","amount","toBase58"],"mappings":"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","sourcesContent":["import { PoolInfo } from '@project-serum/pool';\nimport React from 'react';\nimport { PublicKey } from '@solana/web3.js';\nimport { useAccountInfo } from '../../../utils/connection';\nimport {\n  parseTokenAccountData,\n  parseTokenMintData,\n} from '../../../utils/tokens';\nimport { Button, Spin, Tabs } from 'antd';\nimport FloatingElement from '../../../components/layout/FloatingElement';\nimport { useTokenAccounts } from '../../../utils/markets';\nimport { MintName } from '../../../components/MintName';\nimport { LinkOutlined } from '@ant-design/icons';\nimport { WRAPPED_SOL_MINT } from '@project-serum/serum/lib/token-instructions';\n\nconst { TabPane } = Tabs;\n\nexport default function PoolBalancesPanel({\n  poolInfo,\n}: {\n  poolInfo: PoolInfo;\n}) {\n  return (\n    <FloatingElement>\n      <Tabs>\n        <TabPane tab=\"Wallet Balances\" key=\"wallet\">\n          <WalletBalancesTab poolInfo={poolInfo} />\n        </TabPane>\n        <TabPane tab=\"Pool Balances\" key=\"pool\">\n          <PoolBalancesTab poolInfo={poolInfo} />\n        </TabPane>\n      </Tabs>\n    </FloatingElement>\n  );\n}\n\nfunction WalletBalancesTab({ poolInfo }: { poolInfo: PoolInfo }) {\n  const [tokenAccounts] = useTokenAccounts();\n  return (\n    <ul>\n      {[\n        poolInfo.state.poolTokenMint,\n        ...poolInfo.state.assets.map((asset) => asset.mint),\n      ].map((mint, index) => {\n        const tokenAccount = tokenAccounts?.find((account) =>\n          account.effectiveMint.equals(mint),\n        );\n        if (!tokenAccount) {\n          return null;\n        }\n        return (\n          <BalanceItem\n            key={index}\n            mint={mint}\n            publicKey={tokenAccount.pubkey}\n            isPoolToken={mint.equals(poolInfo.state.poolTokenMint)}\n          />\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction PoolBalancesTab({ poolInfo }: { poolInfo: PoolInfo }) {\n  return (\n    <ul>\n      {poolInfo.state.assets.map((asset, index) => {\n        return (\n          <BalanceItem\n            key={index}\n            mint={asset.mint}\n            publicKey={asset.vaultAddress}\n          />\n        );\n      })}\n    </ul>\n  );\n}\n\ninterface BalanceItemProps {\n  mint: PublicKey;\n  publicKey: PublicKey;\n  isPoolToken?: boolean;\n}\n\nfunction BalanceItem({ mint, publicKey, isPoolToken }: BalanceItemProps) {\n  const [mintAccountInfo] = useAccountInfo(mint);\n  const [balanceAccountInfo] = useAccountInfo(publicKey);\n  let quantityDisplay = <Spin size=\"small\" />;\n  if (mintAccountInfo && balanceAccountInfo) {\n    const mintInfo = parseTokenMintData(mintAccountInfo.data);\n    if (mint.equals(WRAPPED_SOL_MINT)) {\n      quantityDisplay = (\n        <>{balanceAccountInfo.lamports / 10 ** mintInfo.decimals}</>\n      );\n    } else {\n      const accountInfo = parseTokenAccountData(balanceAccountInfo.data);\n      quantityDisplay = <>{accountInfo.amount / 10 ** mintInfo.decimals}</>;\n    }\n  }\n\n  return (\n    <li>\n      {quantityDisplay}{' '}\n      {isPoolToken ? (\n        <>\n          Pool Token (<MintName mint={mint} />)\n        </>\n      ) : (\n        <MintName mint={mint} />\n      )}{' '}\n      <Button\n        type=\"link\"\n        icon={<LinkOutlined />}\n        href={'https://solscan.io/address/' + publicKey.toBase58()}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      />\n    </li>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}