{"ast":null,"code":"import _slicedToArray from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{PublicKey}from'@solana/web3.js';import React,{useMemo,useState}from'react';import{useAccountInfo}from'../utils/connection';import{isValidPublicKey}from'../utils/utils';import{TokenInstructions}from'@project-serum/serum';import{parseTokenMintData,useMintToTickers}from'../utils/tokens';import{AutoComplete,Form,Tooltip}from'antd';import Link from'./Link';import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";export function useMintInput(name,label,tooltip){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),address=_useState2[0],setAddress=_useState2[1];var _useAccountInfo=useAccountInfo(isValidPublicKey(address)?new PublicKey(address):null),_useAccountInfo2=_slicedToArray(_useAccountInfo,2),accountInfo=_useAccountInfo2[0],loaded=_useAccountInfo2[1];var mintToTickers=useMintToTickers();var options=useMemo(function(){return Object.entries(mintToTickers).filter(function(_ref){var _ref2=_slicedToArray(_ref,2),mintAddress=_ref2[0],ticker=_ref2[1];return mintAddress.includes(address)||ticker.toLowerCase().includes(address.toLowerCase());}).map(function(_ref3){var _ref4=_slicedToArray(_ref3,2),mintAddress=_ref4[0],ticker=_ref4[1];return{value:mintAddress,label:/*#__PURE__*/_jsxs(_Fragment,{children:[ticker,\" (\",mintAddress,\")\"]})};});},[mintToTickers,address]);var _useMemo=useMemo(function(){var validateStatus='';var hasFeedback=false;var help=null;var mintInfo=null;if(address){hasFeedback=true;if(accountInfo){if(accountInfo.owner.equals(TokenInstructions.TOKEN_PROGRAM_ID)&&accountInfo.data.length===82){var parsed=parseTokenMintData(accountInfo.data);if(parsed.initialized){validateStatus='success';mintInfo={address:new PublicKey(address),decimals:parsed.decimals};}else{validateStatus='error';help='Invalid SPL mint';}}else{validateStatus='error';help='Invalid SPL mint address';}}else if(isValidPublicKey(address)&&!loaded){validateStatus='validating';}else{validateStatus='error';help='Invalid Solana address';}}return{validateStatus:validateStatus,hasFeedback:hasFeedback,help:help,mintInfo:mintInfo};},[address,accountInfo,loaded]),validateStatus=_useMemo.validateStatus,hasFeedback=_useMemo.hasFeedback,help=_useMemo.help,mintInfo=_useMemo.mintInfo;var input=/*#__PURE__*/_jsx(Form.Item,{label:/*#__PURE__*/_jsx(Tooltip,{title:/*#__PURE__*/_jsxs(_Fragment,{children:[tooltip,\" You can look up token mint addresses on\",' ',/*#__PURE__*/_jsx(Link,{external:true,to:\"https://sollet.io\",children:\"sollet.io\"}),\".\"]}),children:label}),name:name,validateStatus:validateStatus,hasFeedback:hasFeedback,help:help,children:/*#__PURE__*/_jsx(AutoComplete,{options:options,value:address,onChange:function onChange(value){return setAddress(value);}})});return[input,mintInfo];}","map":{"version":3,"sources":["/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/src/components/useMintInput.tsx"],"names":["PublicKey","React","useMemo","useState","useAccountInfo","isValidPublicKey","TokenInstructions","parseTokenMintData","useMintToTickers","AutoComplete","Form","Tooltip","Link","useMintInput","name","label","tooltip","address","setAddress","accountInfo","loaded","mintToTickers","options","Object","entries","filter","mintAddress","ticker","includes","toLowerCase","map","value","validateStatus","hasFeedback","help","mintInfo","owner","equals","TOKEN_PROGRAM_ID","data","length","parsed","initialized","decimals","input"],"mappings":"yLAAA,OAASA,SAAT,KAA0B,iBAA1B,CACA,MAAOC,CAAAA,KAAP,EAA8BC,OAA9B,CAAuCC,QAAvC,KAAuD,OAAvD,CACA,OAASC,cAAT,KAA+B,qBAA/B,CACA,OAASC,gBAAT,KAAiC,gBAAjC,CAEA,OAASC,iBAAT,KAAkC,sBAAlC,CACA,OAASC,kBAAT,CAA6BC,gBAA7B,KAAqD,iBAArD,CACA,OAASC,YAAT,CAAuBC,IAAvB,CAA6BC,OAA7B,KAA4C,MAA5C,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,C,6IAOA,MAAO,SAASC,CAAAA,YAAT,CACLC,IADK,CAELC,KAFK,CAGLC,OAHK,CAI4B,CACjC,cAA8Bb,QAAQ,CAAC,EAAD,CAAtC,wCAAOc,OAAP,eAAgBC,UAAhB,eACA,oBAA8Bd,cAAc,CAC1CC,gBAAgB,CAACY,OAAD,CAAhB,CAA4B,GAAIjB,CAAAA,SAAJ,CAAciB,OAAd,CAA5B,CAAqD,IADX,CAA5C,oDAAOE,WAAP,qBAAoBC,MAApB,qBAIA,GAAMC,CAAAA,aAAa,CAAGb,gBAAgB,EAAtC,CACA,GAAMc,CAAAA,OAAO,CAAGpB,OAAO,CAAC,UAAM,CAC5B,MAAOqB,CAAAA,MAAM,CAACC,OAAP,CAAeH,aAAf,EACJI,MADI,CAEH,gDAAEC,WAAF,UAAeC,MAAf,gBACED,CAAAA,WAAW,CAACE,QAAZ,CAAqBX,OAArB,GACAU,MAAM,CAACE,WAAP,GAAqBD,QAArB,CAA8BX,OAAO,CAACY,WAAR,EAA9B,CAFF,EAFG,EAMJC,GANI,CAMA,kDAAEJ,WAAF,UAAeC,MAAf,gBAA4B,CAC/BI,KAAK,CAAEL,WADwB,CAE/BX,KAAK,cACH,2BACGY,MADH,MACaD,WADb,OAH6B,CAA5B,EANA,CAAP,CAcD,CAfsB,CAepB,CAACL,aAAD,CAAgBJ,OAAhB,CAfoB,CAAvB,CAiBA,aAAwDf,OAAO,CAAC,UAAM,CACpE,GAAI8B,CAAAA,cAA8B,CAAG,EAArC,CACA,GAAIC,CAAAA,WAAW,CAAG,KAAlB,CACA,GAAIC,CAAAA,IAAmB,CAAG,IAA1B,CACA,GAAIC,CAAAA,QAAyB,CAAG,IAAhC,CACA,GAAIlB,OAAJ,CAAa,CACXgB,WAAW,CAAG,IAAd,CACA,GAAId,WAAJ,CAAiB,CACf,GACEA,WAAW,CAACiB,KAAZ,CAAkBC,MAAlB,CAAyB/B,iBAAiB,CAACgC,gBAA3C,GACAnB,WAAW,CAACoB,IAAZ,CAAiBC,MAAjB,GAA4B,EAF9B,CAGE,CACA,GAAIC,CAAAA,MAAM,CAAGlC,kBAAkB,CAACY,WAAW,CAACoB,IAAb,CAA/B,CACA,GAAIE,MAAM,CAACC,WAAX,CAAwB,CACtBV,cAAc,CAAG,SAAjB,CACAG,QAAQ,CAAG,CACTlB,OAAO,CAAE,GAAIjB,CAAAA,SAAJ,CAAciB,OAAd,CADA,CAET0B,QAAQ,CAAEF,MAAM,CAACE,QAFR,CAAX,CAID,CAND,IAMO,CACLX,cAAc,CAAG,OAAjB,CACAE,IAAI,CAAG,kBAAP,CACD,CACF,CAfD,IAeO,CACLF,cAAc,CAAG,OAAjB,CACAE,IAAI,CAAG,0BAAP,CACD,CACF,CApBD,IAoBO,IAAI7B,gBAAgB,CAACY,OAAD,CAAhB,EAA6B,CAACG,MAAlC,CAA0C,CAC/CY,cAAc,CAAG,YAAjB,CACD,CAFM,IAEA,CACLA,cAAc,CAAG,OAAjB,CACAE,IAAI,CAAG,wBAAP,CACD,CACF,CACD,MAAO,CAAEF,cAAc,CAAdA,cAAF,CAAkBC,WAAW,CAAXA,WAAlB,CAA+BC,IAAI,CAAJA,IAA/B,CAAqCC,QAAQ,CAARA,QAArC,CAAP,CACD,CAnC8D,CAmC5D,CAAClB,OAAD,CAAUE,WAAV,CAAuBC,MAAvB,CAnC4D,CAA/D,CAAQY,cAAR,UAAQA,cAAR,CAAwBC,WAAxB,UAAwBA,WAAxB,CAAqCC,IAArC,UAAqCA,IAArC,CAA2CC,QAA3C,UAA2CA,QAA3C,CAqCA,GAAMS,CAAAA,KAAK,cACT,KAAC,IAAD,CAAM,IAAN,EACE,KAAK,cACH,KAAC,OAAD,EACE,KAAK,cACH,2BACG5B,OADH,4CACoD,GADpD,cAEE,KAAC,IAAD,EAAM,QAAQ,KAAd,CAAe,EAAE,CAAC,mBAAlB,uBAFF,OAFJ,UAWGD,KAXH,EAFJ,CAgBE,IAAI,CAAED,IAhBR,CAiBE,cAAc,CAAEkB,cAjBlB,CAkBE,WAAW,CAAEC,WAlBf,CAmBE,IAAI,CAAEC,IAnBR,uBAqBE,KAAC,YAAD,EACE,OAAO,CAAEZ,OADX,CAEE,KAAK,CAAEL,OAFT,CAGE,QAAQ,CAAE,kBAACc,KAAD,QAAWb,CAAAA,UAAU,CAACa,KAAD,CAArB,EAHZ,EArBF,EADF,CA8BA,MAAO,CAACa,KAAD,CAAQT,QAAR,CAAP,CACD","sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport React, { ReactElement, useMemo, useState } from 'react';\nimport { useAccountInfo } from '../utils/connection';\nimport { isValidPublicKey } from '../utils/utils';\nimport { ValidateStatus } from 'antd/lib/form/FormItem';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { parseTokenMintData, useMintToTickers } from '../utils/tokens';\nimport { AutoComplete, Form, Tooltip } from 'antd';\nimport Link from './Link';\n\nexport interface MintInfo {\n  address: PublicKey;\n  decimals: number;\n}\n\nexport function useMintInput(\n  name,\n  label: string | ReactElement,\n  tooltip?: string | ReactElement,\n): [ReactElement, MintInfo | null] {\n  const [address, setAddress] = useState('');\n  const [accountInfo, loaded] = useAccountInfo(\n    isValidPublicKey(address) ? new PublicKey(address) : null,\n  );\n\n  const mintToTickers = useMintToTickers();\n  const options = useMemo(() => {\n    return Object.entries(mintToTickers)\n      .filter(\n        ([mintAddress, ticker]) =>\n          mintAddress.includes(address) ||\n          ticker.toLowerCase().includes(address.toLowerCase()),\n      )\n      .map(([mintAddress, ticker]) => ({\n        value: mintAddress,\n        label: (\n          <>\n            {ticker} ({mintAddress})\n          </>\n        ),\n      }));\n  }, [mintToTickers, address]);\n\n  const { validateStatus, hasFeedback, help, mintInfo } = useMemo(() => {\n    let validateStatus: ValidateStatus = '';\n    let hasFeedback = false;\n    let help: string | null = null;\n    let mintInfo: MintInfo | null = null;\n    if (address) {\n      hasFeedback = true;\n      if (accountInfo) {\n        if (\n          accountInfo.owner.equals(TokenInstructions.TOKEN_PROGRAM_ID) &&\n          accountInfo.data.length === 82\n        ) {\n          let parsed = parseTokenMintData(accountInfo.data);\n          if (parsed.initialized) {\n            validateStatus = 'success';\n            mintInfo = {\n              address: new PublicKey(address),\n              decimals: parsed.decimals,\n            };\n          } else {\n            validateStatus = 'error';\n            help = 'Invalid SPL mint';\n          }\n        } else {\n          validateStatus = 'error';\n          help = 'Invalid SPL mint address';\n        }\n      } else if (isValidPublicKey(address) && !loaded) {\n        validateStatus = 'validating';\n      } else {\n        validateStatus = 'error';\n        help = 'Invalid Solana address';\n      }\n    }\n    return { validateStatus, hasFeedback, help, mintInfo };\n  }, [address, accountInfo, loaded]);\n\n  const input = (\n    <Form.Item\n      label={\n        <Tooltip\n          title={\n            <>\n              {tooltip} You can look up token mint addresses on{' '}\n              <Link external to=\"https://sollet.io\">\n                sollet.io\n              </Link>\n              .\n            </>\n          }\n        >\n          {label}\n        </Tooltip>\n      }\n      name={name}\n      validateStatus={validateStatus}\n      hasFeedback={hasFeedback}\n      help={help}\n    >\n      <AutoComplete\n        options={options}\n        value={address}\n        onChange={(value) => setAddress(value)}\n      />\n    </Form.Item>\n  );\n\n  return [input, mintInfo];\n}\n"]},"metadata":{},"sourceType":"module"}