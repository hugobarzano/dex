{"ast":null,"code":"var _jsxFileName = \"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/components/useMintInput.tsx\",\n    _s = $RefreshSig$();\n\nimport { PublicKey } from '@solana/web3.js';\nimport React, { useMemo, useState } from 'react';\nimport { useAccountInfo } from '../utils/connection';\nimport { isValidPublicKey } from '../utils/utils';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { parseTokenMintData, useMintToTickers } from '../utils/tokens';\nimport { AutoComplete, Form, Tooltip } from 'antd';\nimport Link from './Link';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function useMintInput(name, label, tooltip) {\n  _s();\n\n  const [address, setAddress] = useState('');\n  const [accountInfo, loaded] = useAccountInfo(isValidPublicKey(address) ? new PublicKey(address) : null);\n  const mintToTickers = useMintToTickers();\n  const options = useMemo(() => {\n    return Object.entries(mintToTickers).filter(_ref => {\n      let [mintAddress, ticker] = _ref;\n      return mintAddress.includes(address) || ticker.toLowerCase().includes(address.toLowerCase());\n    }).map(_ref2 => {\n      let [mintAddress, ticker] = _ref2;\n      return {\n        value: mintAddress,\n        label: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [ticker, \" (\", mintAddress, \")\"]\n        }, void 0, true)\n      };\n    });\n  }, [mintToTickers, address]);\n  const {\n    validateStatus,\n    hasFeedback,\n    help,\n    mintInfo\n  } = useMemo(() => {\n    let validateStatus = '';\n    let hasFeedback = false;\n    let help = null;\n    let mintInfo = null;\n\n    if (address) {\n      hasFeedback = true;\n\n      if (accountInfo) {\n        if (accountInfo.owner.equals(TokenInstructions.TOKEN_PROGRAM_ID) && accountInfo.data.length === 82) {\n          let parsed = parseTokenMintData(accountInfo.data);\n\n          if (parsed.initialized) {\n            validateStatus = 'success';\n            mintInfo = {\n              address: new PublicKey(address),\n              decimals: parsed.decimals\n            };\n          } else {\n            validateStatus = 'error';\n            help = 'Invalid SPL mint';\n          }\n        } else {\n          validateStatus = 'error';\n          help = 'Invalid SPL mint address';\n        }\n      } else if (isValidPublicKey(address) && !loaded) {\n        validateStatus = 'validating';\n      } else {\n        validateStatus = 'error';\n        help = 'Invalid Solana address';\n      }\n    }\n\n    return {\n      validateStatus,\n      hasFeedback,\n      help,\n      mintInfo\n    };\n  }, [address, accountInfo, loaded]);\n\n  const input = /*#__PURE__*/_jsxDEV(Form.Item, {\n    label: /*#__PURE__*/_jsxDEV(Tooltip, {\n      title: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [tooltip, \" You can look up token mint addresses on\", ' ', /*#__PURE__*/_jsxDEV(Link, {\n          external: true,\n          to: \"https://sollet.io\",\n          children: \"sollet.io\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this), \".\"]\n      }, void 0, true),\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this),\n    name: name,\n    validateStatus: validateStatus,\n    hasFeedback: hasFeedback,\n    help: help,\n    children: /*#__PURE__*/_jsxDEV(AutoComplete, {\n      options: options,\n      value: address,\n      onChange: value => setAddress(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n\n  return [input, mintInfo];\n}\n\n_s(useMintInput, \"IqA1c1+DOrl/C/WhfSLgRwuOnDY=\", false, function () {\n  return [useAccountInfo, useMintToTickers];\n});","map":{"version":3,"sources":["/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/components/useMintInput.tsx"],"names":["PublicKey","React","useMemo","useState","useAccountInfo","isValidPublicKey","TokenInstructions","parseTokenMintData","useMintToTickers","AutoComplete","Form","Tooltip","Link","useMintInput","name","label","tooltip","address","setAddress","accountInfo","loaded","mintToTickers","options","Object","entries","filter","mintAddress","ticker","includes","toLowerCase","map","value","validateStatus","hasFeedback","help","mintInfo","owner","equals","TOKEN_PROGRAM_ID","data","length","parsed","initialized","decimals","input"],"mappings":"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","sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport React, { ReactElement, useMemo, useState } from 'react';\nimport { useAccountInfo } from '../utils/connection';\nimport { isValidPublicKey } from '../utils/utils';\nimport { ValidateStatus } from 'antd/lib/form/FormItem';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { parseTokenMintData, useMintToTickers } from '../utils/tokens';\nimport { AutoComplete, Form, Tooltip } from 'antd';\nimport Link from './Link';\n\nexport interface MintInfo {\n  address: PublicKey;\n  decimals: number;\n}\n\nexport function useMintInput(\n  name,\n  label: string | ReactElement,\n  tooltip?: string | ReactElement,\n): [ReactElement, MintInfo | null] {\n  const [address, setAddress] = useState('');\n  const [accountInfo, loaded] = useAccountInfo(\n    isValidPublicKey(address) ? new PublicKey(address) : null,\n  );\n\n  const mintToTickers = useMintToTickers();\n  const options = useMemo(() => {\n    return Object.entries(mintToTickers)\n      .filter(\n        ([mintAddress, ticker]) =>\n          mintAddress.includes(address) ||\n          ticker.toLowerCase().includes(address.toLowerCase()),\n      )\n      .map(([mintAddress, ticker]) => ({\n        value: mintAddress,\n        label: (\n          <>\n            {ticker} ({mintAddress})\n          </>\n        ),\n      }));\n  }, [mintToTickers, address]);\n\n  const { validateStatus, hasFeedback, help, mintInfo } = useMemo(() => {\n    let validateStatus: ValidateStatus = '';\n    let hasFeedback = false;\n    let help: string | null = null;\n    let mintInfo: MintInfo | null = null;\n    if (address) {\n      hasFeedback = true;\n      if (accountInfo) {\n        if (\n          accountInfo.owner.equals(TokenInstructions.TOKEN_PROGRAM_ID) &&\n          accountInfo.data.length === 82\n        ) {\n          let parsed = parseTokenMintData(accountInfo.data);\n          if (parsed.initialized) {\n            validateStatus = 'success';\n            mintInfo = {\n              address: new PublicKey(address),\n              decimals: parsed.decimals,\n            };\n          } else {\n            validateStatus = 'error';\n            help = 'Invalid SPL mint';\n          }\n        } else {\n          validateStatus = 'error';\n          help = 'Invalid SPL mint address';\n        }\n      } else if (isValidPublicKey(address) && !loaded) {\n        validateStatus = 'validating';\n      } else {\n        validateStatus = 'error';\n        help = 'Invalid Solana address';\n      }\n    }\n    return { validateStatus, hasFeedback, help, mintInfo };\n  }, [address, accountInfo, loaded]);\n\n  const input = (\n    <Form.Item\n      label={\n        <Tooltip\n          title={\n            <>\n              {tooltip} You can look up token mint addresses on{' '}\n              <Link external to=\"https://sollet.io\">\n                sollet.io\n              </Link>\n              .\n            </>\n          }\n        >\n          {label}\n        </Tooltip>\n      }\n      name={name}\n      validateStatus={validateStatus}\n      hasFeedback={hasFeedback}\n      help={help}\n    >\n      <AutoComplete\n        options={options}\n        value={address}\n        onChange={(value) => setAddress(value)}\n      />\n    </Form.Item>\n  );\n\n  return [input, mintInfo];\n}\n"]},"metadata":{},"sourceType":"module"}