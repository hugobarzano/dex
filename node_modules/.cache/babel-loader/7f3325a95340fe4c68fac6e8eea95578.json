{"ast":null,"code":"var _jsxFileName = \"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/components/StandaloneBalancesDisplay.tsx\";\nimport { Button, Col, Divider, Popover, Row } from 'antd';\nimport React, { useState } from 'react';\nimport FloatingElement from './layout/FloatingElement';\nimport styled from 'styled-components';\nimport { useBalances, useMarket, useSelectedBaseCurrencyAccount, useSelectedOpenOrdersAccount, useSelectedQuoteCurrencyAccount, useTokenAccounts } from '../utils/markets';\nimport DepositDialog from './DepositDialog';\nimport { useWallet } from '../utils/wallet';\nimport Link from './Link';\nimport { settleFunds } from '../utils/send';\nimport { useSendConnection } from '../utils/connection';\nimport { notify } from '../utils/notifications';\nimport StandaloneTokenAccountsSelect from './StandaloneTokenAccountSelect';\nimport LinkAddress from './LinkAddress';\nimport { InfoCircleOutlined } from '@ant-design/icons';\nimport { useInterval } from '../utils/useInterval';\nimport { useLocalStorageState } from '../utils/utils';\nimport { AUTO_SETTLE_DISABLED_OVERRIDE } from '../utils/preferences';\nimport { useReferrer } from '../utils/referrer';\nconst RowBox = styled(Row)`\n  padding-bottom: 20px;\n`;\nconst Tip = styled.p`\n  font-size: 12px;\n  padding-top: 6px;\n`;\nconst ActionButton = styled(Button)`\n  color: #2abdd2;\n  background-color: #212734;\n  border-width: 0px;\n`;\nexport default function StandaloneBalancesDisplay() {\n  const {\n    baseCurrency,\n    quoteCurrency,\n    market\n  } = useMarket();\n  const balances = useBalances();\n  const openOrdersAccount = useSelectedOpenOrdersAccount(true);\n  const connection = useSendConnection();\n  const {\n    providerUrl,\n    providerName,\n    wallet,\n    connected\n  } = useWallet();\n  const [baseOrQuote, setBaseOrQuote] = useState('');\n  const baseCurrencyAccount = useSelectedBaseCurrencyAccount();\n  const quoteCurrencyAccount = useSelectedQuoteCurrencyAccount();\n  const [tokenAccounts] = useTokenAccounts();\n  const baseCurrencyBalances = balances && balances.find(b => b.coin === baseCurrency);\n  const quoteCurrencyBalances = balances && balances.find(b => b.coin === quoteCurrency);\n  const [autoSettleEnabled] = useLocalStorageState('autoSettleEnabled', true);\n  const [lastSettledAt, setLastSettledAt] = useState(0);\n  const {\n    usdcRef,\n    usdtRef\n  } = useReferrer();\n\n  async function onSettleFunds() {\n    if (!wallet) {\n      notify({\n        message: 'Wallet not connected',\n        description: 'wallet is undefined',\n        type: 'error'\n      });\n      return;\n    }\n\n    if (!market) {\n      notify({\n        message: 'Error settling funds',\n        description: 'market is undefined',\n        type: 'error'\n      });\n      return;\n    }\n\n    if (!openOrdersAccount) {\n      notify({\n        message: 'Error settling funds',\n        description: 'Open orders account is undefined',\n        type: 'error'\n      });\n      return;\n    }\n\n    if (!baseCurrencyAccount) {\n      notify({\n        message: 'Error settling funds',\n        description: 'Open orders account is undefined',\n        type: 'error'\n      });\n      return;\n    }\n\n    if (!quoteCurrencyAccount) {\n      notify({\n        message: 'Error settling funds',\n        description: 'Open orders account is undefined',\n        type: 'error'\n      });\n      return;\n    }\n\n    try {\n      await settleFunds({\n        market,\n        openOrders: openOrdersAccount,\n        connection,\n        wallet,\n        baseCurrencyAccount,\n        quoteCurrencyAccount,\n        usdcRef,\n        usdtRef\n      });\n    } catch (e) {\n      notify({\n        message: 'Error settling funds',\n        description: e.message,\n        type: 'error'\n      });\n    }\n  }\n\n  useInterval(() => {\n    const autoSettle = async () => {\n      if (AUTO_SETTLE_DISABLED_OVERRIDE || !wallet || !market || !openOrdersAccount || !baseCurrencyAccount || !quoteCurrencyAccount || !autoSettleEnabled) {\n        return;\n      }\n\n      if (!(baseCurrencyBalances === null || baseCurrencyBalances === void 0 ? void 0 : baseCurrencyBalances.unsettled) && !(quoteCurrencyBalances === null || quoteCurrencyBalances === void 0 ? void 0 : quoteCurrencyBalances.unsettled)) {\n        return;\n      }\n\n      if (Date.now() - lastSettledAt < 15000) {\n        return;\n      }\n\n      try {\n        console.log('Settling funds...');\n        setLastSettledAt(Date.now());\n        await settleFunds({\n          market,\n          openOrders: openOrdersAccount,\n          connection,\n          wallet,\n          baseCurrencyAccount,\n          quoteCurrencyAccount,\n          usdcRef,\n          usdtRef\n        });\n      } catch (e) {\n        console.log('Error auto settling funds: ' + e.message);\n        return;\n      }\n\n      console.log('Finished settling funds.');\n    };\n\n    connected && (wallet === null || wallet === void 0 ? void 0 : wallet.autoApprove) && autoSettleEnabled && autoSettle();\n  }, 1000);\n  const formattedBalances = [[baseCurrency, baseCurrencyBalances, 'base', market === null || market === void 0 ? void 0 : market.baseMintAddress.toBase58()], [quoteCurrency, quoteCurrencyBalances, 'quote', market === null || market === void 0 ? void 0 : market.quoteMintAddress.toBase58()]];\n  return /*#__PURE__*/React.createElement(FloatingElement, {\n    style: {\n      flex: 1,\n      paddingTop: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 5\n    }\n  }, formattedBalances.map(([currency, balances, baseOrQuote, mint], index) => /*#__PURE__*/React.createElement(React.Fragment, {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Divider, {\n    style: {\n      borderColor: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }\n  }, currency, ' ', mint && /*#__PURE__*/React.createElement(Popover, {\n    content: /*#__PURE__*/React.createElement(LinkAddress, {\n      address: mint,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 28\n      }\n    }),\n    placement: \"bottomRight\",\n    title: \"Token mint\",\n    trigger: \"hover\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InfoCircleOutlined, {\n    style: {\n      color: '#2abdd2'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 19\n    }\n  }))), connected && /*#__PURE__*/React.createElement(RowBox, {\n    align: \"middle\",\n    style: {\n      paddingBottom: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(StandaloneTokenAccountsSelect, {\n    accounts: tokenAccounts === null || tokenAccounts === void 0 ? void 0 : tokenAccounts.filter(account => account.effectiveMint.toBase58() === mint),\n    mint: mint,\n    label: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(RowBox, {\n    align: \"middle\",\n    justify: \"space-between\",\n    style: {\n      paddingBottom: 12\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 15\n    }\n  }, \"Wallet balance:\"), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 15\n    }\n  }, balances && balances.wallet)), /*#__PURE__*/React.createElement(RowBox, {\n    align: \"middle\",\n    justify: \"space-between\",\n    style: {\n      paddingBottom: 12\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 15\n    }\n  }, \"Unsettled balance:\"), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 15\n    }\n  }, balances && balances.unsettled)), /*#__PURE__*/React.createElement(RowBox, {\n    align: \"middle\",\n    justify: \"space-around\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    style: {\n      width: 150\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ActionButton, {\n    block: true,\n    size: \"large\",\n    onClick: () => setBaseOrQuote(baseOrQuote),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 17\n    }\n  }, \"Deposit\")), /*#__PURE__*/React.createElement(Col, {\n    style: {\n      width: 150\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ActionButton, {\n    block: true,\n    size: \"large\",\n    onClick: onSettleFunds,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 17\n    }\n  }, \"Settle\"))), /*#__PURE__*/React.createElement(Tip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }\n  }, \"All deposits go to your\", ' ', /*#__PURE__*/React.createElement(Link, {\n    external: true,\n    to: providerUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 15\n    }\n  }, providerName), ' ', \"wallet\"))), /*#__PURE__*/React.createElement(DepositDialog, {\n    baseOrQuote: baseOrQuote,\n    onClose: () => setBaseOrQuote(''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/components/StandaloneBalancesDisplay.tsx"],"names":["Button","Col","Divider","Popover","Row","React","useState","FloatingElement","styled","useBalances","useMarket","useSelectedBaseCurrencyAccount","useSelectedOpenOrdersAccount","useSelectedQuoteCurrencyAccount","useTokenAccounts","DepositDialog","useWallet","Link","settleFunds","useSendConnection","notify","StandaloneTokenAccountsSelect","LinkAddress","InfoCircleOutlined","useInterval","useLocalStorageState","AUTO_SETTLE_DISABLED_OVERRIDE","useReferrer","RowBox","Tip","p","ActionButton","StandaloneBalancesDisplay","baseCurrency","quoteCurrency","market","balances","openOrdersAccount","connection","providerUrl","providerName","wallet","connected","baseOrQuote","setBaseOrQuote","baseCurrencyAccount","quoteCurrencyAccount","tokenAccounts","baseCurrencyBalances","find","b","coin","quoteCurrencyBalances","autoSettleEnabled","lastSettledAt","setLastSettledAt","usdcRef","usdtRef","onSettleFunds","message","description","type","openOrders","e","autoSettle","unsettled","Date","now","console","log","autoApprove","formattedBalances","baseMintAddress","toBase58","quoteMintAddress","flex","paddingTop","map","currency","mint","index","borderColor","color","paddingBottom","filter","account","effectiveMint","width"],"mappings":"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","sourcesContent":["import { Button, Col, Divider, Popover, Row } from 'antd';\nimport React, { useState } from 'react';\nimport FloatingElement from './layout/FloatingElement';\nimport styled from 'styled-components';\nimport {\n  useBalances,\n  useMarket,\n  useSelectedBaseCurrencyAccount,\n  useSelectedOpenOrdersAccount,\n  useSelectedQuoteCurrencyAccount,\n  useTokenAccounts,\n} from '../utils/markets';\nimport DepositDialog from './DepositDialog';\nimport { useWallet } from '../utils/wallet';\nimport Link from './Link';\nimport { settleFunds } from '../utils/send';\nimport { useSendConnection } from '../utils/connection';\nimport { notify } from '../utils/notifications';\nimport { Balances } from '../utils/types';\nimport StandaloneTokenAccountsSelect from './StandaloneTokenAccountSelect';\nimport LinkAddress from './LinkAddress';\nimport { InfoCircleOutlined } from '@ant-design/icons';\nimport { useInterval } from '../utils/useInterval';\nimport { useLocalStorageState } from '../utils/utils';\nimport { AUTO_SETTLE_DISABLED_OVERRIDE } from '../utils/preferences';\nimport { useReferrer } from '../utils/referrer';\n\nconst RowBox = styled(Row)`\n  padding-bottom: 20px;\n`;\n\nconst Tip = styled.p`\n  font-size: 12px;\n  padding-top: 6px;\n`;\n\nconst ActionButton = styled(Button)`\n  color: #2abdd2;\n  background-color: #212734;\n  border-width: 0px;\n`;\n\nexport default function StandaloneBalancesDisplay() {\n  const { baseCurrency, quoteCurrency, market } = useMarket();\n  const balances = useBalances();\n  const openOrdersAccount = useSelectedOpenOrdersAccount(true);\n  const connection = useSendConnection();\n  const { providerUrl, providerName, wallet, connected } = useWallet();\n  const [baseOrQuote, setBaseOrQuote] = useState('');\n  const baseCurrencyAccount = useSelectedBaseCurrencyAccount();\n  const quoteCurrencyAccount = useSelectedQuoteCurrencyAccount();\n  const [tokenAccounts] = useTokenAccounts();\n  const baseCurrencyBalances =\n    balances && balances.find((b) => b.coin === baseCurrency);\n  const quoteCurrencyBalances =\n    balances && balances.find((b) => b.coin === quoteCurrency);\n  const [autoSettleEnabled] = useLocalStorageState('autoSettleEnabled', true);\n  const [lastSettledAt, setLastSettledAt] = useState<number>(0);\n  const { usdcRef, usdtRef } = useReferrer();\n  async function onSettleFunds() {\n    if (!wallet) {\n      notify({\n        message: 'Wallet not connected',\n        description: 'wallet is undefined',\n        type: 'error',\n      });\n      return;\n    }\n\n    if (!market) {\n      notify({\n        message: 'Error settling funds',\n        description: 'market is undefined',\n        type: 'error',\n      });\n      return;\n    }\n    if (!openOrdersAccount) {\n      notify({\n        message: 'Error settling funds',\n        description: 'Open orders account is undefined',\n        type: 'error',\n      });\n      return;\n    }\n    if (!baseCurrencyAccount) {\n      notify({\n        message: 'Error settling funds',\n        description: 'Open orders account is undefined',\n        type: 'error',\n      });\n      return;\n    }\n    if (!quoteCurrencyAccount) {\n      notify({\n        message: 'Error settling funds',\n        description: 'Open orders account is undefined',\n        type: 'error',\n      });\n      return;\n    }\n\n    try {\n      await settleFunds({\n        market,\n        openOrders: openOrdersAccount,\n        connection,\n        wallet,\n        baseCurrencyAccount,\n        quoteCurrencyAccount,\n        usdcRef,\n        usdtRef,\n      });\n    } catch (e) {\n      notify({\n        message: 'Error settling funds',\n        description: e.message,\n        type: 'error',\n      });\n    }\n  }\n\n  useInterval(() => {\n    const autoSettle = async () => {\n      if (\n        AUTO_SETTLE_DISABLED_OVERRIDE ||\n        !wallet ||\n        !market ||\n        !openOrdersAccount ||\n        !baseCurrencyAccount ||\n        !quoteCurrencyAccount ||\n        !autoSettleEnabled\n      ) {\n        return;\n      }\n      if (\n        !baseCurrencyBalances?.unsettled &&\n        !quoteCurrencyBalances?.unsettled\n      ) {\n        return;\n      }\n      if (Date.now() - lastSettledAt < 15000) {\n        return;\n      }\n      try {\n        console.log('Settling funds...');\n        setLastSettledAt(Date.now());\n        await settleFunds({\n          market,\n          openOrders: openOrdersAccount,\n          connection,\n          wallet,\n          baseCurrencyAccount,\n          quoteCurrencyAccount,\n          usdcRef,\n          usdtRef,\n        });\n      } catch (e) {\n        console.log('Error auto settling funds: ' + e.message);\n        return;\n      }\n      console.log('Finished settling funds.');\n    };\n    connected && wallet?.autoApprove && autoSettleEnabled && autoSettle();\n  }, 1000);\n\n  const formattedBalances: [\n    string | undefined,\n    Balances | undefined,\n    string,\n    string | undefined,\n  ][] = [\n    [\n      baseCurrency,\n      baseCurrencyBalances,\n      'base',\n      market?.baseMintAddress.toBase58(),\n    ],\n    [\n      quoteCurrency,\n      quoteCurrencyBalances,\n      'quote',\n      market?.quoteMintAddress.toBase58(),\n    ],\n  ];\n\n  return (\n    <FloatingElement style={{ flex: 1, paddingTop: 10 }}>\n      {formattedBalances.map(\n        ([currency, balances, baseOrQuote, mint], index) => (\n          <React.Fragment key={index}>\n            <Divider style={{ borderColor: 'white' }}>\n              {currency}{' '}\n              {mint && (\n                <Popover\n                  content={<LinkAddress address={mint} />}\n                  placement=\"bottomRight\"\n                  title=\"Token mint\"\n                  trigger=\"hover\"\n                >\n                  <InfoCircleOutlined style={{ color: '#2abdd2' }} />\n                </Popover>\n              )}\n            </Divider>\n            {connected && (\n              <RowBox align=\"middle\" style={{ paddingBottom: 10 }}>\n                <StandaloneTokenAccountsSelect\n                  accounts={tokenAccounts?.filter(\n                    (account) => account.effectiveMint.toBase58() === mint,\n                  )}\n                  mint={mint}\n                  label\n                />\n              </RowBox>\n            )}\n            <RowBox\n              align=\"middle\"\n              justify=\"space-between\"\n              style={{ paddingBottom: 12 }}\n            >\n              <Col>Wallet balance:</Col>\n              <Col>{balances && balances.wallet}</Col>\n            </RowBox>\n            <RowBox\n              align=\"middle\"\n              justify=\"space-between\"\n              style={{ paddingBottom: 12 }}\n            >\n              <Col>Unsettled balance:</Col>\n              <Col>{balances && balances.unsettled}</Col>\n            </RowBox>\n            <RowBox align=\"middle\" justify=\"space-around\">\n              <Col style={{ width: 150 }}>\n                <ActionButton\n                  block\n                  size=\"large\"\n                  onClick={() => setBaseOrQuote(baseOrQuote)}\n                >\n                  Deposit\n                </ActionButton>\n              </Col>\n              <Col style={{ width: 150 }}>\n                <ActionButton block size=\"large\" onClick={onSettleFunds}>\n                  Settle\n                </ActionButton>\n              </Col>\n            </RowBox>\n            <Tip>\n              All deposits go to your{' '}\n              <Link external to={providerUrl}>\n                {providerName}\n              </Link>{' '}\n              wallet\n            </Tip>\n          </React.Fragment>\n        ),\n      )}\n      <DepositDialog\n        baseOrQuote={baseOrQuote}\n        onClose={() => setBaseOrQuote('')}\n      />\n    </FloatingElement>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}