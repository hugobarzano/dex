{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) {\n    if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPoolBasket = exports.loadPoolInfo = exports.isAdminControlledPool = exports.AdminControlledPoolInstructions = exports.PoolTransactions = exports.PoolInstructions = void 0;\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar schema_1 = require(\"./schema\");\n\nvar simulate_transaction_1 = require(\"./simulate-transaction\");\n\nvar transactions_1 = require(\"./transactions\");\n\n__exportStar(require(\"./schema\"), exports);\n\nvar instructions_1 = require(\"./instructions\");\n\nObject.defineProperty(exports, \"PoolInstructions\", {\n  enumerable: true,\n  get: function get() {\n    return instructions_1.PoolInstructions;\n  }\n});\n\nvar transactions_2 = require(\"./transactions\");\n\nObject.defineProperty(exports, \"PoolTransactions\", {\n  enumerable: true,\n  get: function get() {\n    return transactions_2.PoolTransactions;\n  }\n});\n\nvar admin_controlled_pool_1 = require(\"./admin-controlled-pool\");\n\nObject.defineProperty(exports, \"AdminControlledPoolInstructions\", {\n  enumerable: true,\n  get: function get() {\n    return admin_controlled_pool_1.AdminControlledPoolInstructions;\n  }\n});\nObject.defineProperty(exports, \"isAdminControlledPool\", {\n  enumerable: true,\n  get: function get() {\n    return admin_controlled_pool_1.isAdminControlledPool;\n  }\n});\n/**\n * Load and decode pool state.\n *\n * Throws an error if the pool is not found or invalid.\n *\n * @param connection Solana connection to use to fetch the pool state.\n * @param address Pool state account address.\n */\n\nfunction loadPoolInfo(_x, _x2) {\n  return _loadPoolInfo.apply(this, arguments);\n}\n\nfunction _loadPoolInfo() {\n  _loadPoolInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection, address) {\n    var accountInfo;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return connection.getAccountInfo(address);\n\n          case 2:\n            accountInfo = _context.sent;\n\n            if (!(accountInfo === null)) {\n              _context.next = 5;\n              break;\n            }\n\n            throw new Error('Pool does not exist');\n\n          case 5:\n            if (schema_1.isPoolState(accountInfo.data)) {\n              _context.next = 7;\n              break;\n            }\n\n            throw new Error('Address is not a valid pool');\n\n          case 7:\n            return _context.abrupt(\"return\", {\n              address: address,\n              state: schema_1.decodePoolState(accountInfo.data),\n              program: accountInfo.owner\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadPoolInfo.apply(this, arguments);\n}\n\nexports.loadPoolInfo = loadPoolInfo;\n/**\n * Fetch the basket for a creation or redemption.\n *\n * For creations, the basket is the quantity of each asset that needs to be paid\n * to the pool to create the given quantity of pool tokens.\n *\n * For redemptions, the basket is the quantity of each asset that is received\n * from the pool in return for redeeming the given quantity of pool tokens.\n *\n * @param connection Connection to use to fetch data.\n * @param pool Pool to interact with.\n * @param action Creation, redemption, or swap.\n * @param payer Arbitrary Solana address. Must hold nonzero SOL and not be owned\n * by a program.\n */\n\nfunction getPoolBasket(_x3, _x4, _x5) {\n  return _getPoolBasket.apply(this, arguments);\n}\n\nfunction _getPoolBasket() {\n  _getPoolBasket = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection, pool, action) {\n    var payer,\n        _a,\n        _transactions_1$PoolT,\n        transaction,\n        _yield$simulate_trans,\n        value,\n        i,\n        data,\n        _args2 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            payer = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : new web3_js_1.PublicKey('H6WR1VVoiwWz1GMSBALwUNNazvE7UhAZEjaYTTSwvV8D');\n            _transactions_1$PoolT = transactions_1.PoolTransactions.getBasket(pool, action, payer), transaction = _transactions_1$PoolT.transaction;\n            _context2.next = 4;\n            return simulate_transaction_1.simulateTransaction(connection, transaction, (_a = connection.commitment) !== null && _a !== void 0 ? _a : 'single');\n\n          case 4:\n            _yield$simulate_trans = _context2.sent;\n            value = _yield$simulate_trans.value;\n\n            if (!value.err) {\n              _context2.next = 9;\n              break;\n            }\n\n            console.warn('Program logs:', value.logs);\n            throw new Error('Failed to get pool basket: ' + JSON.stringify(value.err));\n\n          case 9:\n            if (!value.logs) {\n              _context2.next = 18;\n              break;\n            }\n\n            i = value.logs.length - 1;\n\n          case 11:\n            if (!(i >= 0)) {\n              _context2.next = 18;\n              break;\n            }\n\n            if (!value.logs[i].startsWith('Program log: ')) {\n              _context2.next = 15;\n              break;\n            }\n\n            data = Buffer.from(value.logs[i].slice('Program log: '.length), 'base64');\n            return _context2.abrupt(\"return\", schema_1.Basket.decode(data));\n\n          case 15:\n            --i;\n            _context2.next = 11;\n            break;\n\n          case 18:\n            throw new Error('Failed to find pool basket in logs');\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getPoolBasket.apply(this, arguments);\n}\n\nexports.getPoolBasket = getPoolBasket;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPoolBasket = exports.loadPoolInfo = exports.isAdminControlledPool = exports.AdminControlledPoolInstructions = exports.PoolTransactions = exports.PoolInstructions = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst schema_1 = require(\"./schema\");\nconst simulate_transaction_1 = require(\"./simulate-transaction\");\nconst transactions_1 = require(\"./transactions\");\n__exportStar(require(\"./schema\"), exports);\nvar instructions_1 = require(\"./instructions\");\nObject.defineProperty(exports, \"PoolInstructions\", { enumerable: true, get: function () { return instructions_1.PoolInstructions; } });\nvar transactions_2 = require(\"./transactions\");\nObject.defineProperty(exports, \"PoolTransactions\", { enumerable: true, get: function () { return transactions_2.PoolTransactions; } });\nvar admin_controlled_pool_1 = require(\"./admin-controlled-pool\");\nObject.defineProperty(exports, \"AdminControlledPoolInstructions\", { enumerable: true, get: function () { return admin_controlled_pool_1.AdminControlledPoolInstructions; } });\nObject.defineProperty(exports, \"isAdminControlledPool\", { enumerable: true, get: function () { return admin_controlled_pool_1.isAdminControlledPool; } });\n/**\n * Load and decode pool state.\n *\n * Throws an error if the pool is not found or invalid.\n *\n * @param connection Solana connection to use to fetch the pool state.\n * @param address Pool state account address.\n */\nasync function loadPoolInfo(connection, address) {\n    const accountInfo = await connection.getAccountInfo(address);\n    if (accountInfo === null) {\n        throw new Error('Pool does not exist');\n    }\n    if (!schema_1.isPoolState(accountInfo.data)) {\n        throw new Error('Address is not a valid pool');\n    }\n    return {\n        address,\n        state: schema_1.decodePoolState(accountInfo.data),\n        program: accountInfo.owner,\n    };\n}\nexports.loadPoolInfo = loadPoolInfo;\n/**\n * Fetch the basket for a creation or redemption.\n *\n * For creations, the basket is the quantity of each asset that needs to be paid\n * to the pool to create the given quantity of pool tokens.\n *\n * For redemptions, the basket is the quantity of each asset that is received\n * from the pool in return for redeeming the given quantity of pool tokens.\n *\n * @param connection Connection to use to fetch data.\n * @param pool Pool to interact with.\n * @param action Creation, redemption, or swap.\n * @param payer Arbitrary Solana address. Must hold nonzero SOL and not be owned\n * by a program.\n */\nasync function getPoolBasket(connection, pool, action, payer = new web3_js_1.PublicKey('H6WR1VVoiwWz1GMSBALwUNNazvE7UhAZEjaYTTSwvV8D')) {\n    var _a;\n    const { transaction } = transactions_1.PoolTransactions.getBasket(pool, action, payer);\n    const { value } = await simulate_transaction_1.simulateTransaction(connection, transaction, (_a = connection.commitment) !== null && _a !== void 0 ? _a : 'single');\n    if (value.err) {\n        console.warn('Program logs:', value.logs);\n        throw new Error('Failed to get pool basket: ' + JSON.stringify(value.err));\n    }\n    if (value.logs) {\n        for (let i = value.logs.length - 1; i >= 0; --i) {\n            if (value.logs[i].startsWith('Program log: ')) {\n                const data = Buffer.from(value.logs[i].slice('Program log: '.length), 'base64');\n                return schema_1.Basket.decode(data);\n            }\n        }\n    }\n    throw new Error('Failed to find pool basket in logs');\n}\nexports.getPoolBasket = getPoolBasket;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}