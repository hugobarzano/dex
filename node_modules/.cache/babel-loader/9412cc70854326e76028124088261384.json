{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _regeneratorRuntime from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useState}from'react';import{sleep,useLocalStorageState}from'./utils';import{useInterval}from'./useInterval';import{useConnection}from'./connection';import{useWallet}from'./wallet';import{useMarketInfos,useTokenAccounts}from'./markets';import{settleAllFunds}from'./send';import{Market}from\"@project-serum/serum\";import{jsx as _jsx}from\"react/jsx-runtime\";export var AUTO_SETTLE_DISABLED_OVERRIDE=true;var PreferencesContext=/*#__PURE__*/React.createContext(null);export function PreferencesProvider(_ref){var children=_ref.children;var _useLocalStorageState=useLocalStorageState('autoSettleEnabled',true),_useLocalStorageState2=_slicedToArray(_useLocalStorageState,2),autoSettleEnabled=_useLocalStorageState2[0],setAutoSettleEnabled=_useLocalStorageState2[1];var _useTokenAccounts=useTokenAccounts(),_useTokenAccounts2=_slicedToArray(_useTokenAccounts,1),tokenAccounts=_useTokenAccounts2[0];var _useWallet=useWallet(),connected=_useWallet.connected,wallet=_useWallet.wallet;var marketInfoList=useMarketInfos();var _useState=useState(false),_useState2=_slicedToArray(_useState,2),currentlyFetchingMarkets=_useState2[0],setCurrentlyFetchingMarkets=_useState2[1];var _useState3=useState(new Map()),_useState4=_slicedToArray(_useState3,2),markets=_useState4[0],setMarkets=_useState4[1];var addToMarketsMap=function addToMarketsMap(marketId,market){setMarkets(function(prev){return new Map(prev).set(marketId,market);});};var connection=useConnection();useInterval(function(){var autoSettle=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!AUTO_SETTLE_DISABLED_OVERRIDE){_context.next=2;break;}return _context.abrupt(\"return\");case 2:if(wallet){_context.next=4;break;}return _context.abrupt(\"return\");case 4:_context.prev=4;console.log('Settling funds...');_context.next=8;return settleAllFunds({connection:connection,wallet:wallet,tokenAccounts:tokenAccounts||[],markets:_toConsumableArray(markets.values())});case 8:_context.next=14;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](4);console.log('Error auto settling funds: '+_context.t0.message);return _context.abrupt(\"return\");case 14:console.log('Finished settling funds.');case 15:case\"end\":return _context.stop();}}},_callee,null,[[4,10]]);}));return function autoSettle(){return _ref2.apply(this,arguments);};}();connected&&(wallet===null||wallet===void 0?void 0:wallet.autoApprove)&&autoSettleEnabled&&autoSettle();},20000);// warms up the market and open orders cache for auto-settlement\nuseInterval(function(){var fetchMarkets=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _iterator,_step,marketInfo,market;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(wallet){_context2.next=2;break;}return _context2.abrupt(\"return\");case 2:setCurrentlyFetchingMarkets(true);_iterator=_createForOfIteratorHelper(marketInfoList);_context2.prev=4;_iterator.s();case 6:if((_step=_iterator.n()).done){_context2.next=24;break;}marketInfo=_step.value;if(!markets.has(marketInfo.address.toString())){_context2.next=10;break;}return _context2.abrupt(\"continue\",22);case 10:_context2.prev=10;_context2.next=13;return Market.load(connection,marketInfo.address,{},marketInfo.programId);case 13:market=_context2.sent;addToMarketsMap(marketInfo.address.toString(),market);_context2.next=17;return sleep(1000);case 17:_context2.next=22;break;case 19:_context2.prev=19;_context2.t0=_context2[\"catch\"](10);console.log('Error fetching market: '+_context2.t0.message);case 22:_context2.next=6;break;case 24:_context2.next=29;break;case 26:_context2.prev=26;_context2.t1=_context2[\"catch\"](4);_iterator.e(_context2.t1);case 29:_context2.prev=29;_iterator.f();return _context2.finish(29);case 32:setCurrentlyFetchingMarkets(false);case 33:case\"end\":return _context2.stop();}}},_callee2,null,[[4,26,29,32],[10,19]]);}));return function fetchMarkets(){return _ref3.apply(this,arguments);};}();connected&&(wallet===null||wallet===void 0?void 0:wallet.autoApprove)&&autoSettleEnabled&&!currentlyFetchingMarkets&&fetchMarkets();},60000);return/*#__PURE__*/_jsx(PreferencesContext.Provider,{value:{autoSettleEnabled:autoSettleEnabled,setAutoSettleEnabled:setAutoSettleEnabled},children:children});}export function usePreferences(){var context=useContext(PreferencesContext);if(!context){throw new Error('Missing preferences context');}return{autoSettleEnabled:context.autoSettleEnabled,setAutoSettleEnabled:context.setAutoSettleEnabled};}","map":{"version":3,"sources":["/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/src/utils/preferences.tsx"],"names":["React","useContext","useState","sleep","useLocalStorageState","useInterval","useConnection","useWallet","useMarketInfos","useTokenAccounts","settleAllFunds","Market","AUTO_SETTLE_DISABLED_OVERRIDE","PreferencesContext","createContext","PreferencesProvider","children","autoSettleEnabled","setAutoSettleEnabled","tokenAccounts","connected","wallet","marketInfoList","currentlyFetchingMarkets","setCurrentlyFetchingMarkets","Map","markets","setMarkets","addToMarketsMap","marketId","market","prev","set","connection","autoSettle","console","log","values","message","autoApprove","fetchMarkets","marketInfo","has","address","toString","load","programId","usePreferences","context","Error"],"mappings":"07BAAA,MAAOA,CAAAA,KAAP,EAAeC,UAAf,CAA2BC,QAA3B,KAA0C,OAA1C,CACA,OAAQC,KAAR,CAAeC,oBAAf,KAA0C,SAA1C,CACA,OAAQC,WAAR,KAA0B,eAA1B,CACA,OAAQC,aAAR,KAA4B,cAA5B,CACA,OAAQC,SAAR,KAAwB,UAAxB,CACA,OACEC,cADF,CAEEC,gBAFF,KAGO,WAHP,CAIA,OAAQC,cAAR,KAA6B,QAA7B,CAEA,OAAQC,MAAR,KAAqB,sBAArB,C,2CAEA,MAAO,IAAMC,CAAAA,6BAA6B,CAAG,IAAtC,CAEP,GAAMC,CAAAA,kBAAkB,cAAGb,KAAK,CAACc,aAAN,CACzB,IADyB,CAA3B,CAIA,MAAO,SAASC,CAAAA,mBAAT,MAA2C,IAAZC,CAAAA,QAAY,MAAZA,QAAY,CAChD,0BAAkDZ,oBAAoB,CACpE,mBADoE,CAEpE,IAFoE,CAAtE,gEAAOa,iBAAP,2BAA0BC,oBAA1B,2BAKA,sBAAwBT,gBAAgB,EAAxC,wDAAOU,aAAP,uBACA,eAA8BZ,SAAS,EAAvC,CAAQa,SAAR,YAAQA,SAAR,CAAmBC,MAAnB,YAAmBA,MAAnB,CACA,GAAMC,CAAAA,cAAc,CAAGd,cAAc,EAArC,CACA,cAAgEN,QAAQ,CAAU,KAAV,CAAxE,wCAAOqB,wBAAP,eAAiCC,2BAAjC,eACA,eAA8BtB,QAAQ,CAAsB,GAAIuB,CAAAA,GAAJ,EAAtB,CAAtC,yCAAOC,OAAP,eAAgBC,UAAhB,eACA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,QAAD,CAAWC,MAAX,CAAsB,CAC5CH,UAAU,CAAC,SAAAI,IAAI,QAAI,IAAIN,CAAAA,GAAJ,CAAQM,IAAR,EAAcC,GAAd,CAAkBH,QAAlB,CAA4BC,MAA5B,CAAJ,EAAL,CAAV,CACD,CAFD,CAGA,GAAMG,CAAAA,UAAU,CAAG3B,aAAa,EAAhC,CAEAD,WAAW,CAAC,UAAM,CAChB,GAAM6B,CAAAA,UAAU,2FAAG,uIAChBtB,6BADgB,oEAIZS,MAJY,iFAQfc,OAAO,CAACC,GAAR,CAAY,mBAAZ,EARe,sBAST1B,CAAAA,cAAc,CAAC,CACnBuB,UAAU,CAAVA,UADmB,CAEnBZ,MAAM,CAANA,MAFmB,CAGnBF,aAAa,CAAEA,aAAa,EAAI,EAHb,CAInBO,OAAO,oBAAMA,OAAO,CAACW,MAAR,EAAN,CAJY,CAAD,CATL,yFAgBfF,OAAO,CAACC,GAAR,CAAY,8BAAgC,YAAEE,OAA9C,EAhBe,yCAmBjBH,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAnBiB,qEAAH,kBAAVF,CAAAA,UAAU,2CAAhB,CAsBEd,SAAS,GACTC,MADS,SACTA,MADS,iBACTA,MAAM,CAAEkB,WADC,CAAT,EAEAtB,iBAFA,EAGAiB,UAAU,EAJZ,CAMD,CA5BU,CA4BR,KA5BQ,CAAX,CA8BA;AACA7B,WAAW,CAAC,UAAM,CAChB,GAAMmC,CAAAA,YAAY,2FAAG,iLACdnB,MADc,mEAKnBG,2BAA2B,CAAC,IAAD,CAA3B,CALmB,qCAMMF,cANN,gGAMRmB,UANQ,iBAObf,OAAO,CAACgB,GAAR,CAAYD,UAAU,CAACE,OAAX,CAAmBC,QAAnB,EAAZ,CAPa,oHAWMjC,CAAAA,MAAM,CAACkC,IAAP,CAAYZ,UAAZ,CAAwBQ,UAAU,CAACE,OAAnC,CAA4C,EAA5C,CAAgDF,UAAU,CAACK,SAA3D,CAXN,SAWThB,MAXS,gBAYfF,eAAe,CAACa,UAAU,CAACE,OAAX,CAAmBC,QAAnB,EAAD,CAAgCd,MAAhC,CAAf,CAZe,wBAaT3B,CAAAA,KAAK,CAAC,IAAD,CAbI,+FAefgC,OAAO,CAACC,GAAR,CAAY,0BAA4B,aAAEE,OAA1C,EAfe,kOAkBnBd,2BAA2B,CAAC,KAAD,CAA3B,CAlBmB,qFAAH,kBAAZgB,CAAAA,YAAY,2CAAlB,CAqBEpB,SAAS,GACTC,MADS,SACTA,MADS,iBACTA,MAAM,CAAEkB,WADC,CAAT,EAEAtB,iBAFA,EAGA,CAACM,wBAHD,EAIAiB,YAAY,EALd,CAOD,CA5BU,CA4BR,KA5BQ,CAAX,CA8BA,mBACE,KAAC,kBAAD,CAAoB,QAApB,EACE,KAAK,CAAE,CACLvB,iBAAiB,CAAjBA,iBADK,CAELC,oBAAoB,CAApBA,oBAFK,CADT,UAMGF,QANH,EADF,CAUD,CAED,MAAO,SAAS+B,CAAAA,cAAT,EAA0B,CAC/B,GAAMC,CAAAA,OAAO,CAAG/C,UAAU,CAACY,kBAAD,CAA1B,CACA,GAAI,CAACmC,OAAL,CAAc,CACZ,KAAM,IAAIC,CAAAA,KAAJ,CAAU,6BAAV,CAAN,CACD,CACD,MAAO,CACLhC,iBAAiB,CAAE+B,OAAO,CAAC/B,iBADtB,CAELC,oBAAoB,CAAE8B,OAAO,CAAC9B,oBAFzB,CAAP,CAID","sourcesContent":["import React, {useContext, useState} from 'react';\nimport {sleep, useLocalStorageState} from './utils';\nimport {useInterval} from './useInterval';\nimport {useConnection} from './connection';\nimport {useWallet} from './wallet';\nimport {\n  useMarketInfos,\n  useTokenAccounts,\n} from './markets';\nimport {settleAllFunds} from './send';\nimport {PreferencesContextValues} from './types';\nimport {Market} from \"@project-serum/serum\";\n\nexport const AUTO_SETTLE_DISABLED_OVERRIDE = true;\n\nconst PreferencesContext = React.createContext<PreferencesContextValues | null>(\n  null,\n);\n\nexport function PreferencesProvider({ children }) {\n  const [autoSettleEnabled, setAutoSettleEnabled] = useLocalStorageState(\n    'autoSettleEnabled',\n    true,\n  );\n\n  const [tokenAccounts] = useTokenAccounts();\n  const { connected, wallet } = useWallet();\n  const marketInfoList = useMarketInfos();\n  const [currentlyFetchingMarkets, setCurrentlyFetchingMarkets] = useState<boolean>(false);\n  const [markets, setMarkets] = useState<Map<string, Market>>(new Map())\n  const addToMarketsMap = (marketId, market) => {\n    setMarkets(prev => new Map(prev).set(marketId, market));\n  }\n  const connection = useConnection();\n\n  useInterval(() => {\n    const autoSettle = async () => {\n\t\t\tif (AUTO_SETTLE_DISABLED_OVERRIDE) {\n\t\t\t\treturn;\n\t\t\t}\n      if (!wallet) {\n        return;\n      }\n      try {\n        console.log('Settling funds...');\n        await settleAllFunds({\n          connection,\n          wallet,\n          tokenAccounts: tokenAccounts || [],\n          markets: [...markets.values()],\n        });\n      } catch (e) {\n        console.log('Error auto settling funds: ' + e.message);\n        return;\n      }\n      console.log('Finished settling funds.');\n    };\n    (\n      connected &&\n      wallet?.autoApprove &&\n      autoSettleEnabled &&\n      autoSettle()\n    );\n  }, 20000);\n\n  // warms up the market and open orders cache for auto-settlement\n  useInterval(() => {\n    const fetchMarkets = async () => {\n      if (!wallet) {\n        // only need these markets for auto-settlement, so don't fetch unless we are connected.\n        return;\n      }\n      setCurrentlyFetchingMarkets(true);\n      for (const marketInfo of marketInfoList) {\n        if (markets.has(marketInfo.address.toString())) {\n          continue;\n        }\n        try {\n          const market = await Market.load(connection, marketInfo.address, {}, marketInfo.programId)\n          addToMarketsMap(marketInfo.address.toString(), market);\n          await sleep(1000);\n        } catch (e) {\n          console.log('Error fetching market: ' + e.message);\n        }\n      }\n      setCurrentlyFetchingMarkets(false);\n    }\n    (\n      connected &&\n      wallet?.autoApprove &&\n      autoSettleEnabled &&\n      !currentlyFetchingMarkets &&\n      fetchMarkets()\n    );\n  }, 60000)\n\n  return (\n    <PreferencesContext.Provider\n      value={{\n        autoSettleEnabled,\n        setAutoSettleEnabled,\n      }}\n    >\n      {children}\n    </PreferencesContext.Provider>\n  );\n}\n\nexport function usePreferences() {\n  const context = useContext(PreferencesContext);\n  if (!context) {\n    throw new Error('Missing preferences context');\n  }\n  return {\n    autoSettleEnabled: context.autoSettleEnabled,\n    setAutoSettleEnabled: context.setAutoSettleEnabled,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}