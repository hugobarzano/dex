{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport EventEmitter from \"events\";\nimport { TransportRaceCondition, TransportError, StatusCodes, getAltStatusMessage, TransportStatusError } from \"@ledgerhq/errors\";\nexport { TransportError, TransportStatusError, StatusCodes, getAltStatusMessage };\n/**\n */\n\n/**\n * Transport defines the generic interface to share between node/u2f impl\n * A **Descriptor** is a parametric type that is up to be determined for the implementation.\n * it can be for instance an ID, an file path, a URL,...\n */\n\nvar Transport = /*#__PURE__*/function () {\n  function Transport() {\n    var _this = this;\n\n    _classCallCheck(this, Transport);\n\n    this.exchangeTimeout = 30000;\n    this.unresponsiveTimeout = 15000;\n    this.deviceModel = null;\n    this._events = new EventEmitter();\n\n    this.send = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cla, ins, p1, p2) {\n        var data,\n            statusList,\n            response,\n            sw,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                data = _args.length > 4 && _args[4] !== undefined ? _args[4] : Buffer.alloc(0);\n                statusList = _args.length > 5 && _args[5] !== undefined ? _args[5] : [StatusCodes.OK];\n\n                if (!(data.length >= 256)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new TransportError(\"data.length exceed 256 bytes limit. Got: \" + data.length, \"DataLengthTooBig\");\n\n              case 4:\n                _context.next = 6;\n                return _this.exchange(Buffer.concat([Buffer.from([cla, ins, p1, p2]), Buffer.from([data.length]), data]));\n\n              case 6:\n                response = _context.sent;\n                sw = response.readUInt16BE(response.length - 2);\n\n                if (statusList.some(function (s) {\n                  return s === sw;\n                })) {\n                  _context.next = 10;\n                  break;\n                }\n\n                throw new TransportStatusError(sw);\n\n              case 10:\n                return _context.abrupt(\"return\", response);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2, _x3, _x4) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    this.exchangeBusyPromise = void 0;\n\n    this.exchangeAtomicImpl = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(f) {\n        var resolveBusy, busyPromise, unresponsiveReached, timeout, res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!_this.exchangeBusyPromise) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new TransportRaceCondition(\"An action was already pending on the Ledger device. Please deny or reconnect.\");\n\n              case 2:\n                busyPromise = new Promise(function (r) {\n                  resolveBusy = r;\n                });\n                _this.exchangeBusyPromise = busyPromise;\n                unresponsiveReached = false;\n                timeout = setTimeout(function () {\n                  unresponsiveReached = true;\n\n                  _this.emit(\"unresponsive\");\n                }, _this.unresponsiveTimeout);\n                _context2.prev = 6;\n                _context2.next = 9;\n                return f();\n\n              case 9:\n                res = _context2.sent;\n\n                if (unresponsiveReached) {\n                  _this.emit(\"responsive\");\n                }\n\n                return _context2.abrupt(\"return\", res);\n\n              case 12:\n                _context2.prev = 12;\n                clearTimeout(timeout);\n                if (resolveBusy) resolveBusy();\n                _this.exchangeBusyPromise = null;\n                return _context2.finish(12);\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[6,, 12, 17]]);\n      }));\n\n      return function (_x5) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    this._appAPIlock = null;\n  }\n  /**\n   * low level api to communicate with the device\n   * This method is for implementations to implement but should not be directly called.\n   * Instead, the recommanded way is to use send() method\n   * @param apdu the data to send\n   * @return a Promise of response data\n   */\n\n\n  _createClass(Transport, [{\n    key: \"exchange\",\n    value: function exchange(_apdu) {\n      throw new Error(\"exchange not implemented\");\n    }\n    /**\n     * set the \"scramble key\" for the next exchanges with the device.\n     * Each App can have a different scramble key and they internally will set it at instanciation.\n     * @param key the scramble key\n     */\n\n  }, {\n    key: \"setScrambleKey\",\n    value: function setScrambleKey(_key) {}\n    /**\n     * close the exchange with the device.\n     * @return a Promise that ends when the transport is closed.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      return Promise.resolve();\n    }\n    /**\n     * Listen to an event on an instance of transport.\n     * Transport implementation can have specific events. Here is the common events:\n     * * `\"disconnect\"` : triggered if Transport is disconnected\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(eventName, cb) {\n      this._events.on(eventName, cb);\n    }\n    /**\n     * Stop listening to an event on an instance of transport.\n     */\n\n  }, {\n    key: \"off\",\n    value: function off(eventName, cb) {\n      this._events.removeListener(eventName, cb);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(event) {\n      var _this$_events;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      (_this$_events = this._events).emit.apply(_this$_events, [event].concat(args));\n    }\n    /**\n     * Enable or not logs of the binary exchange\n     */\n\n  }, {\n    key: \"setDebugMode\",\n    value: function setDebugMode() {\n      console.warn(\"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\");\n    }\n    /**\n     * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n     */\n\n  }, {\n    key: \"setExchangeTimeout\",\n    value: function setExchangeTimeout(exchangeTimeout) {\n      this.exchangeTimeout = exchangeTimeout;\n    }\n    /**\n     * Define the delay before emitting \"unresponsive\" on an exchange that does not respond\n     */\n\n  }, {\n    key: \"setExchangeUnresponsiveTimeout\",\n    value: function setExchangeUnresponsiveTimeout(unresponsiveTimeout) {\n      this.unresponsiveTimeout = unresponsiveTimeout;\n    }\n    /**\n     * wrapper on top of exchange to simplify work of the implementation.\n     * @param cla\n     * @param ins\n     * @param p1\n     * @param p2\n     * @param data\n     * @param statusList is a list of accepted status code (shorts). [0x9000] by default\n     * @return a Promise of response buffer\n     */\n\n    /**\n     * create() allows to open the first descriptor available or\n     * throw if there is none or if timeout is reached.\n     * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n     * @example\n    TransportFoo.create().then(transport => ...)\n     */\n\n  }, {\n    key: \"decorateAppAPIMethods\",\n    value: function decorateAppAPIMethods(self, methods, scrambleKey) {\n      var _iterator = _createForOfIteratorHelper(methods),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var methodName = _step.value;\n          self[methodName] = this.decorateAppAPIMethod(methodName, self[methodName], self, scrambleKey);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"decorateAppAPIMethod\",\n    value: function decorateAppAPIMethod(methodName, f, ctx, scrambleKey) {\n      var _this2 = this;\n\n      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _appAPIlock,\n            _len2,\n            args,\n            _key3,\n            _args3 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _appAPIlock = _this2._appAPIlock;\n\n                if (!_appAPIlock) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", Promise.reject(new TransportError(\"Ledger Device is busy (lock \" + _appAPIlock + \")\", \"TransportLocked\")));\n\n              case 3:\n                _context3.prev = 3;\n                _this2._appAPIlock = methodName;\n\n                _this2.setScrambleKey(scrambleKey);\n\n                for (_len2 = _args3.length, args = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n                  args[_key3] = _args3[_key3];\n                }\n\n                _context3.next = 9;\n                return f.apply(ctx, args);\n\n              case 9:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 10:\n                _context3.prev = 10;\n                _this2._appAPIlock = null;\n                return _context3.finish(10);\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[3,, 10, 13]]);\n      }));\n    }\n  }], [{\n    key: \"create\",\n    value: function create() {\n      var _this3 = this;\n\n      var openTimeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3000;\n      var listenTimeout = arguments.length > 1 ? arguments[1] : undefined;\n      return new Promise(function (resolve, reject) {\n        var found = false;\n\n        var sub = _this3.listen({\n          next: function next(e) {\n            found = true;\n            if (sub) sub.unsubscribe();\n            if (listenTimeoutId) clearTimeout(listenTimeoutId);\n\n            _this3.open(e.descriptor, openTimeout).then(resolve, reject);\n          },\n          error: function error(e) {\n            if (listenTimeoutId) clearTimeout(listenTimeoutId);\n            reject(e);\n          },\n          complete: function complete() {\n            if (listenTimeoutId) clearTimeout(listenTimeoutId);\n\n            if (!found) {\n              reject(new TransportError(_this3.ErrorMessage_NoDeviceFound, \"NoDeviceFound\"));\n            }\n          }\n        });\n\n        var listenTimeoutId = listenTimeout ? setTimeout(function () {\n          sub.unsubscribe();\n          reject(new TransportError(_this3.ErrorMessage_ListenTimeout, \"ListenTimeout\"));\n        }, listenTimeout) : null;\n      });\n    }\n  }]);\n\n  return Transport;\n}();\n\nexport { Transport as default };\nTransport.isSupported = void 0;\nTransport.list = void 0;\nTransport.listen = void 0;\nTransport.open = void 0;\nTransport.ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\nTransport.ErrorMessage_NoDeviceFound = \"No Ledger device found\";","map":{"version":3,"sources":["../src/Transport.js"],"names":["Transport","isSupported","list","listen","open","exchange","setScrambleKey","close","Promise","on","off","emit","setDebugMode","console","setExchangeTimeout","setExchangeUnresponsiveTimeout","data","Buffer","statusList","StatusCodes","response","sw","s","openTimeout","found","sub","next","e","clearTimeout","error","reject","complete","listenTimeoutId","listenTimeout","setTimeout","busyPromise","r","resolveBusy","unresponsiveReached","timeout","res","f","decorateAppAPIMethods","self","decorateAppAPIMethod","_appAPIlock","ErrorMessage_ListenTimeout","ErrorMessage_NoDeviceFound"],"mappings":";;;;;AAEA,OAAA,YAAA,MAAA,QAAA;AAEA,SAAA,sBAAA,EAAA,cAAA,EAAA,WAAA,EAAA,mBAAA,EAAA,oBAAA,QAAA,kBAAA;AAQA,SAAA,cAAA,EAAA,oBAAA,EAAA,WAAA,EAAA,mBAAA;AAOA;AACA;;AA2BA;AACA;AACA;AACA;AACA;;IACe,S;AAA4B,uBAAA;AAAA;;AAAA;;AAAA,SAAA,eAAA,GAAA,KAAA;AAAA,SAAA,mBAAA,GAAA,KAAA;AAAA,SAAA,WAAA,GAAA,IAAA;AAAA,SAAA,OAAA,GAiF/B,IAjF+B,YAiF/B,EAjF+B;;AAAA,SAAA,IAAA;AAAA,0EAwIlC,iBAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKLgB,gBAAAA,IALK,2DAKUC,MAAM,CAANA,KAAAA,CALV,CAKUA,CALV;AAMLC,gBAAAA,UANK,2DAMuB,CAACC,WAAW,CANnC,EAMuB,CANvB;;AAAA,sBAQDH,IAAI,CAAJA,MAAAA,IAAJ,GARK;AAAA;AAAA;AAAA;;AAAA,sBASG,IAAA,cAAA,CACJ,8CAA8CA,IAAI,CAD9C,MAAA,EAAN,kBAAM,CATH;;AAAA;AAAA;AAAA,uBAckB,KAAA,CAAA,QAAA,CACrBC,MAAM,CAANA,MAAAA,CAAc,CACZA,MAAM,CAANA,IAAAA,CAAY,CAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EADA,EACA,CAAZA,CADY,EAEZA,MAAM,CAANA,IAAAA,CAAY,CAACD,IAAI,CAFL,MAEA,CAAZC,CAFY,EADhB,IACgB,CAAdA,CADqB,CAdlB;;AAAA;AAcCG,gBAAAA,QAdD;AAqBCC,gBAAAA,EArBD,GAqBMD,QAAQ,CAARA,YAAAA,CAAsBA,QAAQ,CAARA,MAAAA,GAAjC,CAAWA,CArBN;;AAAA,oBAsBAF,UAAU,CAAVA,IAAAA,CAAiBI,UAAAA,CAAD;AAAA,yBAAOA,CAAC,KAA7B,EAAqB;AAAA,iBAAhBJ,CAtBA;AAAA;AAAA;AAAA;;AAAA,sBAuBG,IAAA,oBAAA,CAAN,EAAM,CAvBH;;AAAA;AAAA,iDAyBL,QAzBK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAxIkC;;AAAA;AAAA;AAAA;AAAA;;AAAA,SAAA,mBAAA,GAAA,KAAA,CAAA;;AAAA,SAAA,kBAAA;AAAA,2EAyNpB,kBAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACf,KAAA,CAAJ,mBADmB;AAAA;AAAA;AAAA;;AAAA,sBAEX,IAAA,sBAAA,CAAN,+EAAM,CAFW;;AAAA;AAObiB,gBAAAA,WAPa,GAOC,IAAA,OAAA,CAAaC,UAAAA,CAAD,EAAO;AACrCC,kBAAAA,WAAW,GAAXA,CAAAA;AADF,iBAAoB,CAPD;AAUnB,gBAAA,KAAA,CAAA,mBAAA,GAAA,WAAA;AACIC,gBAAAA,mBAXe,GAWnB,KAXmB;AAYbC,gBAAAA,OAZa,GAYHL,UAAU,CAAC,YAAM;AAC/BI,kBAAAA,mBAAmB,GAAnBA,IAAAA;;AACA,kBAAA,KAAA,CAAA,IAAA,CAAA,cAAA;AAFwB,iBAAA,EAGvB,KAAA,CAHH,mBAA0B,CAZP;AAAA;AAAA;AAAA,uBAiBCG,CAAlB,EAjBiB;;AAAA;AAiBXD,gBAAAA,GAjBW;;AAkBjB,oBAAA,mBAAA,EAAyB;AACvB,kBAAA,KAAA,CAAA,IAAA,CAAA,YAAA;AACD;;AApBgB,kDAqBjB,GArBiB;;AAAA;AAAA;AAuBjBZ,gBAAAA,YAAY,CAAZA,OAAY,CAAZA;AACA,oBAAA,WAAA,EAAiBS,WAAW;AAC5B,gBAAA,KAAA,CAAA,mBAAA,GAAA,IAAA;AAzBiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAzNoB;;AAAA;AAAA;AAAA;AAAA;;AAAA,SAAA,WAAA,GAAA,IAAA;AAAA;AAuDzC;AACF;AACA;AACA;AACA;AACA;AACA;;;;;WACEhC,kBAAQ,KAARA,EAAyC;AACvC,YAAM,IAAA,KAAA,CAAN,0BAAM,CAAN;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACEC,wBAAc,IAAdA,EAA6B,CAAE;AAE/B;AACF;AACA;AACA;;;;WACEC,iBAAuB;AACrB,aAAOC,OAAO,CAAd,OAAOA,EAAP;AACD;AAID;AACF;AACA;AACA;AACA;;;;WACEC,YAAE,SAAFA,EAAE,EAAFA,EAAoC;AAClC,WAAA,OAAA,CAAA,EAAA,CAAA,SAAA,EAAA,EAAA;AACD;AAED;AACF;AACA;;;;WACEC,aAAG,SAAHA,EAAG,EAAHA,EAAqC;AACnC,WAAA,OAAA,CAAA,cAAA,CAAA,SAAA,EAAA,EAAA;AACD;;;WAEDC,cAAI,KAAJA,EAAgC;AAAA;;AAAA,wCAA5B,IAA4B;AAA5B,QAAA,IAA4B;AAAA;;AAC9B,4BAAA,OAAA,EAAA,IAAA,uBAAA,KAAA,SAAA,IAAA;AACD;AAED;AACF;AACA;;;;WACEC,wBAAe;AACbC,MAAAA,OAAO,CAAPA,IAAAA,CAAAA,8FAAAA;AAGD;AAED;AACF;AACA;;;;WACEC,4BAAkB,eAAlBA,EAA4C;AAC1C,WAAA,eAAA,GAAA,eAAA;AACD;AAED;AACF;AACA;;;;WACEC,wCAA8B,mBAA9BA,EAA4D;AAC1D,WAAA,mBAAA,GAAA,mBAAA;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA6BE;AACF;AACA;AACA;AACA;AACA;AACA;;;;WA4EE2B,+BAAqB,IAArBA,EAAqB,OAArBA,EAAqB,WAArBA,EAIE;AAAA,iDACA,OADA;AAAA;;AAAA;AACA,4DAAgC;AAAA,cAAhC,UAAgC;AAC9BC,UAAAA,IAAI,CAAJA,UAAI,CAAJA,GAAmB,KAAA,oBAAA,CAAA,UAAA,EAEjBA,IAAI,CAFa,UAEb,CAFa,EAAA,IAAA,EAAnBA,WAAmB,CAAnBA;AAMD;AARD;AAAA;AAAA;AAAA;AAAA;AASD;;;WAGDC,8BAAoB,UAApBA,EAAoB,CAApBA,EAAoB,GAApBA,EAAoB,WAApBA,EAK8B;AAAA;;AAC5B,mFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACGC,gBAAAA,WADH,GACL,MADK,CACGA,WADH;;AAAA,qBAEL,WAFK;AAAA;AAAA;AAAA;;AAAA,kDAGIrC,OAAO,CAAPA,MAAAA,CACL,IAAA,cAAA,CACE,iCAAA,WAAA,GADF,GAAA,EADF,iBACE,CADKA,CAHJ;;AAAA;AAAA;AAWH,gBAAA,MAAA,CAAA,WAAA,GAAA,UAAA;;AACA,gBAAA,MAAA,CAAA,cAAA,CAAA,WAAA;;AAZG,4CAAA,IAAA;AAAA,kBAAA,IAAA;AAAA;;AAAA;AAAA,uBAaUiC,CAAC,CAADA,KAAAA,CAAAA,GAAAA,EAAb,IAAaA,CAbV;;AAAA;AAAA;;AAAA;AAAA;AAeH,gBAAA,MAAA,CAAA,WAAA,GAAA,IAAA;AAfG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AAkBD;;;WAnHD,kBAGkC;AAAA;;AAAA,UAFhClB,WAEgC,uEAHlC,IAGkC;AAAA,UAHlC,aAGkC;AAChC,aAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AACtC,YAAIC,KAAK,GAAT,KAAA;;AACA,YAAMC,GAAG,GAAG,MAAA,CAAA,MAAA,CAAY;AACtBC,UAAAA,IAAI,EAAGC,cAAAA,CAAD,EAAO;AACXH,YAAAA,KAAK,GAALA,IAAAA;AACA,gBAAA,GAAA,EAASC,GAAG,CAAHA,WAAAA;AACT,gBAAA,eAAA,EAAqBG,YAAY,CAAZA,eAAY,CAAZA;;AACrB,YAAA,MAAA,CAAA,IAAA,CAAUD,CAAC,CAAX,UAAA,EAAA,WAAA,EAAA,IAAA,CAAA,OAAA,EAAA,MAAA;AALoB,WAAA;AAOtBE,UAAAA,KAAK,EAAGF,eAAAA,CAAD,EAAO;AACZ,gBAAA,eAAA,EAAqBC,YAAY,CAAZA,eAAY,CAAZA;AACrBE,YAAAA,MAAM,CAANA,CAAM,CAANA;AAToB,WAAA;AAWtBC,UAAAA,QAAQ,EAAE,oBAAM;AACd,gBAAA,eAAA,EAAqBH,YAAY,CAAZA,eAAY,CAAZA;;AACrB,gBAAI,CAAJ,KAAA,EAAY;AACVE,cAAAA,MAAM,CACJ,IAAA,cAAA,CACE,MAAA,CADF,0BAAA,EADFA,eACE,CADI,CAANA;AAMD;AACF;AArBqB,SAAZ,CAAZ;;AAuBA,YAAME,eAAe,GAAGC,aAAa,GACjCC,UAAU,CAAC,YAAM;AACfT,UAAAA,GAAG,CAAHA,WAAAA;AACAK,UAAAA,MAAM,CACJ,IAAA,cAAA,CACE,MAAA,CADF,0BAAA,EADFA,eACE,CADI,CAANA;AAFQ,SAAA,EADuB,aACvB,CADuB,GAArC,IAAA;AAzBF,OAAO,CAAP;AAqCD;;;;;;SApNY,S;AAAM9B,S,CAQXC,WARWD,G,MAAAA;AAAAA,S,CAgBXE,IAhBWF,G,MAAAA;AAAAA,S,CAsCXG,MAtCWH,G,MAAAA;AAAAA,S,CAkDXI,IAlDWJ,G,MAAAA;AAAAA,S,CAgSZ8C,0BAhSY9C,GAgSiB,kCAhSjBA;AAAAA,S,CAiSZ+C,0BAjSY/C,GAiSiB,wBAjSjBA","sourcesContent":["//@flow\n\nimport EventEmitter from \"events\";\nimport type { DeviceModel } from \"@ledgerhq/devices\";\nimport {\n  TransportRaceCondition,\n  TransportError,\n  StatusCodes,\n  getAltStatusMessage,\n  TransportStatusError,\n} from \"@ledgerhq/errors\";\n\nexport {\n  TransportError,\n  TransportStatusError,\n  StatusCodes,\n  getAltStatusMessage,\n};\n\n/**\n */\nexport type Subscription = { unsubscribe: () => void };\n\n/**\n */\nexport type Device = Object;\n\n/**\n * type: add or remove event\n * descriptor: a parameter that can be passed to open(descriptor)\n * deviceModel: device info on the model (is it a nano s, nano x, ...)\n * device: transport specific device info\n */\nexport type DescriptorEvent<Descriptor> = {\n  type: \"add\" | \"remove\",\n  descriptor: Descriptor,\n  deviceModel?: ?DeviceModel,\n  device?: Device,\n};\n/**\n */\nexport type Observer<Ev> = $ReadOnly<{\n  next: (event: Ev) => mixed,\n  error: (e: any) => mixed,\n  complete: () => mixed,\n}>;\n\n/**\n * Transport defines the generic interface to share between node/u2f impl\n * A **Descriptor** is a parametric type that is up to be determined for the implementation.\n * it can be for instance an ID, an file path, a URL,...\n */\nexport default class Transport<Descriptor> {\n  exchangeTimeout: number = 30000;\n  unresponsiveTimeout: number = 15000;\n  deviceModel: ?DeviceModel = null;\n\n  /**\n   * Statically check if a transport is supported on the user's platform/browser.\n   */\n  static +isSupported: () => Promise<boolean>;\n\n  /**\n   * List once all available descriptors. For a better granularity, checkout `listen()`.\n   * @return a promise of descriptors\n   * @example\n   * TransportFoo.list().then(descriptors => ...)\n   */\n  static +list: () => Promise<Array<Descriptor>>;\n\n  /**\n   * Listen all device events for a given Transport. The method takes an Obverver of DescriptorEvent and returns a Subscription (according to Observable paradigm https://github.com/tc39/proposal-observable )\n   * a DescriptorEvent is a `{ descriptor, type }` object. type can be `\"add\"` or `\"remove\"` and descriptor is a value you can pass to `open(descriptor)`.\n   * each listen() call will first emit all potential device already connected and then will emit events can come over times,\n   * for instance if you plug a USB device after listen() or a bluetooth device become discoverable.\n   * @param observer is an object with a next, error and complete function (compatible with observer pattern)\n   * @return a Subscription object on which you can `.unsubscribe()` to stop listening descriptors.\n   * @example\nconst sub = TransportFoo.listen({\n  next: e => {\n    if (e.type===\"add\") {\n      sub.unsubscribe();\n      const transport = await TransportFoo.open(e.descriptor);\n      ...\n    }\n  },\n  error: error => {},\n  complete: () => {}\n})\n   */\n  static +listen: (\n    observer: Observer<DescriptorEvent<Descriptor>>\n  ) => Subscription;\n\n  /**\n   * attempt to create a Transport instance with potentially a descriptor.\n   * @param descriptor: the descriptor to open the transport with.\n   * @param timeout: an optional timeout\n   * @return a Promise of Transport instance\n   * @example\nTransportFoo.open(descriptor).then(transport => ...)\n   */\n  static +open: (\n    descriptor: Descriptor,\n    timeout?: number\n  ) => Promise<Transport<Descriptor>>;\n\n  /**\n   * low level api to communicate with the device\n   * This method is for implementations to implement but should not be directly called.\n   * Instead, the recommanded way is to use send() method\n   * @param apdu the data to send\n   * @return a Promise of response data\n   */\n  exchange(_apdu: Buffer): Promise<Buffer> {\n    throw new Error(\"exchange not implemented\");\n  }\n\n  /**\n   * set the \"scramble key\" for the next exchanges with the device.\n   * Each App can have a different scramble key and they internally will set it at instanciation.\n   * @param key the scramble key\n   */\n  setScrambleKey(_key: string) {}\n\n  /**\n   * close the exchange with the device.\n   * @return a Promise that ends when the transport is closed.\n   */\n  close(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  _events = new EventEmitter();\n\n  /**\n   * Listen to an event on an instance of transport.\n   * Transport implementation can have specific events. Here is the common events:\n   * * `\"disconnect\"` : triggered if Transport is disconnected\n   */\n  on(eventName: string, cb: Function) {\n    this._events.on(eventName, cb);\n  }\n\n  /**\n   * Stop listening to an event on an instance of transport.\n   */\n  off(eventName: string, cb: Function) {\n    this._events.removeListener(eventName, cb);\n  }\n\n  emit(event: string, ...args: *) {\n    this._events.emit(event, ...args);\n  }\n\n  /**\n   * Enable or not logs of the binary exchange\n   */\n  setDebugMode() {\n    console.warn(\n      \"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\"\n    );\n  }\n\n  /**\n   * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n   */\n  setExchangeTimeout(exchangeTimeout: number) {\n    this.exchangeTimeout = exchangeTimeout;\n  }\n\n  /**\n   * Define the delay before emitting \"unresponsive\" on an exchange that does not respond\n   */\n  setExchangeUnresponsiveTimeout(unresponsiveTimeout: number) {\n    this.unresponsiveTimeout = unresponsiveTimeout;\n  }\n\n  /**\n   * wrapper on top of exchange to simplify work of the implementation.\n   * @param cla\n   * @param ins\n   * @param p1\n   * @param p2\n   * @param data\n   * @param statusList is a list of accepted status code (shorts). [0x9000] by default\n   * @return a Promise of response buffer\n   */\n  send = async (\n    cla: number,\n    ins: number,\n    p1: number,\n    p2: number,\n    data: Buffer = Buffer.alloc(0),\n    statusList: Array<number> = [StatusCodes.OK]\n  ): Promise<Buffer> => {\n    if (data.length >= 256) {\n      throw new TransportError(\n        \"data.length exceed 256 bytes limit. Got: \" + data.length,\n        \"DataLengthTooBig\"\n      );\n    }\n    const response = await this.exchange(\n      Buffer.concat([\n        Buffer.from([cla, ins, p1, p2]),\n        Buffer.from([data.length]),\n        data,\n      ])\n    );\n    const sw = response.readUInt16BE(response.length - 2);\n    if (!statusList.some((s) => s === sw)) {\n      throw new TransportStatusError(sw);\n    }\n    return response;\n  };\n\n  /**\n   * create() allows to open the first descriptor available or\n   * throw if there is none or if timeout is reached.\n   * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n   * @example\nTransportFoo.create().then(transport => ...)\n   */\n  static create(\n    openTimeout?: number = 3000,\n    listenTimeout?: number\n  ): Promise<Transport<Descriptor>> {\n    return new Promise((resolve, reject) => {\n      let found = false;\n      const sub = this.listen({\n        next: (e) => {\n          found = true;\n          if (sub) sub.unsubscribe();\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          this.open(e.descriptor, openTimeout).then(resolve, reject);\n        },\n        error: (e) => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          reject(e);\n        },\n        complete: () => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          if (!found) {\n            reject(\n              new TransportError(\n                this.ErrorMessage_NoDeviceFound,\n                \"NoDeviceFound\"\n              )\n            );\n          }\n        },\n      });\n      const listenTimeoutId = listenTimeout\n        ? setTimeout(() => {\n            sub.unsubscribe();\n            reject(\n              new TransportError(\n                this.ErrorMessage_ListenTimeout,\n                \"ListenTimeout\"\n              )\n            );\n          }, listenTimeout)\n        : null;\n    });\n  }\n\n  exchangeBusyPromise: ?Promise<void>;\n\n  // $FlowFixMe\n  exchangeAtomicImpl = async (f) => {\n    if (this.exchangeBusyPromise) {\n      throw new TransportRaceCondition(\n        \"An action was already pending on the Ledger device. Please deny or reconnect.\"\n      );\n    }\n    let resolveBusy;\n    const busyPromise = new Promise((r) => {\n      resolveBusy = r;\n    });\n    this.exchangeBusyPromise = busyPromise;\n    let unresponsiveReached = false;\n    const timeout = setTimeout(() => {\n      unresponsiveReached = true;\n      this.emit(\"unresponsive\");\n    }, this.unresponsiveTimeout);\n    try {\n      const res = await f();\n      if (unresponsiveReached) {\n        this.emit(\"responsive\");\n      }\n      return res;\n    } finally {\n      clearTimeout(timeout);\n      if (resolveBusy) resolveBusy();\n      this.exchangeBusyPromise = null;\n    }\n  };\n\n  decorateAppAPIMethods(\n    self: Object,\n    methods: Array<string>,\n    scrambleKey: string\n  ) {\n    for (let methodName of methods) {\n      self[methodName] = this.decorateAppAPIMethod(\n        methodName,\n        self[methodName],\n        self,\n        scrambleKey\n      );\n    }\n  }\n\n  _appAPIlock = null;\n  decorateAppAPIMethod<R, A: any[]>(\n    methodName: string,\n    f: (...args: A) => Promise<R>,\n    ctx: *,\n    scrambleKey: string\n  ): (...args: A) => Promise<R> {\n    return async (...args) => {\n      const { _appAPIlock } = this;\n      if (_appAPIlock) {\n        return Promise.reject(\n          new TransportError(\n            \"Ledger Device is busy (lock \" + _appAPIlock + \")\",\n            \"TransportLocked\"\n          )\n        );\n      }\n      try {\n        this._appAPIlock = methodName;\n        this.setScrambleKey(scrambleKey);\n        return await f.apply(ctx, args);\n      } finally {\n        this._appAPIlock = null;\n      }\n    };\n  }\n\n  static ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\n  static ErrorMessage_NoDeviceFound = \"No Ledger device found\";\n}\n"]},"metadata":{},"sourceType":"module"}