{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _slicedToArray from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _toConsumableArray from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{notify}from'./notifications';import{getDecimalCount,sleep}from'./utils';import{getSelectedTokenAccountForMint}from'./markets';import{Account,PublicKey,SystemProgram,Transaction}from'@solana/web3.js';import{Token,ASSOCIATED_TOKEN_PROGRAM_ID,TOKEN_PROGRAM_ID}from'@solana/spl-token';import BN from'bn.js';import{DexInstructions,Market,OpenOrders,parseInstructionErrorResponse,TOKEN_MINTS,TokenInstructions}from'@project-serum/serum';import{Buffer}from'buffer';import assert from'assert';import{struct}from'superstruct';export function createTokenAccountTransaction(_x){return _createTokenAccountTransaction.apply(this,arguments);}function _createTokenAccountTransaction(){_createTokenAccountTransaction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref){var connection,wallet,mintPublicKey,ata,transaction;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:connection=_ref.connection,wallet=_ref.wallet,mintPublicKey=_ref.mintPublicKey;_context.next=3;return Token.getAssociatedTokenAddress(ASSOCIATED_TOKEN_PROGRAM_ID,TOKEN_PROGRAM_ID,mintPublicKey,wallet.publicKey);case 3:ata=_context.sent;transaction=new Transaction();transaction.add(Token.createAssociatedTokenAccountInstruction(ASSOCIATED_TOKEN_PROGRAM_ID,TOKEN_PROGRAM_ID,mintPublicKey,ata,wallet.publicKey,wallet.publicKey));return _context.abrupt(\"return\",{transaction:transaction,newAccountPubkey:ata});case 7:case\"end\":return _context.stop();}}},_callee);}));return _createTokenAccountTransaction.apply(this,arguments);}export function settleFunds(_x2){return _settleFunds.apply(this,arguments);}function _settleFunds(){_settleFunds=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2){var market,openOrders,connection,wallet,baseCurrencyAccount,quoteCurrencyAccount,_ref2$sendNotificatio,sendNotification,_ref2$usdcRef,usdcRef,_ref2$usdtRef,usdtRef,createAccountTransaction,baseCurrencyAccountPubkey,quoteCurrencyAccountPubkey,result,_result,referrerQuoteWallet,usdt,usdc,_yield$market$makeSet,settleFundsTransaction,settleFundsSigners,transaction;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:market=_ref2.market,openOrders=_ref2.openOrders,connection=_ref2.connection,wallet=_ref2.wallet,baseCurrencyAccount=_ref2.baseCurrencyAccount,quoteCurrencyAccount=_ref2.quoteCurrencyAccount,_ref2$sendNotificatio=_ref2.sendNotification,sendNotification=_ref2$sendNotificatio===void 0?true:_ref2$sendNotificatio,_ref2$usdcRef=_ref2.usdcRef,usdcRef=_ref2$usdcRef===void 0?undefined:_ref2$usdcRef,_ref2$usdtRef=_ref2.usdtRef,usdtRef=_ref2$usdtRef===void 0?undefined:_ref2$usdtRef;if(!(!market||!wallet||!connection||!openOrders||!baseCurrencyAccount&&!quoteCurrencyAccount)){_context2.next=4;break;}if(sendNotification){notify({message:'Not connected'});}return _context2.abrupt(\"return\");case 4:baseCurrencyAccountPubkey=baseCurrencyAccount===null||baseCurrencyAccount===void 0?void 0:baseCurrencyAccount.pubkey;quoteCurrencyAccountPubkey=quoteCurrencyAccount===null||quoteCurrencyAccount===void 0?void 0:quoteCurrencyAccount.pubkey;if(baseCurrencyAccountPubkey){_context2.next=12;break;}_context2.next=9;return createTokenAccountTransaction({connection:connection,wallet:wallet,mintPublicKey:market.baseMintAddress});case 9:result=_context2.sent;baseCurrencyAccountPubkey=result===null||result===void 0?void 0:result.newAccountPubkey;createAccountTransaction=result===null||result===void 0?void 0:result.transaction;case 12:if(quoteCurrencyAccountPubkey){_context2.next=18;break;}_context2.next=15;return createTokenAccountTransaction({connection:connection,wallet:wallet,mintPublicKey:market.quoteMintAddress});case 15:_result=_context2.sent;quoteCurrencyAccountPubkey=_result===null||_result===void 0?void 0:_result.newAccountPubkey;createAccountTransaction=_result===null||_result===void 0?void 0:_result.transaction;case 18:referrerQuoteWallet=null;if(market.supportsReferralFees){usdt=TOKEN_MINTS.find(function(_ref11){var name=_ref11.name;return name==='USDT';});usdc=TOKEN_MINTS.find(function(_ref12){var name=_ref12.name;return name==='USDC';});if(usdtRef&&usdt&&market.quoteMintAddress.equals(usdt.address)){referrerQuoteWallet=usdtRef;}else if(usdcRef&&usdc&&market.quoteMintAddress.equals(usdc.address)){referrerQuoteWallet=usdcRef;}}_context2.next=22;return market.makeSettleFundsTransaction(connection,openOrders,baseCurrencyAccountPubkey,quoteCurrencyAccountPubkey,referrerQuoteWallet);case 22:_yield$market$makeSet=_context2.sent;settleFundsTransaction=_yield$market$makeSet.transaction;settleFundsSigners=_yield$market$makeSet.signers;transaction=mergeTransactions([createAccountTransaction,settleFundsTransaction]);_context2.next=28;return sendTransaction({transaction:transaction,signers:settleFundsSigners,wallet:wallet,connection:connection,sendingMessage:'Settling funds...',sendNotification:sendNotification});case 28:return _context2.abrupt(\"return\",_context2.sent);case 29:case\"end\":return _context2.stop();}}},_callee2);}));return _settleFunds.apply(this,arguments);}export function settleAllFunds(_x3){return _settleAllFunds.apply(this,arguments);}function _settleAllFunds(){_settleAllFunds=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref3){var connection,wallet,tokenAccounts,markets,selectedTokenAccounts,programIds,getOpenOrdersAccountsForProgramId,openOrdersAccountsForProgramIds,openOrdersAccounts,settleTransactions,transactions,signers,transaction;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:connection=_ref3.connection,wallet=_ref3.wallet,tokenAccounts=_ref3.tokenAccounts,markets=_ref3.markets,selectedTokenAccounts=_ref3.selectedTokenAccounts;if(!(!markets||!wallet||!connection||!tokenAccounts)){_context4.next=3;break;}return _context4.abrupt(\"return\");case 3:programIds=[];markets.reduce(function(cumulative,m){// @ts-ignore\ncumulative.push(m._programId);return cumulative;},[]).forEach(function(programId){if(!programIds.find(function(p){return p.equals(programId);})){programIds.push(programId);}});getOpenOrdersAccountsForProgramId=/*#__PURE__*/function(){var _ref13=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(programId){var openOrdersAccounts;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return OpenOrders.findForOwner(connection,wallet.publicKey,programId);case 2:openOrdersAccounts=_context3.sent;return _context3.abrupt(\"return\",openOrdersAccounts.filter(function(openOrders){return openOrders.baseTokenFree.toNumber()||openOrders.quoteTokenFree.toNumber();}));case 4:case\"end\":return _context3.stop();}}},_callee3);}));return function getOpenOrdersAccountsForProgramId(_x20){return _ref13.apply(this,arguments);};}();_context4.next=8;return Promise.all(programIds.map(function(programId){return getOpenOrdersAccountsForProgramId(programId);}));case 8:openOrdersAccountsForProgramIds=_context4.sent;openOrdersAccounts=openOrdersAccountsForProgramIds.reduce(function(accounts,current){return accounts.concat(current);},[]);_context4.next=12;return Promise.all(openOrdersAccounts.map(function(openOrdersAccount){var _getSelectedTokenAcco,_getSelectedTokenAcco2;var market=markets.find(function(m){var _m$_decoded,_m$_decoded$ownAddres;return(// @ts-ignore\n(_m$_decoded=m._decoded)===null||_m$_decoded===void 0?void 0:(_m$_decoded$ownAddres=_m$_decoded.ownAddress)===null||_m$_decoded$ownAddres===void 0?void 0:_m$_decoded$ownAddres.equals(openOrdersAccount.market));});if(openOrdersAccount.baseTokenFree.isZero()&&openOrdersAccount.quoteTokenFree.isZero()){// nothing to settle for this market.\nreturn null;}var baseMint=market===null||market===void 0?void 0:market.baseMintAddress;var quoteMint=market===null||market===void 0?void 0:market.quoteMintAddress;var selectedBaseTokenAccount=(_getSelectedTokenAcco=getSelectedTokenAccountForMint(tokenAccounts,baseMint,baseMint&&selectedTokenAccounts&&selectedTokenAccounts[baseMint.toBase58()]))===null||_getSelectedTokenAcco===void 0?void 0:_getSelectedTokenAcco.pubkey;var selectedQuoteTokenAccount=(_getSelectedTokenAcco2=getSelectedTokenAccountForMint(tokenAccounts,quoteMint,quoteMint&&selectedTokenAccounts&&selectedTokenAccounts[quoteMint.toBase58()]))===null||_getSelectedTokenAcco2===void 0?void 0:_getSelectedTokenAcco2.pubkey;if(!selectedBaseTokenAccount||!selectedQuoteTokenAccount){return null;}return market&&market.makeSettleFundsTransaction(connection,openOrdersAccount,selectedBaseTokenAccount,selectedQuoteTokenAccount);}));case 12:settleTransactions=_context4.sent.filter(function(x){return!!x;});if(!(!settleTransactions||settleTransactions.length===0)){_context4.next=15;break;}return _context4.abrupt(\"return\");case 15:transactions=settleTransactions.slice(0,4).map(function(t){return t.transaction;});signers=[];settleTransactions.reduce(function(cumulative,t){return cumulative.concat(t.signers);},[]).forEach(function(signer){if(!signers.find(function(s){return s.publicKey.equals(signer.publicKey);})){signers.push(signer);}});transaction=mergeTransactions(transactions);_context4.next=21;return sendTransaction({transaction:transaction,signers:signers,wallet:wallet,connection:connection});case 21:return _context4.abrupt(\"return\",_context4.sent);case 22:case\"end\":return _context4.stop();}}},_callee4);}));return _settleAllFunds.apply(this,arguments);}export function cancelOrder(_x4){return _cancelOrder.apply(this,arguments);}function _cancelOrder(){_cancelOrder=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(params){return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:return _context5.abrupt(\"return\",cancelOrders(_objectSpread(_objectSpread({},params),{},{orders:[params.order]})));case 1:case\"end\":return _context5.stop();}}},_callee5);}));return _cancelOrder.apply(this,arguments);}export function cancelOrders(_x5){return _cancelOrders.apply(this,arguments);}function _cancelOrders(){_cancelOrders=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref4){var market,wallet,connection,orders,transaction;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:market=_ref4.market,wallet=_ref4.wallet,connection=_ref4.connection,orders=_ref4.orders;transaction=market.makeMatchOrdersTransaction(5);orders.forEach(function(order){transaction.add(market.makeCancelOrderInstruction(connection,wallet.publicKey,order));});transaction.add(market.makeMatchOrdersTransaction(5));_context6.next=6;return sendTransaction({transaction:transaction,wallet:wallet,connection:connection,sendingMessage:'Sending cancel...'});case 6:return _context6.abrupt(\"return\",_context6.sent);case 7:case\"end\":return _context6.stop();}}},_callee6);}));return _cancelOrders.apply(this,arguments);}export function placeOrder(_x6){return _placeOrder.apply(this,arguments);}function _placeOrder(){_placeOrder=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_ref5){var _market$minOrderSize,_market$tickSize;var side,price,size,orderType,market,connection,wallet,baseCurrencyAccount,quoteCurrencyAccount,_ref5$feeDiscountPubk,feeDiscountPubkey,formattedMinOrderSize,formattedTickSize,isIncrement,owner,transaction,signers,_yield$createTokenAcc,createAccountTransaction,newAccountPubkey,_yield$createTokenAcc2,_createAccountTransaction,_newAccountPubkey,payer,params,matchOrderstransaction,startTime,_yield$market$makePla,placeOrderTx,placeOrderSigners,endTime;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:side=_ref5.side,price=_ref5.price,size=_ref5.size,orderType=_ref5.orderType,market=_ref5.market,connection=_ref5.connection,wallet=_ref5.wallet,baseCurrencyAccount=_ref5.baseCurrencyAccount,quoteCurrencyAccount=_ref5.quoteCurrencyAccount,_ref5$feeDiscountPubk=_ref5.feeDiscountPubkey,feeDiscountPubkey=_ref5$feeDiscountPubk===void 0?undefined:_ref5$feeDiscountPubk;formattedMinOrderSize=(market===null||market===void 0?void 0:(_market$minOrderSize=market.minOrderSize)===null||_market$minOrderSize===void 0?void 0:_market$minOrderSize.toFixed(getDecimalCount(market.minOrderSize)))||(market===null||market===void 0?void 0:market.minOrderSize);formattedTickSize=(market===null||market===void 0?void 0:(_market$tickSize=market.tickSize)===null||_market$tickSize===void 0?void 0:_market$tickSize.toFixed(getDecimalCount(market.tickSize)))||(market===null||market===void 0?void 0:market.tickSize);isIncrement=function isIncrement(num,step){return Math.abs(num/step%1)<1e-5||Math.abs(num/step%1-1)<1e-5;};if(!isNaN(price)){_context7.next=7;break;}notify({message:'Invalid price',type:'error'});return _context7.abrupt(\"return\");case 7:if(!isNaN(size)){_context7.next=10;break;}notify({message:'Invalid size',type:'error'});return _context7.abrupt(\"return\");case 10:if(!(!wallet||!wallet.publicKey)){_context7.next=13;break;}notify({message:'Connect wallet',type:'error'});return _context7.abrupt(\"return\");case 13:if(market){_context7.next=16;break;}notify({message:'Invalid  market',type:'error'});return _context7.abrupt(\"return\");case 16:if(isIncrement(size,market.minOrderSize)){_context7.next=19;break;}notify({message:\"Size must be an increment of \".concat(formattedMinOrderSize),type:'error'});return _context7.abrupt(\"return\");case 19:if(!(size<market.minOrderSize)){_context7.next=22;break;}notify({message:'Size too small',type:'error'});return _context7.abrupt(\"return\");case 22:if(isIncrement(price,market.tickSize)){_context7.next=25;break;}notify({message:\"Price must be an increment of \".concat(formattedTickSize),type:'error'});return _context7.abrupt(\"return\");case 25:if(!(price<market.tickSize)){_context7.next=28;break;}notify({message:'Price under tick size',type:'error'});return _context7.abrupt(\"return\");case 28:owner=wallet.publicKey;transaction=new Transaction();signers=[];if(baseCurrencyAccount){_context7.next=39;break;}_context7.next=34;return createTokenAccountTransaction({connection:connection,wallet:wallet,mintPublicKey:market.baseMintAddress});case 34:_yield$createTokenAcc=_context7.sent;createAccountTransaction=_yield$createTokenAcc.transaction;newAccountPubkey=_yield$createTokenAcc.newAccountPubkey;transaction.add(createAccountTransaction);baseCurrencyAccount=newAccountPubkey;case 39:if(quoteCurrencyAccount){_context7.next=47;break;}_context7.next=42;return createTokenAccountTransaction({connection:connection,wallet:wallet,mintPublicKey:market.quoteMintAddress});case 42:_yield$createTokenAcc2=_context7.sent;_createAccountTransaction=_yield$createTokenAcc2.transaction;_newAccountPubkey=_yield$createTokenAcc2.newAccountPubkey;transaction.add(_createAccountTransaction);quoteCurrencyAccount=_newAccountPubkey;case 47:payer=side==='sell'?baseCurrencyAccount:quoteCurrencyAccount;if(payer){_context7.next=51;break;}notify({message:'Need an SPL token account for cost currency',type:'error'});return _context7.abrupt(\"return\");case 51:params={owner:owner,payer:payer,side:side,price:price,size:size,orderType:orderType,feeDiscountPubkey:feeDiscountPubkey||null};console.log(params);matchOrderstransaction=market.makeMatchOrdersTransaction(5);transaction.add(matchOrderstransaction);startTime=getUnixTs();_context7.next=58;return market.makePlaceOrderTransaction(connection,params,120000,120000);case 58:_yield$market$makePla=_context7.sent;placeOrderTx=_yield$market$makePla.transaction;placeOrderSigners=_yield$market$makePla.signers;endTime=getUnixTs();console.log(\"Creating order transaction took \".concat(endTime-startTime));transaction.add(placeOrderTx);transaction.add(market.makeMatchOrdersTransaction(5));signers.push.apply(signers,_toConsumableArray(placeOrderSigners));_context7.next=68;return sendTransaction({transaction:transaction,wallet:wallet,connection:connection,signers:signers,sendingMessage:'Sending order...'});case 68:return _context7.abrupt(\"return\",_context7.sent);case 69:case\"end\":return _context7.stop();}}},_callee7);}));return _placeOrder.apply(this,arguments);}export function listMarket(_x7){return _listMarket.apply(this,arguments);}function _listMarket(){_listMarket=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(_ref6){var connection,wallet,baseMint,quoteMint,baseLotSize,quoteLotSize,dexProgramId,market,requestQueue,eventQueue,bids,asks,baseVault,quoteVault,feeRateBps,quoteDustThreshold,getVaultOwnerAndNonce,_getVaultOwnerAndNonce,_yield$getVaultOwnerA,_yield$getVaultOwnerA2,vaultOwner,vaultSignerNonce,tx1,tx2,signedTransactions,_iterator,_step,signedTransaction;return _regeneratorRuntime.wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:_getVaultOwnerAndNonce=function _getVaultOwnerAndNonc2(){_getVaultOwnerAndNonce=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(){var nonce,_vaultOwner;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:nonce=new BN(0);case 1:if(!true){_context8.next=14;break;}_context8.prev=2;_context8.next=5;return PublicKey.createProgramAddress([market.publicKey.toBuffer(),nonce.toArrayLike(Buffer,'le',8)],dexProgramId);case 5:_vaultOwner=_context8.sent;return _context8.abrupt(\"return\",[_vaultOwner,nonce]);case 9:_context8.prev=9;_context8.t0=_context8[\"catch\"](2);nonce.iaddn(1);case 12:_context8.next=1;break;case 14:case\"end\":return _context8.stop();}}},_callee8,null,[[2,9]]);}));return _getVaultOwnerAndNonce.apply(this,arguments);};getVaultOwnerAndNonce=function _getVaultOwnerAndNonc(){return _getVaultOwnerAndNonce.apply(this,arguments);};connection=_ref6.connection,wallet=_ref6.wallet,baseMint=_ref6.baseMint,quoteMint=_ref6.quoteMint,baseLotSize=_ref6.baseLotSize,quoteLotSize=_ref6.quoteLotSize,dexProgramId=_ref6.dexProgramId;market=new Account();requestQueue=new Account();eventQueue=new Account();bids=new Account();asks=new Account();baseVault=new Account();quoteVault=new Account();feeRateBps=0;quoteDustThreshold=new BN(100);_context9.next=14;return getVaultOwnerAndNonce();case 14:_yield$getVaultOwnerA=_context9.sent;_yield$getVaultOwnerA2=_slicedToArray(_yield$getVaultOwnerA,2);vaultOwner=_yield$getVaultOwnerA2[0];vaultSignerNonce=_yield$getVaultOwnerA2[1];tx1=new Transaction();_context9.t0=tx1;_context9.t1=SystemProgram;_context9.t2=wallet.publicKey;_context9.t3=baseVault.publicKey;_context9.next=25;return connection.getMinimumBalanceForRentExemption(165);case 25:_context9.t4=_context9.sent;_context9.t5=TokenInstructions.TOKEN_PROGRAM_ID;_context9.t6={fromPubkey:_context9.t2,newAccountPubkey:_context9.t3,lamports:_context9.t4,space:165,programId:_context9.t5};_context9.t7=_context9.t1.createAccount.call(_context9.t1,_context9.t6);_context9.t8=SystemProgram;_context9.t9=wallet.publicKey;_context9.t10=quoteVault.publicKey;_context9.next=34;return connection.getMinimumBalanceForRentExemption(165);case 34:_context9.t11=_context9.sent;_context9.t12=TokenInstructions.TOKEN_PROGRAM_ID;_context9.t13={fromPubkey:_context9.t9,newAccountPubkey:_context9.t10,lamports:_context9.t11,space:165,programId:_context9.t12};_context9.t14=_context9.t8.createAccount.call(_context9.t8,_context9.t13);_context9.t15=TokenInstructions.initializeAccount({account:baseVault.publicKey,mint:baseMint,owner:vaultOwner});_context9.t16=TokenInstructions.initializeAccount({account:quoteVault.publicKey,mint:quoteMint,owner:vaultOwner});_context9.t0.add.call(_context9.t0,_context9.t7,_context9.t14,_context9.t15,_context9.t16);tx2=new Transaction();_context9.t17=tx2;_context9.t18=SystemProgram;_context9.t19=wallet.publicKey;_context9.t20=market.publicKey;_context9.next=48;return connection.getMinimumBalanceForRentExemption(Market.getLayout(dexProgramId).span);case 48:_context9.t21=_context9.sent;_context9.t22=Market.getLayout(dexProgramId).span;_context9.t23=dexProgramId;_context9.t24={fromPubkey:_context9.t19,newAccountPubkey:_context9.t20,lamports:_context9.t21,space:_context9.t22,programId:_context9.t23};_context9.t25=_context9.t18.createAccount.call(_context9.t18,_context9.t24);_context9.t26=SystemProgram;_context9.t27=wallet.publicKey;_context9.t28=requestQueue.publicKey;_context9.next=58;return connection.getMinimumBalanceForRentExemption(5120+12);case 58:_context9.t29=_context9.sent;_context9.t30=5120+12;_context9.t31=dexProgramId;_context9.t32={fromPubkey:_context9.t27,newAccountPubkey:_context9.t28,lamports:_context9.t29,space:_context9.t30,programId:_context9.t31};_context9.t33=_context9.t26.createAccount.call(_context9.t26,_context9.t32);_context9.t34=SystemProgram;_context9.t35=wallet.publicKey;_context9.t36=eventQueue.publicKey;_context9.next=68;return connection.getMinimumBalanceForRentExemption(262144+12);case 68:_context9.t37=_context9.sent;_context9.t38=262144+12;_context9.t39=dexProgramId;_context9.t40={fromPubkey:_context9.t35,newAccountPubkey:_context9.t36,lamports:_context9.t37,space:_context9.t38,programId:_context9.t39};_context9.t41=_context9.t34.createAccount.call(_context9.t34,_context9.t40);_context9.t42=SystemProgram;_context9.t43=wallet.publicKey;_context9.t44=bids.publicKey;_context9.next=78;return connection.getMinimumBalanceForRentExemption(65536+12);case 78:_context9.t45=_context9.sent;_context9.t46=65536+12;_context9.t47=dexProgramId;_context9.t48={fromPubkey:_context9.t43,newAccountPubkey:_context9.t44,lamports:_context9.t45,space:_context9.t46,programId:_context9.t47};_context9.t49=_context9.t42.createAccount.call(_context9.t42,_context9.t48);_context9.t50=SystemProgram;_context9.t51=wallet.publicKey;_context9.t52=asks.publicKey;_context9.next=88;return connection.getMinimumBalanceForRentExemption(65536+12);case 88:_context9.t53=_context9.sent;_context9.t54=65536+12;_context9.t55=dexProgramId;_context9.t56={fromPubkey:_context9.t51,newAccountPubkey:_context9.t52,lamports:_context9.t53,space:_context9.t54,programId:_context9.t55};_context9.t57=_context9.t50.createAccount.call(_context9.t50,_context9.t56);_context9.t58=DexInstructions.initializeMarket({market:market.publicKey,requestQueue:requestQueue.publicKey,eventQueue:eventQueue.publicKey,bids:bids.publicKey,asks:asks.publicKey,baseVault:baseVault.publicKey,quoteVault:quoteVault.publicKey,baseMint:baseMint,quoteMint:quoteMint,baseLotSize:new BN(baseLotSize),quoteLotSize:new BN(quoteLotSize),feeRateBps:feeRateBps,vaultSignerNonce:vaultSignerNonce,quoteDustThreshold:quoteDustThreshold,programId:dexProgramId,authority:undefined});_context9.t17.add.call(_context9.t17,_context9.t25,_context9.t33,_context9.t41,_context9.t49,_context9.t57,_context9.t58);_context9.next=97;return signTransactions({transactionsAndSigners:[{transaction:tx1,signers:[baseVault,quoteVault]},{transaction:tx2,signers:[market,requestQueue,eventQueue,bids,asks]}],wallet:wallet,connection:connection});case 97:signedTransactions=_context9.sent;_iterator=_createForOfIteratorHelper(signedTransactions);_context9.prev=99;_iterator.s();case 101:if((_step=_iterator.n()).done){_context9.next=107;break;}signedTransaction=_step.value;_context9.next=105;return sendSignedTransaction({signedTransaction:signedTransaction,connection:connection});case 105:_context9.next=101;break;case 107:_context9.next=112;break;case 109:_context9.prev=109;_context9.t59=_context9[\"catch\"](99);_iterator.e(_context9.t59);case 112:_context9.prev=112;_iterator.f();return _context9.finish(112);case 115:return _context9.abrupt(\"return\",market.publicKey);case 116:case\"end\":return _context9.stop();}}},_callee9,null,[[99,109,112,115]]);}));return _listMarket.apply(this,arguments);}export var getUnixTs=function getUnixTs(){return new Date().getTime()/1000;};var DEFAULT_TIMEOUT=15000;export function sendTransaction(_x8){return _sendTransaction.apply(this,arguments);}function _sendTransaction(){_sendTransaction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(_ref7){var transaction,wallet,_ref7$signers,signers,connection,_ref7$sendingMessage,sendingMessage,_ref7$sentMessage,sentMessage,_ref7$successMessage,successMessage,_ref7$timeout,timeout,_ref7$sendNotificatio,sendNotification,signedTransaction;return _regeneratorRuntime.wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:transaction=_ref7.transaction,wallet=_ref7.wallet,_ref7$signers=_ref7.signers,signers=_ref7$signers===void 0?[]:_ref7$signers,connection=_ref7.connection,_ref7$sendingMessage=_ref7.sendingMessage,sendingMessage=_ref7$sendingMessage===void 0?'Sending transaction...':_ref7$sendingMessage,_ref7$sentMessage=_ref7.sentMessage,sentMessage=_ref7$sentMessage===void 0?'Transaction sent':_ref7$sentMessage,_ref7$successMessage=_ref7.successMessage,successMessage=_ref7$successMessage===void 0?'Transaction confirmed':_ref7$successMessage,_ref7$timeout=_ref7.timeout,timeout=_ref7$timeout===void 0?DEFAULT_TIMEOUT:_ref7$timeout,_ref7$sendNotificatio=_ref7.sendNotification,sendNotification=_ref7$sendNotificatio===void 0?true:_ref7$sendNotificatio;_context10.next=3;return signTransaction({transaction:transaction,wallet:wallet,signers:signers,connection:connection});case 3:signedTransaction=_context10.sent;_context10.next=6;return sendSignedTransaction({signedTransaction:signedTransaction,connection:connection,sendingMessage:sendingMessage,sentMessage:sentMessage,successMessage:successMessage,timeout:timeout,sendNotification:sendNotification});case 6:return _context10.abrupt(\"return\",_context10.sent);case 7:case\"end\":return _context10.stop();}}},_callee10);}));return _sendTransaction.apply(this,arguments);}export function signTransaction(_x9){return _signTransaction.apply(this,arguments);}function _signTransaction(){_signTransaction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(_ref8){var transaction,wallet,_ref8$signers,signers,connection;return _regeneratorRuntime.wrap(function _callee11$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:transaction=_ref8.transaction,wallet=_ref8.wallet,_ref8$signers=_ref8.signers,signers=_ref8$signers===void 0?[]:_ref8$signers,connection=_ref8.connection;_context11.next=3;return connection.getRecentBlockhash('max');case 3:transaction.recentBlockhash=_context11.sent.blockhash;transaction.setSigners.apply(transaction,[wallet.publicKey].concat(_toConsumableArray(signers.map(function(s){return s.publicKey;}))));if(signers.length>0){transaction.partialSign.apply(transaction,_toConsumableArray(signers));}_context11.next=8;return wallet.signTransaction(transaction);case 8:return _context11.abrupt(\"return\",_context11.sent);case 9:case\"end\":return _context11.stop();}}},_callee11);}));return _signTransaction.apply(this,arguments);}export function signTransactions(_x10){return _signTransactions.apply(this,arguments);}function _signTransactions(){_signTransactions=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(_ref9){var transactionsAndSigners,wallet,connection,blockhash;return _regeneratorRuntime.wrap(function _callee12$(_context12){while(1){switch(_context12.prev=_context12.next){case 0:transactionsAndSigners=_ref9.transactionsAndSigners,wallet=_ref9.wallet,connection=_ref9.connection;_context12.next=3;return connection.getRecentBlockhash('max');case 3:blockhash=_context12.sent.blockhash;transactionsAndSigners.forEach(function(_ref14){var transaction=_ref14.transaction,_ref14$signers=_ref14.signers,signers=_ref14$signers===void 0?[]:_ref14$signers;transaction.recentBlockhash=blockhash;transaction.setSigners.apply(transaction,[wallet.publicKey].concat(_toConsumableArray(signers.map(function(s){return s.publicKey;}))));if((signers===null||signers===void 0?void 0:signers.length)>0){transaction.partialSign.apply(transaction,_toConsumableArray(signers));}});_context12.next=7;return wallet.signAllTransactions(transactionsAndSigners.map(function(_ref15){var transaction=_ref15.transaction;return transaction;}));case 7:return _context12.abrupt(\"return\",_context12.sent);case 8:case\"end\":return _context12.stop();}}},_callee12);}));return _signTransactions.apply(this,arguments);}export function sendSignedTransaction(_x11){return _sendSignedTransaction.apply(this,arguments);}function _sendSignedTransaction(){_sendSignedTransaction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14(_ref10){var signedTransaction,connection,_ref10$sendingMessage,sendingMessage,_ref10$sentMessage,sentMessage,_ref10$successMessage,successMessage,_ref10$timeout,timeout,_ref10$sendNotificati,sendNotification,rawTransaction,startTime,txid,done,simulateResult,i,line,parsedError,parsedErrorInfo;return _regeneratorRuntime.wrap(function _callee14$(_context14){while(1){switch(_context14.prev=_context14.next){case 0:signedTransaction=_ref10.signedTransaction,connection=_ref10.connection,_ref10$sendingMessage=_ref10.sendingMessage,sendingMessage=_ref10$sendingMessage===void 0?'Sending transaction...':_ref10$sendingMessage,_ref10$sentMessage=_ref10.sentMessage,sentMessage=_ref10$sentMessage===void 0?'Transaction sent':_ref10$sentMessage,_ref10$successMessage=_ref10.successMessage,successMessage=_ref10$successMessage===void 0?'Transaction confirmed':_ref10$successMessage,_ref10$timeout=_ref10.timeout,timeout=_ref10$timeout===void 0?DEFAULT_TIMEOUT:_ref10$timeout,_ref10$sendNotificati=_ref10.sendNotification,sendNotification=_ref10$sendNotificati===void 0?true:_ref10$sendNotificati;rawTransaction=signedTransaction.serialize();startTime=getUnixTs();if(sendNotification){notify({message:sendingMessage});}_context14.next=6;return connection.sendRawTransaction(rawTransaction,{skipPreflight:true});case 6:txid=_context14.sent;if(sendNotification){notify({message:sentMessage,type:'success',txid:txid});}console.log('Started awaiting confirmation for',txid);done=false;_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(){return _regeneratorRuntime.wrap(function _callee13$(_context13){while(1){switch(_context13.prev=_context13.next){case 0:if(!(!done&&getUnixTs()-startTime<timeout)){_context13.next=6;break;}connection.sendRawTransaction(rawTransaction,{skipPreflight:true});_context13.next=4;return sleep(300);case 4:_context13.next=0;break;case 6:case\"end\":return _context13.stop();}}},_callee13);}))();_context14.prev=11;_context14.next=14;return awaitTransactionSignatureConfirmation(txid,timeout,connection);case 14:_context14.next=42;break;case 16:_context14.prev=16;_context14.t0=_context14[\"catch\"](11);if(!_context14.t0.timeout){_context14.next=20;break;}throw new Error('Timed out awaiting confirmation on transaction');case 20:simulateResult=null;_context14.prev=21;_context14.next=24;return simulateTransaction(connection,signedTransaction,'single');case 24:simulateResult=_context14.sent.value;_context14.next=29;break;case 27:_context14.prev=27;_context14.t1=_context14[\"catch\"](21);case 29:if(!(simulateResult&&simulateResult.err)){_context14.next=41;break;}if(!simulateResult.logs){_context14.next=39;break;}i=simulateResult.logs.length-1;case 32:if(!(i>=0)){_context14.next=39;break;}line=simulateResult.logs[i];if(!line.startsWith('Program log: ')){_context14.next=36;break;}throw new Error('Transaction failed: '+line.slice('Program log: '.length));case 36:--i;_context14.next=32;break;case 39:if(typeof simulateResult.err=='object'&&'InstructionError'in simulateResult.err){parsedErrorInfo=parseInstructionErrorResponse(signedTransaction,simulateResult.err['InstructionError']);parsedError=parsedErrorInfo.error;}else{parsedError=JSON.stringify(simulateResult.err);}throw new Error(parsedError);case 41:throw new Error('Transaction failed');case 42:_context14.prev=42;done=true;return _context14.finish(42);case 45:if(sendNotification){notify({message:successMessage,type:'success',txid:txid});}console.log('Latency',txid,getUnixTs()-startTime);return _context14.abrupt(\"return\",txid);case 48:case\"end\":return _context14.stop();}}},_callee14,null,[[11,16,42,45],[21,27]]);}));return _sendSignedTransaction.apply(this,arguments);}function awaitTransactionSignatureConfirmation(_x12,_x13,_x14){return _awaitTransactionSignatureConfirmation.apply(this,arguments);}function _awaitTransactionSignatureConfirmation(){_awaitTransactionSignatureConfirmation=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(txid,timeout,connection){var done,result;return _regeneratorRuntime.wrap(function _callee17$(_context17){while(1){switch(_context17.prev=_context17.next){case 0:done=false;_context17.next=3;return new Promise(function(resolve,reject){_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(){return _regeneratorRuntime.wrap(function _callee16$(_context16){while(1){switch(_context16.prev=_context16.next){case 0:setTimeout(function(){if(done){return;}done=true;console.log('Timed out for txid',txid);reject({timeout:true});},timeout);try{connection.onSignature(txid,function(result){console.log('WS confirmed',txid,result);done=true;if(result.err){reject(result.err);}else{resolve(result);}},'recent');console.log('Set up WS connection',txid);}catch(e){done=true;console.log('WS error in setup',txid,e);}case 2:if(done){_context16.next=8;break;}// eslint-disable-next-line no-loop-func\n_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(){var signatureStatuses,_result2;return _regeneratorRuntime.wrap(function _callee15$(_context15){while(1){switch(_context15.prev=_context15.next){case 0:_context15.prev=0;_context15.next=3;return connection.getSignatureStatuses([txid]);case 3:signatureStatuses=_context15.sent;_result2=signatureStatuses&&signatureStatuses.value[0];if(!done){if(!_result2){console.log('REST null result for',txid,_result2);}else if(_result2.err){console.log('REST error for',txid,_result2);done=true;reject(_result2.err);}else if(!_result2.confirmations){console.log('REST no confirmations for',txid,_result2);}else{console.log('REST confirmation for',txid,_result2);done=true;resolve(_result2);}}_context15.next=11;break;case 8:_context15.prev=8;_context15.t0=_context15[\"catch\"](0);if(!done){console.log('REST connection error: txid',txid,_context15.t0);}case 11:case\"end\":return _context15.stop();}}},_callee15,null,[[0,8]]);}))();_context16.next=6;return sleep(300);case 6:_context16.next=2;break;case 8:case\"end\":return _context16.stop();}}},_callee16);}))();});case 3:result=_context17.sent;done=true;return _context17.abrupt(\"return\",result);case 6:case\"end\":return _context17.stop();}}},_callee17);}));return _awaitTransactionSignatureConfirmation.apply(this,arguments);}function mergeTransactions(transactions){var transaction=new Transaction();transactions.filter(function(t){return t!==undefined;}).forEach(function(t){transaction.add(t);});return transaction;}function jsonRpcResult(resultDescription){var jsonRpcVersion=struct.literal('2.0');return struct.union([struct({jsonrpc:jsonRpcVersion,id:'string',error:'any'}),struct({jsonrpc:jsonRpcVersion,id:'string',error:'null?',result:resultDescription})]);}function jsonRpcResultAndContext(resultDescription){return jsonRpcResult({context:struct({slot:'number'}),value:resultDescription});}var AccountInfoResult=struct({executable:'boolean',owner:'string',lamports:'number',data:'any',rentEpoch:'number?'});export var GetMultipleAccountsAndContextRpcResult=jsonRpcResultAndContext(struct.array([struct.union(['null',AccountInfoResult])]));export function getMultipleSolanaAccounts(_x15,_x16){return _getMultipleSolanaAccounts.apply(this,arguments);}/** Copy of Connection.simulateTransaction that takes a commitment parameter. */function _getMultipleSolanaAccounts(){_getMultipleSolanaAccounts=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(connection,publicKeys){var args,unsafeRes,res,accounts,_iterator2,_step2,account,value,executable,owner,lamports,data;return _regeneratorRuntime.wrap(function _callee18$(_context18){while(1){switch(_context18.prev=_context18.next){case 0:args=[publicKeys.map(function(k){return k.toBase58();}),{commitment:'recent'}];// @ts-ignore\n_context18.next=3;return connection._rpcRequest('getMultipleAccounts',args);case 3:unsafeRes=_context18.sent;res=GetMultipleAccountsAndContextRpcResult(unsafeRes);if(!res.error){_context18.next=7;break;}throw new Error('failed to get info about accounts '+publicKeys.map(function(k){return k.toBase58();}).join(', ')+': '+res.error.message);case 7:assert(typeof res.result!=='undefined');accounts=[];_iterator2=_createForOfIteratorHelper(res.result.value);try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){account=_step2.value;value=null;if(res.result.value){executable=account.executable,owner=account.owner,lamports=account.lamports,data=account.data;assert(data[1]==='base64');value={executable:executable,owner:new PublicKey(owner),lamports:lamports,data:Buffer.from(data[0],'base64')};}accounts.push(value);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return _context18.abrupt(\"return\",{context:{slot:res.result.context.slot},value:Object.fromEntries(accounts.map(function(account,i){return[publicKeys[i].toBase58(),account];}))});case 12:case\"end\":return _context18.stop();}}},_callee18);}));return _getMultipleSolanaAccounts.apply(this,arguments);}function simulateTransaction(_x17,_x18,_x19){return _simulateTransaction.apply(this,arguments);}function _simulateTransaction(){_simulateTransaction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(connection,transaction,commitment){var signData,wireTransaction,encodedTransaction,config,args,res;return _regeneratorRuntime.wrap(function _callee19$(_context19){while(1){switch(_context19.prev=_context19.next){case 0:_context19.next=2;return connection._recentBlockhash(// @ts-ignore\nconnection._disableBlockhashCaching);case 2:transaction.recentBlockhash=_context19.sent;signData=transaction.serializeMessage();// @ts-ignore\nwireTransaction=transaction._serialize(signData);encodedTransaction=wireTransaction.toString('base64');config={encoding:'base64',commitment:commitment};args=[encodedTransaction,config];// @ts-ignore\n_context19.next=10;return connection._rpcRequest('simulateTransaction',args);case 10:res=_context19.sent;if(!res.error){_context19.next=13;break;}throw new Error('failed to simulate transaction: '+res.error.message);case 13:return _context19.abrupt(\"return\",res.result);case 14:case\"end\":return _context19.stop();}}},_callee19);}));return _simulateTransaction.apply(this,arguments);}","map":{"version":3,"sources":["/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/utils/send.tsx"],"names":["notify","getDecimalCount","sleep","getSelectedTokenAccountForMint","Account","PublicKey","SystemProgram","Transaction","Token","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","BN","DexInstructions","Market","OpenOrders","parseInstructionErrorResponse","TOKEN_MINTS","TokenInstructions","Buffer","assert","struct","createTokenAccountTransaction","connection","wallet","mintPublicKey","getAssociatedTokenAddress","publicKey","ata","transaction","add","createAssociatedTokenAccountInstruction","newAccountPubkey","settleFunds","market","openOrders","baseCurrencyAccount","quoteCurrencyAccount","sendNotification","usdcRef","undefined","usdtRef","message","baseCurrencyAccountPubkey","pubkey","quoteCurrencyAccountPubkey","baseMintAddress","result","createAccountTransaction","quoteMintAddress","referrerQuoteWallet","supportsReferralFees","usdt","find","name","usdc","equals","address","makeSettleFundsTransaction","settleFundsTransaction","settleFundsSigners","signers","mergeTransactions","sendTransaction","sendingMessage","settleAllFunds","tokenAccounts","markets","selectedTokenAccounts","programIds","reduce","cumulative","m","push","_programId","forEach","programId","p","getOpenOrdersAccountsForProgramId","findForOwner","openOrdersAccounts","filter","baseTokenFree","toNumber","quoteTokenFree","Promise","all","map","openOrdersAccountsForProgramIds","accounts","current","concat","openOrdersAccount","_decoded","ownAddress","isZero","baseMint","quoteMint","selectedBaseTokenAccount","toBase58","selectedQuoteTokenAccount","settleTransactions","x","length","transactions","slice","t","signer","s","cancelOrder","params","cancelOrders","orders","order","makeMatchOrdersTransaction","makeCancelOrderInstruction","placeOrder","side","price","size","orderType","feeDiscountPubkey","formattedMinOrderSize","minOrderSize","toFixed","formattedTickSize","tickSize","isIncrement","num","step","Math","abs","isNaN","type","owner","payer","console","log","matchOrderstransaction","startTime","getUnixTs","makePlaceOrderTransaction","placeOrderTx","placeOrderSigners","endTime","listMarket","getVaultOwnerAndNonce","nonce","createProgramAddress","toBuffer","toArrayLike","dexProgramId","vaultOwner","iaddn","baseLotSize","quoteLotSize","requestQueue","eventQueue","bids","asks","baseVault","quoteVault","feeRateBps","quoteDustThreshold","vaultSignerNonce","tx1","getMinimumBalanceForRentExemption","fromPubkey","lamports","space","createAccount","initializeAccount","account","mint","tx2","getLayout","span","initializeMarket","authority","signTransactions","transactionsAndSigners","signedTransactions","signedTransaction","sendSignedTransaction","Date","getTime","DEFAULT_TIMEOUT","sentMessage","successMessage","timeout","signTransaction","getRecentBlockhash","recentBlockhash","blockhash","setSigners","partialSign","signAllTransactions","rawTransaction","serialize","sendRawTransaction","skipPreflight","txid","done","awaitTransactionSignatureConfirmation","Error","simulateResult","simulateTransaction","value","err","logs","i","line","startsWith","parsedErrorInfo","parsedError","error","JSON","stringify","resolve","reject","setTimeout","onSignature","e","getSignatureStatuses","signatureStatuses","confirmations","jsonRpcResult","resultDescription","jsonRpcVersion","literal","union","jsonrpc","id","jsonRpcResultAndContext","context","slot","AccountInfoResult","executable","data","rentEpoch","GetMultipleAccountsAndContextRpcResult","array","getMultipleSolanaAccounts","publicKeys","args","k","commitment","_rpcRequest","unsafeRes","res","join","from","Object","fromEntries","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","config","encoding"],"mappings":"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","sourcesContent":["import { notify } from './notifications';\nimport { getDecimalCount, sleep } from './utils';\nimport { getSelectedTokenAccountForMint } from './markets';\nimport {\n  Account,\n  AccountInfo,\n  Commitment,\n  Connection,\n  PublicKey,\n  RpcResponseAndContext,\n  SimulatedTransactionResponse,\n  SystemProgram,\n  Transaction,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport {\n  Token,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\nimport BN from 'bn.js';\nimport {\n  DexInstructions,\n  Market,\n  OpenOrders,\n  parseInstructionErrorResponse,\n  TOKEN_MINTS,\n  TokenInstructions,\n} from '@project-serum/serum';\nimport { SelectedTokenAccounts, TokenAccount } from './types';\nimport { Order } from '@project-serum/serum/lib/market';\nimport { Buffer } from 'buffer';\nimport assert from 'assert';\nimport { struct } from 'superstruct';\nimport { WalletAdapter } from '../wallet-adapters';\n\nexport async function createTokenAccountTransaction({\n  connection,\n  wallet,\n  mintPublicKey,\n}: {\n  connection: Connection;\n  wallet: WalletAdapter;\n  mintPublicKey: PublicKey;\n}): Promise<{\n  transaction: Transaction;\n  newAccountPubkey: PublicKey;\n}> {\n  const ata = await Token.getAssociatedTokenAddress(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    mintPublicKey,\n    wallet.publicKey,\n  );\n  const transaction = new Transaction();\n  transaction.add(\n    Token.createAssociatedTokenAccountInstruction(\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n      TOKEN_PROGRAM_ID,\n      mintPublicKey,\n      ata,\n      wallet.publicKey,\n      wallet.publicKey,\n    ),\n  );\n  return {\n    transaction,\n    newAccountPubkey: ata,\n  };\n}\n\nexport async function settleFunds({\n  market,\n  openOrders,\n  connection,\n  wallet,\n  baseCurrencyAccount,\n  quoteCurrencyAccount,\n  sendNotification = true,\n  usdcRef = undefined,\n  usdtRef = undefined,\n}: {\n  market: Market;\n  openOrders: OpenOrders;\n  connection: Connection;\n  wallet: WalletAdapter;\n  baseCurrencyAccount: TokenAccount;\n  quoteCurrencyAccount: TokenAccount;\n  sendNotification?: boolean;\n  usdcRef?: PublicKey;\n  usdtRef?: PublicKey;\n}): Promise<string | undefined> {\n  if (\n    !market ||\n    !wallet ||\n    !connection ||\n    !openOrders ||\n    (!baseCurrencyAccount && !quoteCurrencyAccount)\n  ) {\n    if (sendNotification) {\n      notify({ message: 'Not connected' });\n    }\n    return;\n  }\n\n  let createAccountTransaction: Transaction | undefined;\n  let baseCurrencyAccountPubkey = baseCurrencyAccount?.pubkey;\n  let quoteCurrencyAccountPubkey = quoteCurrencyAccount?.pubkey;\n\n  if (!baseCurrencyAccountPubkey) {\n    const result = await createTokenAccountTransaction({\n      connection,\n      wallet,\n      mintPublicKey: market.baseMintAddress,\n    });\n    baseCurrencyAccountPubkey = result?.newAccountPubkey;\n    createAccountTransaction = result?.transaction;\n  }\n  if (!quoteCurrencyAccountPubkey) {\n    const result = await createTokenAccountTransaction({\n      connection,\n      wallet,\n      mintPublicKey: market.quoteMintAddress,\n    });\n    quoteCurrencyAccountPubkey = result?.newAccountPubkey;\n    createAccountTransaction = result?.transaction;\n  }\n  let referrerQuoteWallet: PublicKey | null = null;\n  if (market.supportsReferralFees) {\n    const usdt = TOKEN_MINTS.find(({ name }) => name === 'USDT');\n    const usdc = TOKEN_MINTS.find(({ name }) => name === 'USDC');\n    if (usdtRef && usdt && market.quoteMintAddress.equals(usdt.address)) {\n      referrerQuoteWallet = usdtRef;\n    } else if (\n      usdcRef &&\n      usdc &&\n      market.quoteMintAddress.equals(usdc.address)\n    ) {\n      referrerQuoteWallet = usdcRef;\n    }\n  }\n  const {\n    transaction: settleFundsTransaction,\n    signers: settleFundsSigners,\n  } = await market.makeSettleFundsTransaction(\n    connection,\n    openOrders,\n    baseCurrencyAccountPubkey,\n    quoteCurrencyAccountPubkey,\n    referrerQuoteWallet,\n  );\n\n  let transaction = mergeTransactions([\n    createAccountTransaction,\n    settleFundsTransaction,\n  ]);\n\n  return await sendTransaction({\n    transaction,\n    signers: settleFundsSigners,\n    wallet,\n    connection,\n    sendingMessage: 'Settling funds...',\n    sendNotification,\n  });\n}\n\nexport async function settleAllFunds({\n  connection,\n  wallet,\n  tokenAccounts,\n  markets,\n  selectedTokenAccounts,\n}: {\n  connection: Connection;\n  wallet: WalletAdapter;\n  tokenAccounts: TokenAccount[];\n  markets: Market[];\n  selectedTokenAccounts?: SelectedTokenAccounts;\n}) {\n  if (!markets || !wallet || !connection || !tokenAccounts) {\n    return;\n  }\n\n  const programIds: PublicKey[] = [];\n  markets\n    .reduce((cumulative, m) => {\n      // @ts-ignore\n      cumulative.push(m._programId);\n      return cumulative;\n    }, [])\n    .forEach((programId) => {\n      if (!programIds.find((p) => p.equals(programId))) {\n        programIds.push(programId);\n      }\n    });\n\n  const getOpenOrdersAccountsForProgramId = async (programId) => {\n    const openOrdersAccounts = await OpenOrders.findForOwner(\n      connection,\n      wallet.publicKey,\n      programId,\n    );\n    return openOrdersAccounts.filter(\n      (openOrders) =>\n        openOrders.baseTokenFree.toNumber() ||\n        openOrders.quoteTokenFree.toNumber(),\n    );\n  };\n\n  const openOrdersAccountsForProgramIds = await Promise.all(\n    programIds.map((programId) => getOpenOrdersAccountsForProgramId(programId)),\n  );\n  const openOrdersAccounts = openOrdersAccountsForProgramIds.reduce(\n    (accounts, current) => accounts.concat(current),\n    [],\n  );\n\n  const settleTransactions = (\n    await Promise.all(\n      openOrdersAccounts.map((openOrdersAccount) => {\n        const market = markets.find((m) =>\n          // @ts-ignore\n          m._decoded?.ownAddress?.equals(openOrdersAccount.market),\n        );\n        if (\n          openOrdersAccount.baseTokenFree.isZero() &&\n          openOrdersAccount.quoteTokenFree.isZero()\n        ) {\n          // nothing to settle for this market.\n          return null;\n        }\n        const baseMint = market?.baseMintAddress;\n        const quoteMint = market?.quoteMintAddress;\n\n        const selectedBaseTokenAccount = getSelectedTokenAccountForMint(\n          tokenAccounts,\n          baseMint,\n          baseMint &&\n          selectedTokenAccounts &&\n          selectedTokenAccounts[baseMint.toBase58()],\n        )?.pubkey;\n        const selectedQuoteTokenAccount = getSelectedTokenAccountForMint(\n          tokenAccounts,\n          quoteMint,\n          quoteMint &&\n          selectedTokenAccounts &&\n          selectedTokenAccounts[quoteMint.toBase58()],\n        )?.pubkey;\n        if (!selectedBaseTokenAccount || !selectedQuoteTokenAccount) {\n          return null;\n        }\n        return (\n          market &&\n          market.makeSettleFundsTransaction(\n            connection,\n            openOrdersAccount,\n            selectedBaseTokenAccount,\n            selectedQuoteTokenAccount,\n          )\n        );\n      }),\n    )\n  ).filter(\n    (\n      x,\n    ): x is {\n      signers: Account[];\n      transaction: Transaction;\n      payer: PublicKey;\n    } => !!x,\n  );\n  if (!settleTransactions || settleTransactions.length === 0) return;\n\n  const transactions = settleTransactions.slice(0, 4).map((t) => t.transaction);\n  const signers: Array<Account> = [];\n  settleTransactions\n    .reduce((cumulative: Array<Account>, t) => cumulative.concat(t.signers), [])\n    .forEach((signer) => {\n      if (!signers.find((s) => s.publicKey.equals(signer.publicKey))) {\n        signers.push(signer);\n      }\n    });\n\n  const transaction = mergeTransactions(transactions);\n\n  return await sendTransaction({\n    transaction,\n    signers,\n    wallet,\n    connection,\n  });\n}\n\nexport async function cancelOrder(params: {\n  market: Market;\n  connection: Connection;\n  wallet: WalletAdapter;\n  order: Order;\n}) {\n  return cancelOrders({ ...params, orders: [params.order] });\n}\n\nexport async function cancelOrders({\n  market,\n  wallet,\n  connection,\n  orders,\n}: {\n  market: Market;\n  wallet: WalletAdapter;\n  connection: Connection;\n  orders: Order[];\n}) {\n  const transaction = market.makeMatchOrdersTransaction(5);\n  orders.forEach((order) => {\n    transaction.add(\n      market.makeCancelOrderInstruction(connection, wallet.publicKey, order),\n    );\n  });\n  transaction.add(market.makeMatchOrdersTransaction(5));\n  return await sendTransaction({\n    transaction,\n    wallet,\n    connection,\n    sendingMessage: 'Sending cancel...',\n  });\n}\n\nexport async function placeOrder({\n  side,\n  price,\n  size,\n  orderType,\n  market,\n  connection,\n  wallet,\n  baseCurrencyAccount,\n  quoteCurrencyAccount,\n  feeDiscountPubkey = undefined,\n}: {\n  side: 'buy' | 'sell';\n  price: number;\n  size: number;\n  orderType: 'ioc' | 'postOnly' | 'limit';\n  market: Market | undefined | null;\n  connection: Connection;\n  wallet: WalletAdapter;\n  baseCurrencyAccount: PublicKey | undefined;\n  quoteCurrencyAccount: PublicKey | undefined;\n  feeDiscountPubkey: PublicKey | undefined;\n}) {\n  let formattedMinOrderSize =\n    market?.minOrderSize?.toFixed(getDecimalCount(market.minOrderSize)) ||\n    market?.minOrderSize;\n  let formattedTickSize =\n    market?.tickSize?.toFixed(getDecimalCount(market.tickSize)) ||\n    market?.tickSize;\n  const isIncrement = (num, step) =>\n    Math.abs((num / step) % 1) < 1e-5 ||\n    Math.abs(((num / step) % 1) - 1) < 1e-5;\n  if (isNaN(price)) {\n    notify({ message: 'Invalid price', type: 'error' });\n    return;\n  }\n  if (isNaN(size)) {\n    notify({ message: 'Invalid size', type: 'error' });\n    return;\n  }\n  if (!wallet || !wallet.publicKey) {\n    notify({ message: 'Connect wallet', type: 'error' });\n    return;\n  }\n  if (!market) {\n    notify({ message: 'Invalid  market', type: 'error' });\n    return;\n  }\n  if (!isIncrement(size, market.minOrderSize)) {\n    notify({\n      message: `Size must be an increment of ${formattedMinOrderSize}`,\n      type: 'error',\n    });\n    return;\n  }\n  if (size < market.minOrderSize) {\n    notify({ message: 'Size too small', type: 'error' });\n    return;\n  }\n  if (!isIncrement(price, market.tickSize)) {\n    notify({\n      message: `Price must be an increment of ${formattedTickSize}`,\n      type: 'error',\n    });\n    return;\n  }\n  if (price < market.tickSize) {\n    notify({ message: 'Price under tick size', type: 'error' });\n    return;\n  }\n  const owner = wallet.publicKey;\n  const transaction = new Transaction();\n  const signers: Account[] = [];\n\n  if (!baseCurrencyAccount) {\n    const {\n      transaction: createAccountTransaction,\n      newAccountPubkey,\n    } = await createTokenAccountTransaction({\n      connection,\n      wallet,\n      mintPublicKey: market.baseMintAddress,\n    });\n    transaction.add(createAccountTransaction);\n    baseCurrencyAccount = newAccountPubkey;\n  }\n  if (!quoteCurrencyAccount) {\n    const {\n      transaction: createAccountTransaction,\n      newAccountPubkey,\n    } = await createTokenAccountTransaction({\n      connection,\n      wallet,\n      mintPublicKey: market.quoteMintAddress,\n    });\n    transaction.add(createAccountTransaction);\n    quoteCurrencyAccount = newAccountPubkey;\n  }\n\n  const payer = side === 'sell' ? baseCurrencyAccount : quoteCurrencyAccount;\n  if (!payer) {\n    notify({\n      message: 'Need an SPL token account for cost currency',\n      type: 'error',\n    });\n    return;\n  }\n  const params = {\n    owner,\n    payer,\n    side,\n    price,\n    size,\n    orderType,\n    feeDiscountPubkey: feeDiscountPubkey || null,\n  };\n  console.log(params);\n\n  const matchOrderstransaction = market.makeMatchOrdersTransaction(5);\n  transaction.add(matchOrderstransaction);\n  const startTime = getUnixTs();\n  let {\n    transaction: placeOrderTx,\n    signers: placeOrderSigners,\n  } = await market.makePlaceOrderTransaction(\n    connection,\n    params,\n    120_000,\n    120_000,\n  );\n  const endTime = getUnixTs();\n  console.log(`Creating order transaction took ${endTime - startTime}`);\n  transaction.add(placeOrderTx);\n  transaction.add(market.makeMatchOrdersTransaction(5));\n  signers.push(...placeOrderSigners);\n\n  return await sendTransaction({\n    transaction,\n    wallet,\n    connection,\n    signers,\n    sendingMessage: 'Sending order...',\n  });\n}\n\nexport async function listMarket({\n  connection,\n  wallet,\n  baseMint,\n  quoteMint,\n  baseLotSize,\n  quoteLotSize,\n  dexProgramId,\n}: {\n  connection: Connection;\n  wallet: WalletAdapter;\n  baseMint: PublicKey;\n  quoteMint: PublicKey;\n  baseLotSize: number;\n  quoteLotSize: number;\n  dexProgramId: PublicKey;\n}) {\n  const market = new Account();\n  const requestQueue = new Account();\n  const eventQueue = new Account();\n  const bids = new Account();\n  const asks = new Account();\n  const baseVault = new Account();\n  const quoteVault = new Account();\n  const feeRateBps = 0;\n  const quoteDustThreshold = new BN(100);\n\n  async function getVaultOwnerAndNonce() {\n    const nonce = new BN(0);\n    while (true) {\n      try {\n        const vaultOwner = await PublicKey.createProgramAddress(\n          [market.publicKey.toBuffer(), nonce.toArrayLike(Buffer, 'le', 8)],\n          dexProgramId,\n        );\n        return [vaultOwner, nonce];\n      } catch (e) {\n        nonce.iaddn(1);\n      }\n    }\n  }\n  const [vaultOwner, vaultSignerNonce] = await getVaultOwnerAndNonce();\n\n  const tx1 = new Transaction();\n  tx1.add(\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: baseVault.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(165),\n      space: 165,\n      programId: TokenInstructions.TOKEN_PROGRAM_ID,\n    }),\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: quoteVault.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(165),\n      space: 165,\n      programId: TokenInstructions.TOKEN_PROGRAM_ID,\n    }),\n    TokenInstructions.initializeAccount({\n      account: baseVault.publicKey,\n      mint: baseMint,\n      owner: vaultOwner,\n    }),\n    TokenInstructions.initializeAccount({\n      account: quoteVault.publicKey,\n      mint: quoteMint,\n      owner: vaultOwner,\n    }),\n  );\n\n  const tx2 = new Transaction();\n  tx2.add(\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: market.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(\n        Market.getLayout(dexProgramId).span,\n      ),\n      space: Market.getLayout(dexProgramId).span,\n      programId: dexProgramId,\n    }),\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: requestQueue.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(5120 + 12),\n      space: 5120 + 12,\n      programId: dexProgramId,\n    }),\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: eventQueue.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(262144 + 12),\n      space: 262144 + 12,\n      programId: dexProgramId,\n    }),\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: bids.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(65536 + 12),\n      space: 65536 + 12,\n      programId: dexProgramId,\n    }),\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: asks.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(65536 + 12),\n      space: 65536 + 12,\n      programId: dexProgramId,\n    }),\n    DexInstructions.initializeMarket({\n      market: market.publicKey,\n      requestQueue: requestQueue.publicKey,\n      eventQueue: eventQueue.publicKey,\n      bids: bids.publicKey,\n      asks: asks.publicKey,\n      baseVault: baseVault.publicKey,\n      quoteVault: quoteVault.publicKey,\n      baseMint,\n      quoteMint,\n      baseLotSize: new BN(baseLotSize),\n      quoteLotSize: new BN(quoteLotSize),\n      feeRateBps,\n      vaultSignerNonce,\n      quoteDustThreshold,\n      programId: dexProgramId,\n      authority: undefined,\n    }),\n  );\n\n  const signedTransactions = await signTransactions({\n    transactionsAndSigners: [\n      { transaction: tx1, signers: [baseVault, quoteVault] },\n      {\n        transaction: tx2,\n        signers: [market, requestQueue, eventQueue, bids, asks],\n      },\n    ],\n    wallet,\n    connection,\n  });\n  for (let signedTransaction of signedTransactions) {\n    await sendSignedTransaction({\n      signedTransaction,\n      connection,\n    });\n  }\n\n  return market.publicKey;\n}\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nconst DEFAULT_TIMEOUT = 15000;\n\nexport async function sendTransaction({\n  transaction,\n  wallet,\n  signers = [],\n  connection,\n  sendingMessage = 'Sending transaction...',\n  sentMessage = 'Transaction sent',\n  successMessage = 'Transaction confirmed',\n  timeout = DEFAULT_TIMEOUT,\n  sendNotification = true,\n}: {\n  transaction: Transaction;\n  wallet: WalletAdapter;\n  signers?: Array<Account>;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n  sendNotification?: boolean;\n}) {\n  const signedTransaction = await signTransaction({\n    transaction,\n    wallet,\n    signers,\n    connection,\n  });\n  return await sendSignedTransaction({\n    signedTransaction,\n    connection,\n    sendingMessage,\n    sentMessage,\n    successMessage,\n    timeout,\n    sendNotification,\n  });\n}\n\nexport async function signTransaction({\n  transaction,\n  wallet,\n  signers = [],\n  connection,\n}: {\n  transaction: Transaction;\n  wallet: WalletAdapter;\n  signers?: Array<Account>;\n  connection: Connection;\n}) {\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash('max')\n  ).blockhash;\n  transaction.setSigners(wallet.publicKey, ...signers.map((s) => s.publicKey));\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  return await wallet.signTransaction(transaction);\n}\n\nexport async function signTransactions({\n  transactionsAndSigners,\n  wallet,\n  connection,\n}: {\n  transactionsAndSigners: {\n    transaction: Transaction;\n    signers?: Array<Account>;\n  }[];\n  wallet: WalletAdapter;\n  connection: Connection;\n}) {\n  const blockhash = (await connection.getRecentBlockhash('max')).blockhash;\n  transactionsAndSigners.forEach(({ transaction, signers = [] }) => {\n    transaction.recentBlockhash = blockhash;\n    transaction.setSigners(\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey),\n    );\n    if (signers?.length > 0) {\n      transaction.partialSign(...signers);\n    }\n  });\n  return await wallet.signAllTransactions(\n    transactionsAndSigners.map(({ transaction }) => transaction),\n  );\n}\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  sendingMessage = 'Sending transaction...',\n  sentMessage = 'Transaction sent',\n  successMessage = 'Transaction confirmed',\n  timeout = DEFAULT_TIMEOUT,\n  sendNotification = true,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n  sendNotification?: boolean;\n}): Promise<string> {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  if (sendNotification) {\n    notify({ message: sendingMessage });\n  }\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n  if (sendNotification) {\n    notify({ message: sentMessage, type: 'success', txid });\n  }\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(300);\n    }\n  })();\n  try {\n    await awaitTransactionSignatureConfirmation(txid, timeout, connection);\n  } catch (err) {\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) { }\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      let parsedError;\n      if (\n        typeof simulateResult.err == 'object' &&\n        'InstructionError' in simulateResult.err\n      ) {\n        const parsedErrorInfo = parseInstructionErrorResponse(\n          signedTransaction,\n          simulateResult.err['InstructionError'],\n        );\n        parsedError = parsedErrorInfo.error;\n      } else {\n        parsedError = JSON.stringify(simulateResult.err);\n      }\n      throw new Error(parsedError);\n    }\n    throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n  if (sendNotification) {\n    notify({ message: successMessage, type: 'success', txid });\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return txid;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n) {\n  let done = false;\n  const result = await new Promise((resolve, reject) => {\n    (async () => {\n      setTimeout(() => {\n        if (done) {\n          return;\n        }\n        done = true;\n        console.log('Timed out for txid', txid);\n        reject({ timeout: true });\n      }, timeout);\n      try {\n        connection.onSignature(\n          txid,\n          (result) => {\n            console.log('WS confirmed', txid, result);\n            done = true;\n            if (result.err) {\n              reject(result.err);\n            } else {\n              resolve(result);\n            }\n          },\n          'recent',\n        );\n        console.log('Set up WS connection', txid);\n      } catch (e) {\n        done = true;\n        console.log('WS error in setup', txid, e);\n      }\n      while (!done) {\n        // eslint-disable-next-line no-loop-func\n        (async () => {\n          try {\n            const signatureStatuses = await connection.getSignatureStatuses([\n              txid,\n            ]);\n            const result = signatureStatuses && signatureStatuses.value[0];\n            if (!done) {\n              if (!result) {\n                console.log('REST null result for', txid, result);\n              } else if (result.err) {\n                console.log('REST error for', txid, result);\n                done = true;\n                reject(result.err);\n              } else if (!result.confirmations) {\n                console.log('REST no confirmations for', txid, result);\n              } else {\n                console.log('REST confirmation for', txid, result);\n                done = true;\n                resolve(result);\n              }\n            }\n          } catch (e) {\n            if (!done) {\n              console.log('REST connection error: txid', txid, e);\n            }\n          }\n        })();\n        await sleep(300);\n      }\n    })();\n  });\n  done = true;\n  return result;\n}\n\nfunction mergeTransactions(transactions: (Transaction | undefined)[]) {\n  const transaction = new Transaction();\n  transactions\n    .filter((t): t is Transaction => t !== undefined)\n    .forEach((t) => {\n      transaction.add(t);\n    });\n  return transaction;\n}\n\nfunction jsonRpcResult(resultDescription: any) {\n  const jsonRpcVersion = struct.literal('2.0');\n  return struct.union([\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'any',\n    }),\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'null?',\n      result: resultDescription,\n    }),\n  ]);\n}\n\nfunction jsonRpcResultAndContext(resultDescription: any) {\n  return jsonRpcResult({\n    context: struct({\n      slot: 'number',\n    }),\n    value: resultDescription,\n  });\n}\n\nconst AccountInfoResult = struct({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: 'any',\n  rentEpoch: 'number?',\n});\n\nexport const GetMultipleAccountsAndContextRpcResult = jsonRpcResultAndContext(\n  struct.array([struct.union(['null', AccountInfoResult])]),\n);\n\nexport async function getMultipleSolanaAccounts(\n  connection: Connection,\n  publicKeys: PublicKey[],\n): Promise<\n  RpcResponseAndContext<{ [key: string]: AccountInfo<Buffer> | null }>\n> {\n  const args = [publicKeys.map((k) => k.toBase58()), { commitment: 'recent' }];\n  // @ts-ignore\n  const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\n  const res = GetMultipleAccountsAndContextRpcResult(unsafeRes);\n  if (res.error) {\n    throw new Error(\n      'failed to get info about accounts ' +\n      publicKeys.map((k) => k.toBase58()).join(', ') +\n      ': ' +\n      res.error.message,\n    );\n  }\n  assert(typeof res.result !== 'undefined');\n  const accounts: Array<{\n    executable: any;\n    owner: PublicKey;\n    lamports: any;\n    data: Buffer;\n  } | null> = [];\n  for (const account of res.result.value) {\n    let value: {\n      executable: any;\n      owner: PublicKey;\n      lamports: any;\n      data: Buffer;\n    } | null = null;\n    if (res.result.value) {\n      const { executable, owner, lamports, data } = account;\n      assert(data[1] === 'base64');\n      value = {\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n        data: Buffer.from(data[0], 'base64'),\n      };\n    }\n    accounts.push(value);\n  }\n  return {\n    context: {\n      slot: res.result.context.slot,\n    },\n    value: Object.fromEntries(\n      accounts.map((account, i) => [publicKeys[i].toBase58(), account]),\n    ),\n  };\n}\n\n/** Copy of Connection.simulateTransaction that takes a commitment parameter. */\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n"]},"metadata":{},"sourceType":"module"}