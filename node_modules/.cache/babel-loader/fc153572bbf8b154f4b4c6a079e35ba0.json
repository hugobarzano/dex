{"ast":null,"code":"var _jsxFileName = \"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/components/UserInfoTable/BalancesTable.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button } from 'antd';\nimport React from 'react';\nimport { useTokenAccounts, getSelectedTokenAccountForMint } from '../../utils/markets';\nimport DataTable from '../layout/DataTable';\nimport { useSendConnection } from '../../utils/connection';\nimport { useWallet } from '../../utils/wallet';\nimport { settleFunds } from '../../utils/send';\nimport { notify } from '../../utils/notifications';\nimport { useReferrer } from '../../utils/referrer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BalancesTable(_ref) {\n  _s();\n\n  let {\n    balances,\n    showMarket,\n    hideWalletBalance,\n    onSettleSuccess\n  } = _ref;\n  const [accounts] = useTokenAccounts();\n  const connection = useSendConnection();\n  const {\n    wallet\n  } = useWallet();\n  const {\n    usdcRef,\n    usdtRef\n  } = useReferrer();\n\n  async function onSettleFunds(market, openOrders) {\n    try {\n      await settleFunds({\n        market,\n        openOrders,\n        connection,\n        wallet,\n        baseCurrencyAccount: getSelectedTokenAccountForMint(accounts, market === null || market === void 0 ? void 0 : market.baseMintAddress),\n        quoteCurrencyAccount: getSelectedTokenAccountForMint(accounts, market === null || market === void 0 ? void 0 : market.quoteMintAddress),\n        usdcRef,\n        usdtRef\n      });\n    } catch (e) {\n      notify({\n        message: 'Error settling funds',\n        description: e.message,\n        type: 'error'\n      });\n      return;\n    }\n\n    onSettleSuccess && onSettleSuccess();\n  }\n\n  const columns = [showMarket ? {\n    title: 'Market',\n    dataIndex: 'marketName',\n    key: 'marketName'\n  } : null, {\n    title: 'Coin',\n    dataIndex: 'coin',\n    key: 'coin'\n  }, hideWalletBalance ? null : {\n    title: 'Wallet Balance',\n    dataIndex: 'wallet',\n    key: 'wallet'\n  }, {\n    title: 'Orders',\n    dataIndex: 'orders',\n    key: 'orders'\n  }, {\n    title: 'Unsettled',\n    dataIndex: 'unsettled',\n    key: 'unsettled'\n  }, {\n    key: 'action',\n    render: _ref2 => {\n      let {\n        market,\n        openOrders,\n        marketName\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'right'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          ghost: true,\n          style: {\n            marginRight: 12\n          },\n          onClick: () => onSettleFunds(market, openOrders),\n          children: [\"Settle \", marketName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this);\n    }\n  }].filter(x => x);\n  return /*#__PURE__*/_jsxDEV(DataTable, {\n    emptyLabel: \"No balances\",\n    dataSource: balances,\n    columns: columns,\n    pagination: false\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BalancesTable, \"npG1m/pVnry6TBHdEtd7/0sU7bU=\", false, function () {\n  return [useTokenAccounts, useSendConnection, useWallet, useReferrer];\n});\n\n_c = BalancesTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"BalancesTable\");","map":{"version":3,"sources":["/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/components/UserInfoTable/BalancesTable.jsx"],"names":["Button","React","useTokenAccounts","getSelectedTokenAccountForMint","DataTable","useSendConnection","useWallet","settleFunds","notify","useReferrer","BalancesTable","balances","showMarket","hideWalletBalance","onSettleSuccess","accounts","connection","wallet","usdcRef","usdtRef","onSettleFunds","market","openOrders","baseCurrencyAccount","baseMintAddress","quoteCurrencyAccount","quoteMintAddress","e","message","description","type","columns","title","dataIndex","key","render","marketName","textAlign","marginRight","filter","x"],"mappings":"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","sourcesContent":["import { Button } from 'antd';\nimport React from 'react';\nimport {\n  useTokenAccounts,\n  getSelectedTokenAccountForMint,\n} from '../../utils/markets';\nimport DataTable from '../layout/DataTable';\nimport { useSendConnection } from '../../utils/connection';\nimport { useWallet } from '../../utils/wallet';\nimport { settleFunds } from '../../utils/send';\nimport { notify } from '../../utils/notifications';\nimport { useReferrer } from '../../utils/referrer';\n\nexport default function BalancesTable({\n  balances,\n  showMarket,\n  hideWalletBalance,\n  onSettleSuccess,\n}) {\n  const [accounts] = useTokenAccounts();\n  const connection = useSendConnection();\n  const { wallet } = useWallet();\n  const { usdcRef, usdtRef } = useReferrer();\n\n  async function onSettleFunds(market, openOrders) {\n    try {\n      await settleFunds({\n        market,\n        openOrders,\n        connection,\n        wallet,\n        baseCurrencyAccount: getSelectedTokenAccountForMint(\n          accounts,\n          market?.baseMintAddress,\n        ),\n        quoteCurrencyAccount: getSelectedTokenAccountForMint(\n          accounts,\n          market?.quoteMintAddress,\n        ),\n        usdcRef,\n        usdtRef,\n      });\n    } catch (e) {\n      notify({\n        message: 'Error settling funds',\n        description: e.message,\n        type: 'error',\n      });\n      return;\n    }\n    onSettleSuccess && onSettleSuccess();\n  }\n\n  const columns = [\n    showMarket\n      ? {\n          title: 'Market',\n          dataIndex: 'marketName',\n          key: 'marketName',\n        }\n      : null,\n    {\n      title: 'Coin',\n      dataIndex: 'coin',\n      key: 'coin',\n    },\n    hideWalletBalance\n      ? null\n      : {\n          title: 'Wallet Balance',\n          dataIndex: 'wallet',\n          key: 'wallet',\n        },\n    {\n      title: 'Orders',\n      dataIndex: 'orders',\n      key: 'orders',\n    },\n    {\n      title: 'Unsettled',\n      dataIndex: 'unsettled',\n      key: 'unsettled',\n    },\n    {\n      key: 'action',\n      render: ({ market, openOrders, marketName }) => (\n        <div style={{ textAlign: 'right' }}>\n          <Button\n            ghost\n            style={{ marginRight: 12 }}\n            onClick={() => onSettleFunds(market, openOrders)}\n          >\n            Settle {marketName}\n          </Button>\n        </div>\n      ),\n    },\n  ].filter((x) => x);\n  return (\n    <DataTable\n      emptyLabel=\"No balances\"\n      dataSource={balances}\n      columns={columns}\n      pagination={false}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}