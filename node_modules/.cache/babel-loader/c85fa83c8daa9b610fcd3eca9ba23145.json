{"ast":null,"code":"import _objectSpread from \"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport semver from \"semver\";\n/**\n * The USB product IDs will be defined as MMII, encoding a model (MM) and an interface bitfield (II)\n *\n ** Model\n * Ledger Nano S : 0x10\n * Ledger Blue : 0x00\n * Ledger Nano X : 0x40\n *\n ** Interface support bitfield\n * Generic HID : 0x01\n * Keyboard HID : 0x02\n * U2F : 0x04\n * CCID : 0x08\n * WebUSB : 0x10\n */\n\nexport var IIGenericHID = 0x01;\nexport var IIKeyboardHID = 0x02;\nexport var IIU2F = 0x04;\nexport var IICCID = 0x08;\nexport var IIWebUSB = 0x10;\nvar devices = {\n  blue: {\n    id: \"blue\",\n    productName: \"Ledger Blue\",\n    productIdMM: 0x00,\n    legacyUsbProductId: 0x0000,\n    usbOnly: true,\n    memorySize: 480 * 1024,\n    blockSize: 4 * 1024,\n    getBlockSize: function getBlockSize(_firwareVersion) {\n      return 4 * 1024;\n    }\n  },\n  nanoS: {\n    id: \"nanoS\",\n    productName: \"Ledger Nano S\",\n    productIdMM: 0x10,\n    legacyUsbProductId: 0x0001,\n    usbOnly: true,\n    memorySize: 320 * 1024,\n    blockSize: 4 * 1024,\n    getBlockSize: function getBlockSize(firmwareVersion) {\n      return semver.lt(semver.coerce(firmwareVersion), \"2.0.0\") ? 4 * 1024 : 2 * 1024;\n    }\n  },\n  nanoX: {\n    id: \"nanoX\",\n    productName: \"Ledger Nano X\",\n    productIdMM: 0x40,\n    legacyUsbProductId: 0x0004,\n    usbOnly: false,\n    memorySize: 2 * 1024 * 1024,\n    blockSize: 4 * 1024,\n    getBlockSize: function getBlockSize(_firwareVersion) {\n      return 4 * 1024;\n    },\n    bluetoothSpec: [{\n      // this is the legacy one (prototype version). we will eventually drop it.\n      serviceUuid: \"d973f2e0-b19e-11e2-9e96-0800200c9a66\",\n      notifyUuid: \"d973f2e1-b19e-11e2-9e96-0800200c9a66\",\n      writeUuid: \"d973f2e2-b19e-11e2-9e96-0800200c9a66\"\n    }, {\n      serviceUuid: \"13d63400-2c97-0004-0000-4c6564676572\",\n      notifyUuid: \"13d63400-2c97-0004-0001-4c6564676572\",\n      writeUuid: \"13d63400-2c97-0004-0002-4c6564676572\"\n    }]\n  }\n};\nvar productMap = {\n  Blue: \"blue\",\n  \"Nano S\": \"nanoS\",\n  \"Nano X\": \"nanoX\"\n}; // $FlowFixMe\n\nvar devicesList = Object.values(devices);\n/**\n *\n */\n\nexport var ledgerUSBVendorId = 0x2c97;\n/**\n *\n */\n\nexport var getDeviceModel = function getDeviceModel(id) {\n  var info = devices[id];\n  if (!info) throw new Error(\"device '\" + id + \"' does not exist\");\n  return info;\n};\n/**\n *\n */\n\nexport var identifyUSBProductId = function identifyUSBProductId(usbProductId) {\n  var legacy = devicesList.find(function (d) {\n    return d.legacyUsbProductId === usbProductId;\n  });\n  if (legacy) return legacy;\n  var mm = usbProductId >> 8;\n  var deviceModel = devicesList.find(function (d) {\n    return d.productIdMM === mm;\n  });\n  return deviceModel;\n};\nexport var identifyProductName = function identifyProductName(productName) {\n  var productId = productMap[productName];\n  var deviceModel = devicesList.find(function (d) {\n    return d.id === productId;\n  });\n  return deviceModel;\n};\nvar bluetoothServices = [];\nvar serviceUuidToInfos = {};\n\nfor (var id in devices) {\n  var deviceModel = devices[id];\n  var bluetoothSpec = deviceModel.bluetoothSpec;\n\n  if (bluetoothSpec) {\n    for (var i = 0; i < bluetoothSpec.length; i++) {\n      var spec = bluetoothSpec[i];\n      bluetoothServices.push(spec.serviceUuid);\n      serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[spec.serviceUuid.replace(/-/g, \"\")] = _objectSpread({\n        deviceModel: deviceModel\n      }, spec);\n    }\n  }\n}\n/**\n *\n */\n\n\nexport var getBluetoothServiceUuids = function getBluetoothServiceUuids() {\n  return bluetoothServices;\n};\n/**\n *\n */\n\nexport var getInfosForServiceUuid = function getInfosForServiceUuid(uuid) {\n  return serviceUuidToInfos[uuid.toLowerCase()];\n};\n/**\n *\n */","map":{"version":3,"sources":["../src/index.js"],"names":["IIGenericHID","IIKeyboardHID","IIU2F","IICCID","IIWebUSB","devices","blue","id","productName","productIdMM","legacyUsbProductId","usbOnly","memorySize","blockSize","getBlockSize","_firwareVersion","nanoS","firmwareVersion","semver","nanoX","bluetoothSpec","serviceUuid","notifyUuid","writeUuid","productMap","Blue","devicesList","Object","ledgerUSBVendorId","getDeviceModel","info","identifyUSBProductId","usbProductId","legacy","d","mm","deviceModel","identifyProductName","productId","bluetoothServices","serviceUuidToInfos","i","spec","getBluetoothServiceUuids","getInfosForServiceUuid","uuid"],"mappings":";AAEA,OAAA,MAAA,MAAA,QAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMA,YAAY,GAAlB,IAAA;AACP,OAAO,IAAMC,aAAa,GAAnB,IAAA;AACP,OAAO,IAAMC,KAAK,GAAX,IAAA;AACP,OAAO,IAAMC,MAAM,GAAZ,IAAA;AACP,OAAO,IAAMC,QAAQ,GAAd,IAAA;AAEP,IAAMC,OAAO,GAAG;AACdC,EAAAA,IAAI,EAAE;AACJC,IAAAA,EAAE,EADE,MAAA;AAEJC,IAAAA,WAAW,EAFP,aAAA;AAGJC,IAAAA,WAAW,EAHP,IAAA;AAIJC,IAAAA,kBAAkB,EAJd,MAAA;AAKJC,IAAAA,OAAO,EALH,IAAA;AAMJC,IAAAA,UAAU,EAAE,MANR,IAAA;AAOJC,IAAAA,SAAS,EAAE,IAPP,IAAA;AAQJC,IAAAA,YAAY,EAAGC,sBAAAA,eAAD;AAAA,aAAqC,IAAI,IAAzC;AAAA;AARV,GADQ;AAWdC,EAAAA,KAAK,EAAE;AACLT,IAAAA,EAAE,EADG,OAAA;AAELC,IAAAA,WAAW,EAFN,eAAA;AAGLC,IAAAA,WAAW,EAHN,IAAA;AAILC,IAAAA,kBAAkB,EAJb,MAAA;AAKLC,IAAAA,OAAO,EALF,IAAA;AAMLC,IAAAA,UAAU,EAAE,MANP,IAAA;AAOLC,IAAAA,SAAS,EAAE,IAPN,IAAA;AAQLC,IAAAA,YAAY,EAAGG,sBAAAA,eAAD;AAAA,aACZC,MAAM,CAANA,EAAAA,CAAUA,MAAM,CAANA,MAAAA,CAAVA,eAAUA,CAAVA,EAAAA,OAAAA,IAAqD,IAArDA,IAAAA,GAAgE,IAAI,IADxD;AAAA;AART,GAXO;AAsBdC,EAAAA,KAAK,EAAE;AACLZ,IAAAA,EAAE,EADG,OAAA;AAELC,IAAAA,WAAW,EAFN,eAAA;AAGLC,IAAAA,WAAW,EAHN,IAAA;AAILC,IAAAA,kBAAkB,EAJb,MAAA;AAKLC,IAAAA,OAAO,EALF,KAAA;AAMLC,IAAAA,UAAU,EAAE,IAAA,IAAA,GANP,IAAA;AAOLC,IAAAA,SAAS,EAAE,IAPN,IAAA;AAQLC,IAAAA,YAAY,EAAGC,sBAAAA,eAAD;AAAA,aAAqC,IAR9C,IAQS;AAAA,KART;AASLK,IAAAA,aAAa,EAAE,CACb;AACE;AACAC,MAAAA,WAAW,EAFb,sCAAA;AAGEC,MAAAA,UAAU,EAHZ,sCAAA;AAIEC,MAAAA,SAAS,EAAE;AAJb,KADa,EAOb;AACEF,MAAAA,WAAW,EADb,sCAAA;AAEEC,MAAAA,UAAU,EAFZ,sCAAA;AAGEC,MAAAA,SAAS,EAAE;AAHb,KAPa;AATV;AAtBO,CAAhB;AA+CA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,IAAI,EADa,MAAA;AAEjB,YAFiB,OAAA;AAGjB,YAAU;AAHO,CAAnB,C,CAMA;;AACA,IAAMC,WAA0B,GAAGC,MAAM,CAANA,MAAAA,CAAnC,OAAmCA,CAAnC;AAEA;AACA;AACA;;AACA,OAAO,IAAMC,iBAAiB,GAAvB,MAAA;AAEP;AACA;AACA;;AACA,OAAO,IAAMC,cAAc,GAAItB,SAAlBsB,cAAkBtB,CAAAA,EAAD,EAAoC;AAChE,MAAMuB,IAAI,GAAGzB,OAAO,CAApB,EAAoB,CAApB;AACA,MAAI,CAAJ,IAAA,EAAW,MAAM,IAAA,KAAA,CAAU,aAAA,EAAA,GAAhB,kBAAM,CAAN;AACX,SAAA,IAAA;AAHK,CAAA;AAMP;AACA;AACA;;AACA,OAAO,IAAM0B,oBAAoB,GAAIC,SAAxBD,oBAAwBC,CAAAA,YAAD,EAAwC;AAC1E,MAAMC,MAAM,GAAGP,WAAW,CAAXA,IAAAA,CAAkBQ,UAAAA,CAAD;AAAA,WAAOA,CAAC,CAADA,kBAAAA,KAAvC,YAAgC;AAAA,GAAjBR,CAAf;AACA,MAAA,MAAA,EAAY,OAAA,MAAA;AAEZ,MAAMS,EAAE,GAAGH,YAAY,IAAvB,CAAA;AACA,MAAMI,WAAW,GAAGV,WAAW,CAAXA,IAAAA,CAAkBQ,UAAAA,CAAD;AAAA,WAAOA,CAAC,CAADA,WAAAA,KAA5C,EAAqC;AAAA,GAAjBR,CAApB;AACA,SAAA,WAAA;AANK,CAAA;AASP,OAAO,IAAMW,mBAAmB,GAAI7B,SAAvB6B,mBAAuB7B,CAAAA,WAAD,EAAuC;AACxE,MAAM8B,SAAS,GAAGd,UAAU,CAA5B,WAA4B,CAA5B;AACA,MAAMY,WAAW,GAAGV,WAAW,CAAXA,IAAAA,CAAkBQ,UAAAA,CAAD;AAAA,WAAOA,CAAC,CAADA,EAAAA,KAA5C,SAAqC;AAAA,GAAjBR,CAApB;AAEA,SAAA,WAAA;AAJK,CAAA;AAOP,IAAMa,iBAA2B,GAAjC,EAAA;AACA,IAAMC,kBAEL,GAFD,EAAA;;AAIA,KAAK,IAAL,EAAA,IAAA,OAAA,EAAwB;AACtB,MAAMJ,WAAW,GAAG/B,OAAO,CAA3B,EAA2B,CAA3B;AACA,MAAQe,aAAR,GAAA,WAAA,CAAQA,aAAR;;AACA,MAAA,aAAA,EAAmB;AACjB,SAAK,IAAIqB,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGrB,aAAa,CAAjC,MAAA,EAA0CqB,CAA1C,EAAA,EAA+C;AAC7C,UAAMC,IAAI,GAAGtB,aAAa,CAA1B,CAA0B,CAA1B;AACAmB,MAAAA,iBAAiB,CAAjBA,IAAAA,CAAuBG,IAAI,CAA3BH,WAAAA;AACAC,MAAAA,kBAAkB,CAACE,IAAI,CAAvBF,WAAkB,CAAlBA,GAAuCA,kBAAkB,CACvDE,IAAI,CAAJA,WAAAA,CAAAA,OAAAA,CAAAA,IAAAA,EADqCF,EACrCE,CADuD,CAAlBF;AAEjCJ,QAAAA,WAAF,EAAEA;AAFiCI,SAEjBE,IAFiBF,CAAvCA;AAGD;AACF;AACF;AAED;AACA;AACA;;;AACA,OAAO,IAAMG,wBAAwB,GAAG,SAA3BA,wBAA2B;AAAA,SAAjC,iBAAiC;AAAA,CAAjC;AAEP;AACA;AACA;;AACA,OAAO,IAAMC,sBAAsB,GAAIC,SAA1BD,sBAA0BC,CAAAA,IAAD;AAAA,SACpCL,kBAAkB,CAACK,IAAI,CADlB,WACcA,EAAD,CADkB;AAAA,CAA/B;AAGP;AACA;AACA","sourcesContent":["// @flow\n\nimport semver from \"semver\";\n\n/**\n * The USB product IDs will be defined as MMII, encoding a model (MM) and an interface bitfield (II)\n *\n ** Model\n * Ledger Nano S : 0x10\n * Ledger Blue : 0x00\n * Ledger Nano X : 0x40\n *\n ** Interface support bitfield\n * Generic HID : 0x01\n * Keyboard HID : 0x02\n * U2F : 0x04\n * CCID : 0x08\n * WebUSB : 0x10\n */\n\nexport const IIGenericHID = 0x01;\nexport const IIKeyboardHID = 0x02;\nexport const IIU2F = 0x04;\nexport const IICCID = 0x08;\nexport const IIWebUSB = 0x10;\n\nconst devices = {\n  blue: {\n    id: \"blue\",\n    productName: \"Ledger Blue\",\n    productIdMM: 0x00,\n    legacyUsbProductId: 0x0000,\n    usbOnly: true,\n    memorySize: 480 * 1024,\n    blockSize: 4 * 1024,\n    getBlockSize: (_firwareVersion: string): number => 4 * 1024,\n  },\n  nanoS: {\n    id: \"nanoS\",\n    productName: \"Ledger Nano S\",\n    productIdMM: 0x10,\n    legacyUsbProductId: 0x0001,\n    usbOnly: true,\n    memorySize: 320 * 1024,\n    blockSize: 4 * 1024,\n    getBlockSize: (firmwareVersion: string): number =>\n      semver.lt(semver.coerce(firmwareVersion), \"2.0.0\") ? 4 * 1024 : 2 * 1024,\n  },\n  nanoX: {\n    id: \"nanoX\",\n    productName: \"Ledger Nano X\",\n    productIdMM: 0x40,\n    legacyUsbProductId: 0x0004,\n    usbOnly: false,\n    memorySize: 2 * 1024 * 1024,\n    blockSize: 4 * 1024,\n    getBlockSize: (_firwareVersion: string): number => 4 * 1024,\n    bluetoothSpec: [\n      {\n        // this is the legacy one (prototype version). we will eventually drop it.\n        serviceUuid: \"d973f2e0-b19e-11e2-9e96-0800200c9a66\",\n        notifyUuid: \"d973f2e1-b19e-11e2-9e96-0800200c9a66\",\n        writeUuid: \"d973f2e2-b19e-11e2-9e96-0800200c9a66\",\n      },\n      {\n        serviceUuid: \"13d63400-2c97-0004-0000-4c6564676572\",\n        notifyUuid: \"13d63400-2c97-0004-0001-4c6564676572\",\n        writeUuid: \"13d63400-2c97-0004-0002-4c6564676572\",\n      },\n    ],\n  },\n};\n\nconst productMap = {\n  Blue: \"blue\",\n  \"Nano S\": \"nanoS\",\n  \"Nano X\": \"nanoX\",\n};\n\n// $FlowFixMe\nconst devicesList: DeviceModel[] = Object.values(devices);\n\n/**\n *\n */\nexport const ledgerUSBVendorId = 0x2c97;\n\n/**\n *\n */\nexport const getDeviceModel = (id: DeviceModelId): DeviceModel => {\n  const info = devices[id];\n  if (!info) throw new Error(\"device '\" + id + \"' does not exist\");\n  return info;\n};\n\n/**\n *\n */\nexport const identifyUSBProductId = (usbProductId: number): ?DeviceModel => {\n  const legacy = devicesList.find((d) => d.legacyUsbProductId === usbProductId);\n  if (legacy) return legacy;\n\n  const mm = usbProductId >> 8;\n  const deviceModel = devicesList.find((d) => d.productIdMM === mm);\n  return deviceModel;\n};\n\nexport const identifyProductName = (productName: string): ?DeviceModel => {\n  const productId = productMap[productName];\n  const deviceModel = devicesList.find((d) => d.id === productId);\n\n  return deviceModel;\n};\n\nconst bluetoothServices: string[] = [];\nconst serviceUuidToInfos: {\n  [_: string]: BluetoothInfos,\n} = {};\n\nfor (let id in devices) {\n  const deviceModel = devices[id];\n  const { bluetoothSpec } = deviceModel;\n  if (bluetoothSpec) {\n    for (let i = 0; i < bluetoothSpec.length; i++) {\n      const spec = bluetoothSpec[i];\n      bluetoothServices.push(spec.serviceUuid);\n      serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[\n        spec.serviceUuid.replace(/-/g, \"\")\n      ] = { deviceModel, ...spec };\n    }\n  }\n}\n\n/**\n *\n */\nexport const getBluetoothServiceUuids = () => bluetoothServices;\n\n/**\n *\n */\nexport const getInfosForServiceUuid = (uuid: string): ?BluetoothInfos =>\n  serviceUuidToInfos[uuid.toLowerCase()];\n\n/**\n *\n */\nexport type DeviceModelId = $Keys<typeof devices>;\n\n/**\n *\n */\nexport type DeviceModel = {\n  id: DeviceModelId,\n  productName: string,\n  productIdMM: number,\n  legacyUsbProductId: number,\n  usbOnly: boolean,\n  memorySize: number,\n  // blockSize: number, // THIS FIELD IS DEPRECATED, use getBlockSize\n  getBlockSize: (firmwareVersion: string) => number,\n  bluetoothSpec?: Array<{\n    serviceUuid: string,\n    writeUuid: string,\n    notifyUuid: string,\n  }>,\n};\n\n/**\n *\n */\nexport type BluetoothInfos = {\n  deviceModel: DeviceModel,\n  serviceUuid: string,\n  writeUuid: string,\n  notifyUuid: string,\n};\n"]},"metadata":{},"sourceType":"module"}