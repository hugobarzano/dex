{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PoolInstructions = exports.LQD_FEE_OWNER_ADDRESS = exports.RETBUF_PROGRAM_ID = void 0;\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar schema_1 = require(\"./schema\");\n\nvar token_instructions_1 = require(\"@project-serum/serum/lib/token-instructions\");\n\nexports.RETBUF_PROGRAM_ID = new web3_js_1.PublicKey( // TODO: switch to shmem4EWT2sPdVGvTZCzXXRAURL9G5vpPxNwSeKhHUL once that exists on mainnet\n'BYVBQ71CYArTNbEpDnsPCjcoWkJL9181xvj52kfyFFHg');\nexports.LQD_FEE_OWNER_ADDRESS = new web3_js_1.PublicKey('3LTvJCPiPSMjX1kBJ6ZfEhn4G2hM46aJ1yEZsk8i12TK');\n/**\n * Low-level API for constructing and encoding pool instructions.\n *\n * For a higher-level API that handles initializing accounts and approving token\n * transfers, use {@link PoolTransactions}.\n */\n\nvar PoolInstructions = /*#__PURE__*/function () {\n  function PoolInstructions() {\n    _classCallCheck(this, PoolInstructions);\n  }\n\n  _createClass(PoolInstructions, null, [{\n    key: \"initialize\",\n    value:\n    /**\n     * Instruction to initialize a pool.\n     *\n     * @param poolProgram Program ID of the pool program.\n     * @param poolAccount Newly-created account to hold the pool state. Must be\n     * owned by the pool program.\n     * @param poolTokenMint spl-token mint address for the pool token.\n     * @param poolName User-friendly name for the pool.\n     * @param vaults spl-token account for each of the assets in the pool.\n     * @param vaultSigner Mint authority for `poolTokenMint` and owner of\n     * `poolTokenMint`.\n     * @param vaultSignerNonce Nonce used to generate `vaultSigner`.\n     * @param lqdFeeAccount Pool token spl-token account owned by the LQD fee owner.\n     * @param initializerFeeAccount Pool token spl-token account owned by the pool initializer.\n     * @param feeRate Fee rate for creations/redemptions times 10^6.\n     * @param additionalAccounts Any custom pool-specific accounts needed to\n     * initialize the pool.\n     * @param customData Any custom pool-specific data needed to initialize the pool\n     */\n    function initialize(poolProgram, poolAccount, poolTokenMint, poolName, vaults, vaultSigner, vaultSignerNonce, lqdFeeAccount, initializerFeeAccount, feeRate, additionalAccounts, customData) {\n      return new web3_js_1.TransactionInstruction({\n        keys: [{\n          pubkey: poolAccount,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: poolTokenMint,\n          isSigner: false,\n          isWritable: true\n        }].concat(_toConsumableArray(vaults.map(function (vaultAddress) {\n          return {\n            pubkey: vaultAddress,\n            isSigner: false,\n            isWritable: true\n          };\n        })), [{\n          pubkey: vaultSigner,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: lqdFeeAccount,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: initializerFeeAccount,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }], _toConsumableArray(additionalAccounts !== null && additionalAccounts !== void 0 ? additionalAccounts : [])),\n        programId: poolProgram,\n        data: schema_1.encodePoolRequest({\n          initialize: {\n            vaultSignerNonce: vaultSignerNonce,\n            assetsLength: vaults.length,\n            poolName: poolName,\n            feeRate: feeRate,\n            customData: customData !== null && customData !== void 0 ? customData : Buffer.alloc(0)\n          }\n        })\n      });\n    }\n    /**\n     * Instruction to get the expected basket for a {@link PoolAction}.\n     *\n     * For creations, the basket is the quantity of each asset\n     * that need to be sent to the pool to process the creation.  For redemptions\n     * and swaps, the basket is the quantity of each asset that will be\n     * transferred from the pool to the user after the redemption or swap.\n     *\n     * Negative quantities will cause tokens to be transferred in the opposite\n     * direction.\n     *\n     * @param pool\n     * @param action Creation, redemption, or swap.\n     * @param retbufAccount Account to which the basket will be written. Must be\n     * owned by the retbuf program.\n     */\n\n  }, {\n    key: \"getBasket\",\n    value: function getBasket(pool, action, retbufAccount) {\n      return new web3_js_1.TransactionInstruction({\n        keys: [{\n          pubkey: pool.address,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: pool.state.poolTokenMint,\n          isSigner: false,\n          isWritable: false\n        }].concat(_toConsumableArray(pool.state.assets.map(function (assetInfo) {\n          return {\n            pubkey: assetInfo.vaultAddress,\n            isSigner: false,\n            isWritable: false\n          };\n        })), [{\n          pubkey: pool.state.vaultSigner,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: retbufAccount,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: exports.RETBUF_PROGRAM_ID,\n          isSigner: false,\n          isWritable: false\n        }], _toConsumableArray(pool.state.accountParams.map(function (paramInfo) {\n          return {\n            pubkey: paramInfo.address,\n            isSigner: false,\n            isWritable: false\n          };\n        }))),\n        programId: pool.program,\n        data: schema_1.encodePoolRequest({\n          getBasket: action\n        })\n      });\n    }\n    /**\n     * Instruction to execute a creation, redemption, or swap.\n     *\n     * @param pool\n     * @param action Creation, redemption, or swap.\n     * @param user Token accounts to pull funds from or send funds to.\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute(pool, action, user) {\n      var _a;\n\n      return new web3_js_1.TransactionInstruction({\n        keys: [{\n          pubkey: pool.address,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: pool.state.poolTokenMint,\n          isSigner: false,\n          isWritable: true\n        }].concat(_toConsumableArray(pool.state.assets.map(function (assetInfo) {\n          return {\n            pubkey: assetInfo.vaultAddress,\n            isSigner: false,\n            isWritable: true\n          };\n        })), [{\n          pubkey: pool.state.vaultSigner,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: user.poolTokenAccount,\n          isSigner: false,\n          isWritable: true\n        }], _toConsumableArray(user.assetAccounts.map(function (address) {\n          return {\n            pubkey: address,\n            isSigner: false,\n            isWritable: true\n          };\n        })), [{\n          pubkey: user.owner,\n          isSigner: true,\n          isWritable: false\n        }, {\n          pubkey: pool.state.lqdFeeVault,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: pool.state.initializerFeeVault,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: (_a = user.referrer) !== null && _a !== void 0 ? _a : pool.state.lqdFeeVault,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: token_instructions_1.TOKEN_PROGRAM_ID,\n          isSigner: false,\n          isWritable: false\n        }], _toConsumableArray(pool.state.accountParams.map(function (paramInfo) {\n          return {\n            pubkey: paramInfo.address,\n            isSigner: false,\n            isWritable: paramInfo.writable\n          };\n        }))),\n        programId: pool.program,\n        data: schema_1.encodePoolRequest({\n          execute: action\n        })\n      });\n    }\n  }]);\n\n  return PoolInstructions;\n}();\n\nexports.PoolInstructions = PoolInstructions;","map":{"version":3,"sources":["../../src/instructions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PoolInstructions = exports.LQD_FEE_OWNER_ADDRESS = exports.RETBUF_PROGRAM_ID = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst schema_1 = require(\"./schema\");\nconst token_instructions_1 = require(\"@project-serum/serum/lib/token-instructions\");\nexports.RETBUF_PROGRAM_ID = new web3_js_1.PublicKey(\n// TODO: switch to shmem4EWT2sPdVGvTZCzXXRAURL9G5vpPxNwSeKhHUL once that exists on mainnet\n'BYVBQ71CYArTNbEpDnsPCjcoWkJL9181xvj52kfyFFHg');\nexports.LQD_FEE_OWNER_ADDRESS = new web3_js_1.PublicKey('3LTvJCPiPSMjX1kBJ6ZfEhn4G2hM46aJ1yEZsk8i12TK');\n/**\n * Low-level API for constructing and encoding pool instructions.\n *\n * For a higher-level API that handles initializing accounts and approving token\n * transfers, use {@link PoolTransactions}.\n */\nclass PoolInstructions {\n    /**\n     * Instruction to initialize a pool.\n     *\n     * @param poolProgram Program ID of the pool program.\n     * @param poolAccount Newly-created account to hold the pool state. Must be\n     * owned by the pool program.\n     * @param poolTokenMint spl-token mint address for the pool token.\n     * @param poolName User-friendly name for the pool.\n     * @param vaults spl-token account for each of the assets in the pool.\n     * @param vaultSigner Mint authority for `poolTokenMint` and owner of\n     * `poolTokenMint`.\n     * @param vaultSignerNonce Nonce used to generate `vaultSigner`.\n     * @param lqdFeeAccount Pool token spl-token account owned by the LQD fee owner.\n     * @param initializerFeeAccount Pool token spl-token account owned by the pool initializer.\n     * @param feeRate Fee rate for creations/redemptions times 10^6.\n     * @param additionalAccounts Any custom pool-specific accounts needed to\n     * initialize the pool.\n     * @param customData Any custom pool-specific data needed to initialize the pool\n     */\n    static initialize(poolProgram, poolAccount, poolTokenMint, poolName, vaults, vaultSigner, vaultSignerNonce, lqdFeeAccount, initializerFeeAccount, feeRate, additionalAccounts, customData) {\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                { pubkey: poolAccount, isSigner: false, isWritable: true },\n                { pubkey: poolTokenMint, isSigner: false, isWritable: true },\n                ...vaults.map(vaultAddress => ({\n                    pubkey: vaultAddress,\n                    isSigner: false,\n                    isWritable: true,\n                })),\n                { pubkey: vaultSigner, isSigner: false, isWritable: false },\n                { pubkey: lqdFeeAccount, isSigner: false, isWritable: false },\n                { pubkey: initializerFeeAccount, isSigner: false, isWritable: false },\n                {\n                    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                ...(additionalAccounts !== null && additionalAccounts !== void 0 ? additionalAccounts : []),\n            ],\n            programId: poolProgram,\n            data: schema_1.encodePoolRequest({\n                initialize: {\n                    vaultSignerNonce,\n                    assetsLength: vaults.length,\n                    poolName,\n                    feeRate,\n                    customData: customData !== null && customData !== void 0 ? customData : Buffer.alloc(0),\n                },\n            }),\n        });\n    }\n    /**\n     * Instruction to get the expected basket for a {@link PoolAction}.\n     *\n     * For creations, the basket is the quantity of each asset\n     * that need to be sent to the pool to process the creation.  For redemptions\n     * and swaps, the basket is the quantity of each asset that will be\n     * transferred from the pool to the user after the redemption or swap.\n     *\n     * Negative quantities will cause tokens to be transferred in the opposite\n     * direction.\n     *\n     * @param pool\n     * @param action Creation, redemption, or swap.\n     * @param retbufAccount Account to which the basket will be written. Must be\n     * owned by the retbuf program.\n     */\n    static getBasket(pool, action, retbufAccount) {\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                { pubkey: pool.address, isSigner: false, isWritable: false },\n                {\n                    pubkey: pool.state.poolTokenMint,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                ...pool.state.assets.map(assetInfo => ({\n                    pubkey: assetInfo.vaultAddress,\n                    isSigner: false,\n                    isWritable: false,\n                })),\n                { pubkey: pool.state.vaultSigner, isSigner: false, isWritable: false },\n                { pubkey: retbufAccount, isSigner: false, isWritable: true },\n                { pubkey: exports.RETBUF_PROGRAM_ID, isSigner: false, isWritable: false },\n                ...pool.state.accountParams.map(paramInfo => ({\n                    pubkey: paramInfo.address,\n                    isSigner: false,\n                    isWritable: false,\n                })),\n            ],\n            programId: pool.program,\n            data: schema_1.encodePoolRequest({ getBasket: action }),\n        });\n    }\n    /**\n     * Instruction to execute a creation, redemption, or swap.\n     *\n     * @param pool\n     * @param action Creation, redemption, or swap.\n     * @param user Token accounts to pull funds from or send funds to.\n     */\n    static execute(pool, action, user) {\n        var _a;\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                { pubkey: pool.address, isSigner: false, isWritable: true },\n                { pubkey: pool.state.poolTokenMint, isSigner: false, isWritable: true },\n                ...pool.state.assets.map(assetInfo => ({\n                    pubkey: assetInfo.vaultAddress,\n                    isSigner: false,\n                    isWritable: true,\n                })),\n                { pubkey: pool.state.vaultSigner, isSigner: false, isWritable: false },\n                { pubkey: user.poolTokenAccount, isSigner: false, isWritable: true },\n                ...user.assetAccounts.map(address => ({\n                    pubkey: address,\n                    isSigner: false,\n                    isWritable: true,\n                })),\n                { pubkey: user.owner, isSigner: true, isWritable: false },\n                {\n                    pubkey: pool.state.lqdFeeVault,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: pool.state.initializerFeeVault,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: (_a = user.referrer) !== null && _a !== void 0 ? _a : pool.state.lqdFeeVault,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                { pubkey: token_instructions_1.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n                ...pool.state.accountParams.map(paramInfo => ({\n                    pubkey: paramInfo.address,\n                    isSigner: false,\n                    isWritable: paramInfo.writable,\n                })),\n            ],\n            programId: pool.program,\n            data: schema_1.encodePoolRequest({ execute: action }),\n        });\n    }\n}\nexports.PoolInstructions = PoolInstructions;\n//# sourceMappingURL=instructions.js.map"]},"metadata":{},"sourceType":"script"}