{"ast":null,"code":"var _jsxFileName = \"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/pages/OpenOrdersPage.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport FloatingElement from '../components/layout/FloatingElement';\nimport { useAllMarkets, useAllOpenOrders, useMarketInfos } from '../utils/markets';\nimport OpenOrderTable from '../components/UserInfoTable/OpenOrderTable';\nimport { Button, Row } from 'antd';\nimport { useWallet } from '../utils/wallet';\nimport WalletConnect from '../components/WalletConnect';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function OpenOrdersPage() {\n  _s();\n\n  const {\n    connected\n  } = useWallet();\n  const {\n    openOrders,\n    loaded,\n    refreshOpenOrders\n  } = useAllOpenOrders();\n  let marketInfos = useMarketInfos();\n  let marketAddressesToNames = Object.fromEntries(marketInfos.map(info => [info.address.toBase58(), info.name]));\n  let [allMarkets] = useAllMarkets();\n  const marketsByAddress = Object.fromEntries((allMarkets || []).map(marketInfo => [marketInfo.market.address.toBase58(), marketInfo.market]));\n  const dataSource = (openOrders || []).map(orderInfos => orderInfos.orders.map(order => {\n    return {\n      marketName: marketAddressesToNames[orderInfos.marketAddress],\n      market: marketsByAddress[orderInfos.marketAddress],\n      ...order\n    };\n  })).flat();\n\n  if (!connected) {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      justify: \"center\",\n      style: {\n        marginTop: '10%'\n      },\n      children: /*#__PURE__*/_jsxDEV(WalletConnect, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(FloatingElement, {\n    style: {\n      flex: 1,\n      paddingTop: 10\n    },\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: refreshOpenOrders,\n      loading: !loaded,\n      children: \"Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OpenOrderTable, {\n      openOrders: dataSource,\n      pageSize: 25,\n      loading: !loaded,\n      onCancelSuccess: refreshOpenOrders,\n      marketFilter: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(OpenOrdersPage, \"TVc5K2Vfo7vpPZDB4SeAKnXvPIs=\", false, function () {\n  return [useWallet, useAllOpenOrders, useMarketInfos, useAllMarkets];\n});\n\n_c = OpenOrdersPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"OpenOrdersPage\");","map":{"version":3,"sources":["/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/pages/OpenOrdersPage.tsx"],"names":["React","FloatingElement","useAllMarkets","useAllOpenOrders","useMarketInfos","OpenOrderTable","Button","Row","useWallet","WalletConnect","OpenOrdersPage","connected","openOrders","loaded","refreshOpenOrders","marketInfos","marketAddressesToNames","Object","fromEntries","map","info","address","toBase58","name","allMarkets","marketsByAddress","marketInfo","market","dataSource","orderInfos","orders","order","marketName","marketAddress","flat","marginTop","flex","paddingTop"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,sCAA5B;AACA,SACEC,aADF,EAEEC,gBAFF,EAGEC,cAHF,QAIO,kBAJP;AAKA,OAAOC,cAAP,MAA2B,4CAA3B;AACA,SAASC,MAAT,EAAiBC,GAAjB,QAA4B,MAA5B;AAEA,SAASC,SAAT,QAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,6BAA1B;;AAEA,eAAe,SAASC,cAAT,GAA0B;AAAA;;AACvC,QAAM;AAAEC,IAAAA;AAAF,MAAgBH,SAAS,EAA/B;AACA,QAAM;AAAEI,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA;AAAtB,MAA4CX,gBAAgB,EAAlE;AACA,MAAIY,WAAW,GAAGX,cAAc,EAAhC;AACA,MAAIY,sBAAsB,GAAGC,MAAM,CAACC,WAAP,CAC3BH,WAAW,CAACI,GAAZ,CAAiBC,IAAD,IAAU,CAACA,IAAI,CAACC,OAAL,CAAaC,QAAb,EAAD,EAA0BF,IAAI,CAACG,IAA/B,CAA1B,CAD2B,CAA7B;AAGA,MAAI,CAACC,UAAD,IAAetB,aAAa,EAAhC;AACA,QAAMuB,gBAAgB,GAAGR,MAAM,CAACC,WAAP,CACvB,CAACM,UAAU,IAAI,EAAf,EAAmBL,GAAnB,CAAwBO,UAAD,IAAgB,CACrCA,UAAU,CAACC,MAAX,CAAkBN,OAAlB,CAA0BC,QAA1B,EADqC,EAErCI,UAAU,CAACC,MAF0B,CAAvC,CADuB,CAAzB;AAOA,QAAMC,UAA0C,GAAG,CAAChB,UAAU,IAAI,EAAf,EAChDO,GADgD,CAC3CU,UAAD,IACHA,UAAU,CAACC,MAAX,CAAkBX,GAAlB,CAAuBY,KAAD,IAAW;AAC/B,WAAO;AACLC,MAAAA,UAAU,EAAEhB,sBAAsB,CAACa,UAAU,CAACI,aAAZ,CAD7B;AAELN,MAAAA,MAAM,EAAEF,gBAAgB,CAACI,UAAU,CAACI,aAAZ,CAFnB;AAGL,SAAGF;AAHE,KAAP;AAKD,GAND,CAF+C,EAUhDG,IAVgD,EAAnD;;AAYA,MAAI,CAACvB,SAAL,EAAgB;AACd,wBACE,QAAC,GAAD;AACE,MAAA,OAAO,EAAC,QADV;AAEE,MAAA,KAAK,EAAE;AACLwB,QAAAA,SAAS,EAAE;AADN,OAFT;AAAA,6BAME,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AAED,sBACE,QAAC,eAAD;AAAiB,IAAA,KAAK,EAAE;AAAEC,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,UAAU,EAAE;AAAvB,KAAxB;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEvB,iBAAjB;AAAoC,MAAA,OAAO,EAAE,CAACD,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,cAAD;AACE,MAAA,UAAU,EAAEe,UADd;AAEE,MAAA,QAAQ,EAAE,EAFZ;AAGE,MAAA,OAAO,EAAE,CAACf,MAHZ;AAIE,MAAA,eAAe,EAAEC,iBAJnB;AAKE,MAAA,YAAY;AALd;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GAtDuBJ,c;UACAF,S,EAC4BL,gB,EAChCC,c,EAICF,a;;;KAPGQ,c","sourcesContent":["import React from 'react';\nimport FloatingElement from '../components/layout/FloatingElement';\nimport {\n  useAllMarkets,\n  useAllOpenOrders,\n  useMarketInfos,\n} from '../utils/markets';\nimport OpenOrderTable from '../components/UserInfoTable/OpenOrderTable';\nimport { Button, Row } from 'antd';\nimport { OrderWithMarketAndMarketName } from '../utils/types';\nimport { useWallet } from '../utils/wallet';\nimport WalletConnect from '../components/WalletConnect';\n\nexport default function OpenOrdersPage() {\n  const { connected } = useWallet();\n  const { openOrders, loaded, refreshOpenOrders } = useAllOpenOrders();\n  let marketInfos = useMarketInfos();\n  let marketAddressesToNames = Object.fromEntries(\n    marketInfos.map((info) => [info.address.toBase58(), info.name]),\n  );\n  let [allMarkets] = useAllMarkets();\n  const marketsByAddress = Object.fromEntries(\n    (allMarkets || []).map((marketInfo) => [\n      marketInfo.market.address.toBase58(),\n      marketInfo.market,\n    ]),\n  );\n\n  const dataSource: OrderWithMarketAndMarketName[] = (openOrders || [])\n    .map((orderInfos) =>\n      orderInfos.orders.map((order) => {\n        return {\n          marketName: marketAddressesToNames[orderInfos.marketAddress],\n          market: marketsByAddress[orderInfos.marketAddress],\n          ...order,\n        };\n      }),\n    )\n    .flat();\n\n  if (!connected) {\n    return (\n      <Row\n        justify=\"center\"\n        style={{\n          marginTop: '10%',\n        }}\n      >\n        <WalletConnect />\n      </Row>\n    );\n  }\n\n  return (\n    <FloatingElement style={{ flex: 1, paddingTop: 10 }}>\n      <Button onClick={refreshOpenOrders} loading={!loaded}>\n        Refresh\n      </Button>\n      <OpenOrderTable\n        openOrders={dataSource}\n        pageSize={25}\n        loading={!loaded}\n        onCancelSuccess={refreshOpenOrders}\n        marketFilter\n      />\n    </FloatingElement>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}