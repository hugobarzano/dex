{"ast":null,"code":"import _regeneratorRuntime from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import*as BufferLayout from'buffer-layout';import{PublicKey}from'@solana/web3.js';import{WRAPPED_SOL_MINT}from'@project-serum/serum/lib/token-instructions';import{TOKEN_MINTS}from'@project-serum/serum';import{useAllMarkets,useCustomMarkets,useTokenAccounts}from'./markets';import{getMultipleSolanaAccounts}from'./send';import{useConnection}from'./connection';import{useAsyncData}from'./fetch-loop';import tuple from'immutable-tuple';import BN from'bn.js';import{useMemo}from'react';export var ACCOUNT_LAYOUT=BufferLayout.struct([BufferLayout.blob(32,'mint'),BufferLayout.blob(32,'owner'),BufferLayout.nu64('amount'),BufferLayout.blob(93)]);export var MINT_LAYOUT=BufferLayout.struct([BufferLayout.blob(36),BufferLayout.blob(8,'supply'),BufferLayout.u8('decimals'),BufferLayout.u8('initialized'),BufferLayout.blob(36)]);export function parseTokenAccountData(data){var _ACCOUNT_LAYOUT$decod=ACCOUNT_LAYOUT.decode(data),mint=_ACCOUNT_LAYOUT$decod.mint,owner=_ACCOUNT_LAYOUT$decod.owner,amount=_ACCOUNT_LAYOUT$decod.amount;return{mint:new PublicKey(mint),owner:new PublicKey(owner),amount:amount};}export function parseTokenMintData(data){var _MINT_LAYOUT$decode=MINT_LAYOUT.decode(data),decimals=_MINT_LAYOUT$decode.decimals,initialized=_MINT_LAYOUT$decode.initialized,supply=_MINT_LAYOUT$decode.supply;return{decimals:decimals,initialized:!!initialized,supply:new BN(supply,10,'le')};}export function getOwnedAccountsFilters(publicKey){return[{memcmp:{offset:ACCOUNT_LAYOUT.offsetOf('owner'),bytes:publicKey.toBase58()}},{dataSize:ACCOUNT_LAYOUT.span}];}export var TOKEN_PROGRAM_ID=new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');export function getOwnedTokenAccounts(_x,_x2){return _getOwnedTokenAccounts.apply(this,arguments);}function _getOwnedTokenAccounts(){_getOwnedTokenAccounts=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection,publicKey){var filters,resp;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:filters=getOwnedAccountsFilters(publicKey);_context2.next=3;return connection.getProgramAccounts(TOKEN_PROGRAM_ID,{filters:filters});case 3:resp=_context2.sent;return _context2.abrupt(\"return\",resp.map(function(_ref4){var pubkey=_ref4.pubkey,_ref4$account=_ref4.account,data=_ref4$account.data,executable=_ref4$account.executable,owner=_ref4$account.owner,lamports=_ref4$account.lamports;return{publicKey:new PublicKey(pubkey),accountInfo:{data:data,executable:executable,owner:new PublicKey(owner),lamports:lamports}};}));case 5:case\"end\":return _context2.stop();}}},_callee2);}));return _getOwnedTokenAccounts.apply(this,arguments);}export function getTokenAccountInfo(_x3,_x4){return _getTokenAccountInfo.apply(this,arguments);}// todo: use this to map custom mints to custom tickers. Add functionality once custom markets store mints\nfunction _getTokenAccountInfo(){_getTokenAccountInfo=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(connection,ownerAddress){var _yield$Promise$all,_yield$Promise$all2,splAccounts,account,parsedSplAccounts;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return Promise.all([getOwnedTokenAccounts(connection,ownerAddress),connection.getAccountInfo(ownerAddress)]);case 2:_yield$Promise$all=_context3.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,2);splAccounts=_yield$Promise$all2[0];account=_yield$Promise$all2[1];parsedSplAccounts=splAccounts.map(function(_ref5){var publicKey=_ref5.publicKey,accountInfo=_ref5.accountInfo;return{pubkey:publicKey,account:accountInfo,effectiveMint:parseTokenAccountData(accountInfo.data).mint};});return _context3.abrupt(\"return\",parsedSplAccounts.concat({pubkey:ownerAddress,account:account,effectiveMint:WRAPPED_SOL_MINT}));case 8:case\"end\":return _context3.stop();}}},_callee3);}));return _getTokenAccountInfo.apply(this,arguments);}export function useMintToTickers(){var _useCustomMarkets=useCustomMarkets(),customMarkets=_useCustomMarkets.customMarkets;return useMemo(function(){return Object.fromEntries(TOKEN_MINTS.map(function(mint){return[mint.address.toBase58(),mint.name];}));// eslint-disable-next-line react-hooks/exhaustive-deps\n},[customMarkets.length]);}var _VERY_SLOW_REFRESH_INTERVAL=5000*1000;// todo: move this to using mints stored in static market infos once custom markets support that.\nexport function useMintInfos(){var connection=useConnection();var _useTokenAccounts=useTokenAccounts(),_useTokenAccounts2=_slicedToArray(_useTokenAccounts,1),tokenAccounts=_useTokenAccounts2[0];var _useAllMarkets=useAllMarkets(),_useAllMarkets2=_slicedToArray(_useAllMarkets,1),allMarkets=_useAllMarkets2[0];var allMints=(tokenAccounts||[]).map(function(account){return account.effectiveMint;}).concat((allMarkets||[]).map(function(marketInfo){return marketInfo.market.baseMintAddress;})).concat((allMarkets||[]).map(function(marketInfo){return marketInfo.market.quoteMintAddress;}));var uniqueMints=_toConsumableArray(new Set(allMints.map(function(mint){return mint.toBase58();}))).map(function(stringMint){return new PublicKey(stringMint);});var getAllMintInfo=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var mintInfos;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getMultipleSolanaAccounts(connection,uniqueMints);case 2:mintInfos=_context.sent;return _context.abrupt(\"return\",Object.fromEntries(Object.entries(mintInfos.value).map(function(_ref2){var _ref3=_slicedToArray(_ref2,2),key=_ref3[0],accountInfo=_ref3[1];return[key,accountInfo&&parseTokenMintData(accountInfo.data)];})));case 4:case\"end\":return _context.stop();}}},_callee);}));return function getAllMintInfo(){return _ref.apply(this,arguments);};}();return useAsyncData(getAllMintInfo,tuple('getAllMintInfo',connection,(tokenAccounts||[]).length,(allMarkets||[]).length),{refreshInterval:_VERY_SLOW_REFRESH_INTERVAL});}","map":{"version":3,"sources":["/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/src/utils/tokens.tsx"],"names":["BufferLayout","PublicKey","WRAPPED_SOL_MINT","TOKEN_MINTS","useAllMarkets","useCustomMarkets","useTokenAccounts","getMultipleSolanaAccounts","useConnection","useAsyncData","tuple","BN","useMemo","ACCOUNT_LAYOUT","struct","blob","nu64","MINT_LAYOUT","u8","parseTokenAccountData","data","decode","mint","owner","amount","parseTokenMintData","decimals","initialized","supply","getOwnedAccountsFilters","publicKey","memcmp","offset","offsetOf","bytes","toBase58","dataSize","span","TOKEN_PROGRAM_ID","getOwnedTokenAccounts","connection","filters","getProgramAccounts","resp","map","pubkey","account","executable","lamports","accountInfo","getTokenAccountInfo","ownerAddress","Promise","all","getAccountInfo","splAccounts","parsedSplAccounts","effectiveMint","concat","useMintToTickers","customMarkets","Object","fromEntries","address","name","length","_VERY_SLOW_REFRESH_INTERVAL","useMintInfos","tokenAccounts","allMarkets","allMints","marketInfo","market","baseMintAddress","quoteMintAddress","uniqueMints","Set","stringMint","getAllMintInfo","mintInfos","entries","value","key","refreshInterval"],"mappings":"yuBAAA,MAAO,GAAKA,CAAAA,YAAZ,KAA8B,eAA9B,CACA,OAAiCC,SAAjC,KAAiD,iBAAjD,CACA,OAAQC,gBAAR,KAA+B,6CAA/B,CAEA,OAAQC,WAAR,KAA0B,sBAA1B,CACA,OAAQC,aAAR,CAAuBC,gBAAvB,CAAyCC,gBAAzC,KAAgE,WAAhE,CACA,OAAQC,yBAAR,KAAwC,QAAxC,CACA,OAAQC,aAAR,KAA4B,cAA5B,CACA,OAAQC,YAAR,KAA2B,cAA3B,CACA,MAAOC,CAAAA,KAAP,KAAkB,iBAAlB,CACA,MAAOC,CAAAA,EAAP,KAAe,OAAf,CACA,OAAQC,OAAR,KAAsB,OAAtB,CAEA,MAAO,IAAMC,CAAAA,cAAc,CAAGb,YAAY,CAACc,MAAb,CAAoB,CAChDd,YAAY,CAACe,IAAb,CAAkB,EAAlB,CAAsB,MAAtB,CADgD,CAEhDf,YAAY,CAACe,IAAb,CAAkB,EAAlB,CAAsB,OAAtB,CAFgD,CAGhDf,YAAY,CAACgB,IAAb,CAAkB,QAAlB,CAHgD,CAIhDhB,YAAY,CAACe,IAAb,CAAkB,EAAlB,CAJgD,CAApB,CAAvB,CAOP,MAAO,IAAME,CAAAA,WAAW,CAAGjB,YAAY,CAACc,MAAb,CAAoB,CAC7Cd,YAAY,CAACe,IAAb,CAAkB,EAAlB,CAD6C,CAE7Cf,YAAY,CAACe,IAAb,CAAkB,CAAlB,CAAqB,QAArB,CAF6C,CAG7Cf,YAAY,CAACkB,EAAb,CAAgB,UAAhB,CAH6C,CAI7ClB,YAAY,CAACkB,EAAb,CAAgB,aAAhB,CAJ6C,CAK7ClB,YAAY,CAACe,IAAb,CAAkB,EAAlB,CAL6C,CAApB,CAApB,CAQP,MAAO,SAASI,CAAAA,qBAAT,CACLC,IADK,CAEkD,CACvD,0BAA8BP,cAAc,CAACQ,MAAf,CAAsBD,IAAtB,CAA9B,CAAME,IAAN,uBAAMA,IAAN,CAAYC,KAAZ,uBAAYA,KAAZ,CAAmBC,MAAnB,uBAAmBA,MAAnB,CACA,MAAO,CACLF,IAAI,CAAE,GAAIrB,CAAAA,SAAJ,CAAcqB,IAAd,CADD,CAELC,KAAK,CAAE,GAAItB,CAAAA,SAAJ,CAAcsB,KAAd,CAFF,CAGLC,MAAM,CAANA,MAHK,CAAP,CAKD,CAQD,MAAO,SAASC,CAAAA,kBAAT,CAA4BL,IAA5B,CAA4C,CACjD,wBAAwCH,WAAW,CAACI,MAAZ,CAAmBD,IAAnB,CAAxC,CAAMM,QAAN,qBAAMA,QAAN,CAAgBC,WAAhB,qBAAgBA,WAAhB,CAA6BC,MAA7B,qBAA6BA,MAA7B,CACA,MAAO,CACLF,QAAQ,CAARA,QADK,CAELC,WAAW,CAAE,CAAC,CAACA,WAFV,CAGLC,MAAM,CAAE,GAAIjB,CAAAA,EAAJ,CAAOiB,MAAP,CAAe,EAAf,CAAmB,IAAnB,CAHH,CAAP,CAKD,CAED,MAAO,SAASC,CAAAA,uBAAT,CAAiCC,SAAjC,CAAuD,CAC5D,MAAO,CACL,CACEC,MAAM,CAAE,CACNC,MAAM,CAAEnB,cAAc,CAACoB,QAAf,CAAwB,OAAxB,CADF,CAENC,KAAK,CAAEJ,SAAS,CAACK,QAAV,EAFD,CADV,CADK,CAOL,CACEC,QAAQ,CAAEvB,cAAc,CAACwB,IAD3B,CAPK,CAAP,CAWD,CAED,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,GAAIrC,CAAAA,SAAJ,CAC9B,6CAD8B,CAAzB,CAIP,eAAsBsC,CAAAA,qBAAtB,8D,iHAAO,kBACLC,UADK,CAELV,SAFK,uIAIDW,OAJC,CAISZ,uBAAuB,CAACC,SAAD,CAJhC,wBAKYU,CAAAA,UAAU,CAACE,kBAAX,CACfJ,gBADe,CAEf,CACEG,OAAO,CAAPA,OADF,CAFe,CALZ,QAKDE,IALC,iDAWEA,IAAI,CACRC,GADI,CACA,mBAAGC,CAAAA,MAAH,OAAGA,MAAH,qBAAWC,OAAX,CAAsB1B,IAAtB,eAAsBA,IAAtB,CAA4B2B,UAA5B,eAA4BA,UAA5B,CAAwCxB,KAAxC,eAAwCA,KAAxC,CAA+CyB,QAA/C,eAA+CA,QAA/C,OAAiE,CACpElB,SAAS,CAAE,GAAI7B,CAAAA,SAAJ,CAAc4C,MAAd,CADyD,CAEpEI,WAAW,CAAE,CACX7B,IAAI,CAAJA,IADW,CAEX2B,UAAU,CAAVA,UAFW,CAGXxB,KAAK,CAAE,GAAItB,CAAAA,SAAJ,CAAcsB,KAAd,CAHI,CAIXyB,QAAQ,CAARA,QAJW,CAFuD,CAAjE,EADA,CAXF,0D,wDAuBP,eAAsBE,CAAAA,mBAAtB,6DAwBA;6GAxBO,kBACLV,UADK,CAELW,YAFK,8NAI8BC,CAAAA,OAAO,CAACC,GAAR,CAAY,CAC7Cd,qBAAqB,CAACC,UAAD,CAAaW,YAAb,CADwB,CAE7CX,UAAU,CAACc,cAAX,CAA0BH,YAA1B,CAF6C,CAAZ,CAJ9B,mGAIAI,WAJA,wBAIaT,OAJb,wBAQCU,iBARD,CAQqCD,WAAW,CAACX,GAAZ,CACxC,eAAgC,IAA7Bd,CAAAA,SAA6B,OAA7BA,SAA6B,CAAlBmB,WAAkB,OAAlBA,WAAkB,CAC9B,MAAO,CACLJ,MAAM,CAAEf,SADH,CAELgB,OAAO,CAAEG,WAFJ,CAGLQ,aAAa,CAAEtC,qBAAqB,CAAC8B,WAAW,CAAC7B,IAAb,CAArB,CAAwCE,IAHlD,CAAP,CAKD,CAPuC,CARrC,kCAiBEkC,iBAAiB,CAACE,MAAlB,CAAyB,CAC9Bb,MAAM,CAAEM,YADsB,CAE9BL,OAAO,CAAPA,OAF8B,CAG9BW,aAAa,CAAEvD,gBAHe,CAAzB,CAjBF,0D,sDAyBP,MAAO,SAASyD,CAAAA,gBAAT,EAAwD,CAC7D,sBAA0BtD,gBAAgB,EAA1C,CAAQuD,aAAR,mBAAQA,aAAR,CACA,MAAOhD,CAAAA,OAAO,CAAC,UAAM,CACnB,MAAOiD,CAAAA,MAAM,CAACC,WAAP,CACL3D,WAAW,CAACyC,GAAZ,CAAgB,SAACtB,IAAD,QAAU,CAACA,IAAI,CAACyC,OAAL,CAAa5B,QAAb,EAAD,CAA0Bb,IAAI,CAAC0C,IAA/B,CAAV,EAAhB,CADK,CAAP,CAGA;AACD,CALa,CAKX,CAACJ,aAAa,CAACK,MAAf,CALW,CAAd,CAMD,CAED,GAAMC,CAAAA,2BAA2B,CAAG,KAAO,IAA3C,CAEA;AACA,MAAO,SAASC,CAAAA,YAAT,EAYL,CACA,GAAM3B,CAAAA,UAAU,CAAGhC,aAAa,EAAhC,CACA,sBAAwBF,gBAAgB,EAAxC,wDAAO8D,aAAP,uBACA,mBAAqBhE,aAAa,EAAlC,kDAAOiE,UAAP,oBAEA,GAAMC,CAAAA,QAAQ,CAAG,CAACF,aAAa,EAAI,EAAlB,EACdxB,GADc,CACV,SAACE,OAAD,QAAaA,CAAAA,OAAO,CAACW,aAArB,EADU,EAEdC,MAFc,CAGb,CAACW,UAAU,EAAI,EAAf,EAAmBzB,GAAnB,CAAuB,SAAC2B,UAAD,QAAgBA,CAAAA,UAAU,CAACC,MAAX,CAAkBC,eAAlC,EAAvB,CAHa,EAKdf,MALc,CAMb,CAACW,UAAU,EAAI,EAAf,EAAmBzB,GAAnB,CACE,SAAC2B,UAAD,QAAgBA,CAAAA,UAAU,CAACC,MAAX,CAAkBE,gBAAlC,EADF,CANa,CAAjB,CAUA,GAAMC,CAAAA,WAAW,CAAG,mBAAI,GAAIC,CAAAA,GAAJ,CAAQN,QAAQ,CAAC1B,GAAT,CAAa,SAACtB,IAAD,QAAUA,CAAAA,IAAI,CAACa,QAAL,EAAV,EAAb,CAAR,CAAJ,EAAsDS,GAAtD,CAClB,SAACiC,UAAD,QAAgB,IAAI5E,CAAAA,SAAJ,CAAc4E,UAAd,CAAhB,EADkB,CAApB,CAIA,GAAMC,CAAAA,cAAc,0FAAG,uKACGvE,CAAAA,yBAAyB,CAACiC,UAAD,CAAamC,WAAb,CAD5B,QACfI,SADe,+CAEdlB,MAAM,CAACC,WAAP,CACLD,MAAM,CAACmB,OAAP,CAAeD,SAAS,CAACE,KAAzB,EAAgCrC,GAAhC,CAAoC,kDAAEsC,GAAF,UAAOjC,WAAP,gBAAwB,CAC1DiC,GAD0D,CAE1DjC,WAAW,EAAIxB,kBAAkB,CAACwB,WAAW,CAAC7B,IAAb,CAFyB,CAAxB,EAApC,CADK,CAFc,wDAAH,kBAAd0D,CAAAA,cAAc,0CAApB,CAUA,MAAOrE,CAAAA,YAAY,CACjBqE,cADiB,CAEjBpE,KAAK,CACH,gBADG,CAEH8B,UAFG,CAGH,CAAC4B,aAAa,EAAI,EAAlB,EAAsBH,MAHnB,CAIH,CAACI,UAAU,EAAI,EAAf,EAAmBJ,MAJhB,CAFY,CAQjB,CAAEkB,eAAe,CAAEjB,2BAAnB,CARiB,CAAnB,CAUD","sourcesContent":["import * as BufferLayout from 'buffer-layout';\nimport {AccountInfo, Connection, PublicKey} from '@solana/web3.js';\nimport {WRAPPED_SOL_MINT} from '@project-serum/serum/lib/token-instructions';\nimport {TokenAccount} from './types';\nimport {TOKEN_MINTS} from '@project-serum/serum';\nimport {useAllMarkets, useCustomMarkets, useTokenAccounts} from './markets';\nimport {getMultipleSolanaAccounts} from './send';\nimport {useConnection} from './connection';\nimport {useAsyncData} from './fetch-loop';\nimport tuple from 'immutable-tuple';\nimport BN from 'bn.js';\nimport {useMemo} from 'react';\n\nexport const ACCOUNT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(32, 'mint'),\n  BufferLayout.blob(32, 'owner'),\n  BufferLayout.nu64('amount'),\n  BufferLayout.blob(93),\n]);\n\nexport const MINT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(36),\n  BufferLayout.blob(8, 'supply'),\n  BufferLayout.u8('decimals'),\n  BufferLayout.u8('initialized'),\n  BufferLayout.blob(36),\n]);\n\nexport function parseTokenAccountData(\n  data: Buffer,\n): { mint: PublicKey; owner: PublicKey; amount: number } {\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\n  return {\n    mint: new PublicKey(mint),\n    owner: new PublicKey(owner),\n    amount,\n  };\n}\n\nexport interface MintInfo {\n  decimals: number;\n  initialized: boolean;\n  supply: BN;\n}\n\nexport function parseTokenMintData(data): MintInfo {\n  let { decimals, initialized, supply } = MINT_LAYOUT.decode(data);\n  return {\n    decimals,\n    initialized: !!initialized,\n    supply: new BN(supply, 10, 'le'),\n  };\n}\n\nexport function getOwnedAccountsFilters(publicKey: PublicKey) {\n  return [\n    {\n      memcmp: {\n        offset: ACCOUNT_LAYOUT.offsetOf('owner'),\n        bytes: publicKey.toBase58(),\n      },\n    },\n    {\n      dataSize: ACCOUNT_LAYOUT.span,\n    },\n  ];\n}\n\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n  'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n);\n\nexport async function getOwnedTokenAccounts(\n  connection: Connection,\n  publicKey: PublicKey,\n): Promise<Array<{ publicKey: PublicKey; accountInfo: AccountInfo<Buffer> }>> {\n  let filters = getOwnedAccountsFilters(publicKey);\n  let resp = await connection.getProgramAccounts(\n    TOKEN_PROGRAM_ID,\n    {\n      filters,\n    },\n  );\n  return resp\n    .map(({ pubkey, account: { data, executable, owner, lamports } }) => ({\n      publicKey: new PublicKey(pubkey),\n      accountInfo: {\n        data,\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n      },\n    }))\n}\n\nexport async function getTokenAccountInfo(\n  connection: Connection,\n  ownerAddress: PublicKey,\n) {\n  let [splAccounts, account] = await Promise.all([\n    getOwnedTokenAccounts(connection, ownerAddress),\n    connection.getAccountInfo(ownerAddress),\n  ]);\n  const parsedSplAccounts: TokenAccount[] = splAccounts.map(\n    ({ publicKey, accountInfo }) => {\n      return {\n        pubkey: publicKey,\n        account: accountInfo,\n        effectiveMint: parseTokenAccountData(accountInfo.data).mint,\n      };\n    },\n  );\n  return parsedSplAccounts.concat({\n    pubkey: ownerAddress,\n    account,\n    effectiveMint: WRAPPED_SOL_MINT,\n  });\n}\n\n// todo: use this to map custom mints to custom tickers. Add functionality once custom markets store mints\nexport function useMintToTickers(): { [mint: string]: string } {\n  const { customMarkets } = useCustomMarkets();\n  return useMemo(() => {\n    return Object.fromEntries(\n      TOKEN_MINTS.map((mint) => [mint.address.toBase58(), mint.name]),\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [customMarkets.length]);\n}\n\nconst _VERY_SLOW_REFRESH_INTERVAL = 5000 * 1000;\n\n// todo: move this to using mints stored in static market infos once custom markets support that.\nexport function useMintInfos(): [\n  (\n    | {\n        [mintAddress: string]: {\n          decimals: number;\n          initialized: boolean;\n        } | null;\n      }\n    | null\n    | undefined\n  ),\n  boolean,\n] {\n  const connection = useConnection();\n  const [tokenAccounts] = useTokenAccounts();\n  const [allMarkets] = useAllMarkets();\n\n  const allMints = (tokenAccounts || [])\n    .map((account) => account.effectiveMint)\n    .concat(\n      (allMarkets || []).map((marketInfo) => marketInfo.market.baseMintAddress),\n    )\n    .concat(\n      (allMarkets || []).map(\n        (marketInfo) => marketInfo.market.quoteMintAddress,\n      ),\n    );\n  const uniqueMints = [...new Set(allMints.map((mint) => mint.toBase58()))].map(\n    (stringMint) => new PublicKey(stringMint),\n  );\n\n  const getAllMintInfo = async () => {\n    const mintInfos = await getMultipleSolanaAccounts(connection, uniqueMints);\n    return Object.fromEntries(\n      Object.entries(mintInfos.value).map(([key, accountInfo]) => [\n        key,\n        accountInfo && parseTokenMintData(accountInfo.data),\n      ]),\n    );\n  };\n\n  return useAsyncData(\n    getAllMintInfo,\n    tuple(\n      'getAllMintInfo',\n      connection,\n      (tokenAccounts || []).length,\n      (allMarkets || []).length,\n    ),\n    { refreshInterval: _VERY_SLOW_REFRESH_INTERVAL },\n  );\n}\n"]},"metadata":{},"sourceType":"module"}