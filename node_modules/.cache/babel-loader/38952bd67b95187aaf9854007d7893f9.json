{"ast":null,"code":"import _regeneratorRuntime from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import DataTable from'../layout/DataTable';import{Button,Row}from'antd';import{settleAllFunds}from'../../utils/send';import{notify}from'../../utils/notifications';import{useConnection}from'../../utils/connection';import{useWallet}from'../../utils/wallet';import{useAllMarkets,useSelectedTokenAccounts,useTokenAccounts}from'../../utils/markets';import StandaloneTokenAccountsSelect from'../StandaloneTokenAccountSelect';import{abbreviateAddress}from'../../utils/utils';import{PublicKey}from'@solana/web3.js';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function WalletBalancesTable(_ref){var walletBalances=_ref.walletBalances;var connection=useConnection();var _useWallet=useWallet(),wallet=_useWallet.wallet,connected=_useWallet.connected;var _useSelectedTokenAcco=useSelectedTokenAccounts(),_useSelectedTokenAcco2=_slicedToArray(_useSelectedTokenAcco,1),selectedTokenAccounts=_useSelectedTokenAcco2[0];var _useTokenAccounts=useTokenAccounts(),_useTokenAccounts2=_slicedToArray(_useTokenAccounts,2),tokenAccounts=_useTokenAccounts2[0],tokenAccountsConnected=_useTokenAccounts2[1];var _useAllMarkets=useAllMarkets(),_useAllMarkets2=_slicedToArray(_useAllMarkets,2),allMarkets=_useAllMarkets2[0],allMarketsConnected=_useAllMarkets2[1];var _useState=useState(false),_useState2=_slicedToArray(_useState,2),settlingFunds=_useState2[0],setSettlingFunds=_useState2[1];function onSettleFunds(){return _onSettleFunds.apply(this,arguments);}function _onSettleFunds(){_onSettleFunds=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setSettlingFunds(true);_context.prev=1;if(wallet){_context.next=5;break;}notify({message:'Wallet not connected',description:'Wallet not connected',type:'error'});return _context.abrupt(\"return\");case 5:if(!(!tokenAccounts||!tokenAccountsConnected)){_context.next=8;break;}notify({message:'Error settling funds',description:'TokenAccounts not connected',type:'error'});return _context.abrupt(\"return\");case 8:if(!(!allMarkets||!allMarketsConnected)){_context.next=11;break;}notify({message:'Error settling funds',description:'Markets not connected',type:'error'});return _context.abrupt(\"return\");case 11:_context.next=13;return settleAllFunds({connection:connection,tokenAccounts:tokenAccounts,selectedTokenAccounts:selectedTokenAccounts,wallet:wallet,markets:allMarkets.map(function(marketInfo){return marketInfo.market;})});case 13:_context.next=18;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](1);notify({message:'Error settling funds',description:_context.t0.message,type:'error'});case 18:_context.prev=18;setSettlingFunds(false);return _context.finish(18);case 21:case\"end\":return _context.stop();}}},_callee,null,[[1,15,18,21]]);}));return _onSettleFunds.apply(this,arguments);}var columns=[{title:'Coin',key:'coin',width:'20%',render:function render(walletBalance){return/*#__PURE__*/_jsx(Row,{align:\"middle\",children:/*#__PURE__*/_jsx(\"a\",{href:\"https://solscan.io/address/\".concat(walletBalance.mint),target:'_blank',rel:\"noopener noreferrer\",children:walletBalance.coin||abbreviateAddress(new PublicKey(walletBalance.mint))})});}},{title:'Wallet Balance',dataIndex:'walletBalance',key:'walletBalance',width:'20%'},{title:'Open orders total balances',dataIndex:'openOrdersTotal',key:'openOrdersTotal',width:'20%'},{title:'Unsettled balances',dataIndex:'openOrdersFree',key:'openOrdersFree',width:'20%'},{title:'Selected token account',key:'selectTokenAccount',width:'20%',render:function render(walletBalance){return/*#__PURE__*/_jsx(Row,{align:\"middle\",style:{width:'430px'},children:/*#__PURE__*/_jsx(StandaloneTokenAccountsSelect,{accounts:tokenAccounts===null||tokenAccounts===void 0?void 0:tokenAccounts.filter(function(t){return t.effectiveMint.toBase58()===walletBalance.mint;}),mint:walletBalance.mint})});}}];return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(DataTable,{emptyLabel:\"No balances\",dataSource:walletBalances,columns:columns,pagination:false}),connected&&/*#__PURE__*/_jsx(Button,{onClick:onSettleFunds,loading:settlingFunds,children:\"Settle all funds\"})]});}","map":{"version":3,"sources":["/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/components/UserInfoTable/WalletBalancesTable.tsx"],"names":["React","useState","DataTable","Button","Row","settleAllFunds","notify","useConnection","useWallet","useAllMarkets","useSelectedTokenAccounts","useTokenAccounts","StandaloneTokenAccountsSelect","abbreviateAddress","PublicKey","WalletBalancesTable","walletBalances","connection","wallet","connected","selectedTokenAccounts","tokenAccounts","tokenAccountsConnected","allMarkets","allMarketsConnected","settlingFunds","setSettlingFunds","onSettleFunds","message","description","type","markets","map","marketInfo","market","columns","title","key","width","render","walletBalance","mint","coin","dataIndex","filter","t","effectiveMint","toBase58"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport DataTable from '../layout/DataTable';\nimport { Button, Row } from 'antd';\nimport { settleAllFunds } from '../../utils/send';\nimport { notify } from '../../utils/notifications';\nimport { useConnection } from '../../utils/connection';\nimport { useWallet } from '../../utils/wallet';\nimport {\n  useAllMarkets,\n  useSelectedTokenAccounts,\n  useTokenAccounts,\n} from '../../utils/markets';\nimport StandaloneTokenAccountsSelect from '../StandaloneTokenAccountSelect';\nimport { abbreviateAddress } from '../../utils/utils';\nimport { PublicKey } from '@solana/web3.js';\n\nexport default function WalletBalancesTable({\n  walletBalances,\n}: {\n  walletBalances: {\n    coin: string;\n    mint: string;\n    walletBalance: number;\n    openOrdersFree: number;\n    openOrdersTotal: number;\n  }[];\n}) {\n  const connection = useConnection();\n  const { wallet, connected } = useWallet();\n  const [selectedTokenAccounts] = useSelectedTokenAccounts();\n  const [tokenAccounts, tokenAccountsConnected] = useTokenAccounts();\n  const [allMarkets, allMarketsConnected] = useAllMarkets();\n  const [settlingFunds, setSettlingFunds] = useState(false);\n\n  async function onSettleFunds() {\n    setSettlingFunds(true);\n    try {\n      if (!wallet) {\n        notify({\n          message: 'Wallet not connected',\n          description: 'Wallet not connected',\n          type: 'error',\n        });\n        return;\n      }\n\n      if (!tokenAccounts || !tokenAccountsConnected) {\n        notify({\n          message: 'Error settling funds',\n          description: 'TokenAccounts not connected',\n          type: 'error',\n        });\n        return;\n      }\n      if (!allMarkets || !allMarketsConnected) {\n        notify({\n          message: 'Error settling funds',\n          description: 'Markets not connected',\n          type: 'error',\n        });\n        return;\n      }\n      await settleAllFunds({\n        connection,\n        tokenAccounts,\n        selectedTokenAccounts,\n        wallet,\n        markets: allMarkets.map((marketInfo) => marketInfo.market),\n      });\n    } catch (e) {\n      notify({\n        message: 'Error settling funds',\n        description: e.message,\n        type: 'error',\n      });\n    } finally {\n      setSettlingFunds(false);\n    }\n  }\n\n  const columns = [\n    {\n      title: 'Coin',\n      key: 'coin',\n      width: '20%',\n      render: (walletBalance) => (\n        <Row align=\"middle\">\n          <a\n            href={`https://solscan.io/address/${walletBalance.mint}`}\n            target={'_blank'}\n            rel=\"noopener noreferrer\"\n          >\n            {walletBalance.coin ||\n              abbreviateAddress(new PublicKey(walletBalance.mint))}\n          </a>\n        </Row>\n      ),\n    },\n    {\n      title: 'Wallet Balance',\n      dataIndex: 'walletBalance',\n      key: 'walletBalance',\n      width: '20%',\n    },\n    {\n      title: 'Open orders total balances',\n      dataIndex: 'openOrdersTotal',\n      key: 'openOrdersTotal',\n      width: '20%',\n    },\n    {\n      title: 'Unsettled balances',\n      dataIndex: 'openOrdersFree',\n      key: 'openOrdersFree',\n      width: '20%',\n    },\n    {\n      title: 'Selected token account',\n      key: 'selectTokenAccount',\n      width: '20%',\n      render: (walletBalance) => (\n        <Row align=\"middle\" style={{ width: '430px' }}>\n          <StandaloneTokenAccountsSelect\n            accounts={tokenAccounts?.filter(\n              (t) => t.effectiveMint.toBase58() === walletBalance.mint,\n            )}\n            mint={walletBalance.mint}\n          />\n        </Row>\n      ),\n    },\n  ];\n  return (\n    <React.Fragment>\n      <DataTable\n        emptyLabel=\"No balances\"\n        dataSource={walletBalances}\n        columns={columns}\n        pagination={false}\n      />\n      {connected && (\n        <Button onClick={onSettleFunds} loading={settlingFunds}>\n          Settle all funds\n        </Button>\n      )}\n    </React.Fragment>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}