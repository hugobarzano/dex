{"ast":null,"code":"import _regeneratorRuntime from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useLocalStorageState}from'./utils';import{Account,Connection}from'@solana/web3.js';import React,{useContext,useEffect,useMemo,useRef}from'react';import{setCache,useAsyncData}from'./fetch-loop';import tuple from'immutable-tuple';import{jsx as _jsx}from\"react/jsx-runtime\";export var ENDPOINTS=[{name:'mainnet-beta',endpoint:'https://solana-api.projectserum.com',custom:false},{name:'localnet',endpoint:'http://127.0.0.1:8899',custom:false}];var accountListenerCount=new Map();var ConnectionContext=/*#__PURE__*/React.createContext(null);export function ConnectionProvider(_ref){var children=_ref.children;var _useLocalStorageState=useLocalStorageState('connectionEndpts',ENDPOINTS[0].endpoint),_useLocalStorageState2=_slicedToArray(_useLocalStorageState,2),endpoint=_useLocalStorageState2[0],setEndpoint=_useLocalStorageState2[1];var _useLocalStorageState3=useLocalStorageState('customConnectionEndpoints',[]),_useLocalStorageState4=_slicedToArray(_useLocalStorageState3,2),customEndpoints=_useLocalStorageState4[0],setCustomEndpoints=_useLocalStorageState4[1];var availableEndpoints=ENDPOINTS.concat(customEndpoints);var connection=useMemo(function(){return new Connection(endpoint,'recent');},[endpoint]);var sendConnection=useMemo(function(){return new Connection(endpoint,'recent');},[endpoint]);// The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n// is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n// This is a hack to prevent the list from every getting empty\nuseEffect(function(){var id=connection.onAccountChange(new Account().publicKey,function(){});return function(){connection.removeAccountChangeListener(id);};},[connection]);useEffect(function(){var id=connection.onSlotChange(function(){return null;});return function(){connection.removeSlotChangeListener(id);};},[connection]);useEffect(function(){var id=sendConnection.onAccountChange(new Account().publicKey,function(){});return function(){sendConnection.removeAccountChangeListener(id);};},[sendConnection]);useEffect(function(){var id=sendConnection.onSlotChange(function(){return null;});return function(){sendConnection.removeSlotChangeListener(id);};},[sendConnection]);return/*#__PURE__*/_jsx(ConnectionContext.Provider,{value:{endpoint:endpoint,setEndpoint:setEndpoint,connection:connection,sendConnection:sendConnection,availableEndpoints:availableEndpoints,setCustomEndpoints:setCustomEndpoints},children:children});}export function useConnection(){var context=useContext(ConnectionContext);if(!context){throw new Error('Missing connection context');}return context.connection;}export function useSendConnection(){var context=useContext(ConnectionContext);if(!context){throw new Error('Missing connection context');}return context.sendConnection;}export function useConnectionConfig(){var context=useContext(ConnectionContext);if(!context){throw new Error('Missing connection context');}return{endpoint:context.endpoint,endpointInfo:context.availableEndpoints.find(function(info){return info.endpoint===context.endpoint;}),setEndpoint:context.setEndpoint,availableEndpoints:context.availableEndpoints,setCustomEndpoints:context.setCustomEndpoints};}export function useAccountInfo(publicKey){var connection=useConnection();var cacheKey=tuple(connection,publicKey===null||publicKey===void 0?void 0:publicKey.toBase58());var _useAsyncData=useAsyncData(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",publicKey?connection.getAccountInfo(publicKey):null);case 1:case\"end\":return _context.stop();}}},_callee);})),cacheKey,{refreshInterval:60000}),_useAsyncData2=_slicedToArray(_useAsyncData,2),accountInfo=_useAsyncData2[0],loaded=_useAsyncData2[1];useEffect(function(){if(!publicKey){return;}if(accountListenerCount.has(cacheKey)){var currentItem=accountListenerCount.get(cacheKey);++currentItem.count;}else{var previousInfo=null;var subscriptionId=connection.onAccountChange(publicKey,function(info){if(!previousInfo||!previousInfo.data.equals(info.data)||previousInfo.lamports!==info.lamports){previousInfo=info;setCache(cacheKey,info);}});accountListenerCount.set(cacheKey,{count:1,subscriptionId:subscriptionId});}return function(){var currentItem=accountListenerCount.get(cacheKey);var nextCount=currentItem.count-1;if(nextCount<=0){connection.removeAccountChangeListener(currentItem.subscriptionId);accountListenerCount.delete(cacheKey);}else{--currentItem.count;}};// eslint-disable-next-line react-hooks/exhaustive-deps\n},[cacheKey]);var previousInfoRef=useRef(null);if(!accountInfo||!previousInfoRef.current||!previousInfoRef.current.data.equals(accountInfo.data)||previousInfoRef.current.lamports!==accountInfo.lamports){previousInfoRef.current=accountInfo;}return[previousInfoRef.current,loaded];}export function useAccountData(publicKey){var _useAccountInfo=useAccountInfo(publicKey),_useAccountInfo2=_slicedToArray(_useAccountInfo,1),accountInfo=_useAccountInfo2[0];return accountInfo&&accountInfo.data;}","map":{"version":3,"sources":["/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/utils/connection.tsx"],"names":["useLocalStorageState","Account","Connection","React","useContext","useEffect","useMemo","useRef","setCache","useAsyncData","tuple","ENDPOINTS","name","endpoint","custom","accountListenerCount","Map","ConnectionContext","createContext","ConnectionProvider","children","setEndpoint","customEndpoints","setCustomEndpoints","availableEndpoints","concat","connection","sendConnection","id","onAccountChange","publicKey","removeAccountChangeListener","onSlotChange","removeSlotChangeListener","useConnection","context","Error","useSendConnection","useConnectionConfig","endpointInfo","find","info","useAccountInfo","cacheKey","toBase58","getAccountInfo","refreshInterval","accountInfo","loaded","has","currentItem","get","count","previousInfo","subscriptionId","data","equals","lamports","set","nextCount","delete","previousInfoRef","current","useAccountData"],"mappings":"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","sourcesContent":["import { useLocalStorageState } from './utils';\nimport { Account, AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport React, { useContext, useEffect, useMemo, useRef } from 'react';\nimport { setCache, useAsyncData } from './fetch-loop';\nimport tuple from 'immutable-tuple';\nimport { ConnectionContextValues, EndpointInfo } from './types';\n\nexport const ENDPOINTS: EndpointInfo[] = [\n  {\n    name: 'mainnet-beta',\n    endpoint: 'https://solana-api.projectserum.com',\n    custom: false,\n  },\n  { name: 'localnet', endpoint: 'http://127.0.0.1:8899', custom: false },\n];\n\nconst accountListenerCount = new Map();\n\nconst ConnectionContext: React.Context<null | ConnectionContextValues> = React.createContext<null | ConnectionContextValues>(\n  null,\n);\n\nexport function ConnectionProvider({ children }) {\n  const [endpoint, setEndpoint] = useLocalStorageState<string>(\n    'connectionEndpts',\n    ENDPOINTS[0].endpoint,\n  );\n  const [customEndpoints, setCustomEndpoints] = useLocalStorageState<\n    EndpointInfo[]\n  >('customConnectionEndpoints', []);\n  const availableEndpoints = ENDPOINTS.concat(customEndpoints);\n\n  const connection = useMemo(() => new Connection(endpoint, 'recent'), [\n    endpoint,\n  ]);\n  const sendConnection = useMemo(() => new Connection(endpoint, 'recent'), [\n    endpoint,\n  ]);\n\n  // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n  // This is a hack to prevent the list from every getting empty\n  useEffect(() => {\n    const id = connection.onAccountChange(new Account().publicKey, () => {});\n    return () => {\n      connection.removeAccountChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = connection.onSlotChange(() => null);\n    return () => {\n      connection.removeSlotChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = sendConnection.onAccountChange(\n      new Account().publicKey,\n      () => {},\n    );\n    return () => {\n      sendConnection.removeAccountChangeListener(id);\n    };\n  }, [sendConnection]);\n\n  useEffect(() => {\n    const id = sendConnection.onSlotChange(() => null);\n    return () => {\n      sendConnection.removeSlotChangeListener(id);\n    };\n  }, [sendConnection]);\n\n  return (\n    <ConnectionContext.Provider\n      value={{\n        endpoint,\n        setEndpoint,\n        connection,\n        sendConnection,\n        availableEndpoints,\n        setCustomEndpoints,\n      }}\n    >\n      {children}\n    </ConnectionContext.Provider>\n  );\n}\n\nexport function useConnection() {\n  const context = useContext(ConnectionContext);\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n  return context.connection;\n}\n\nexport function useSendConnection() {\n  const context = useContext(ConnectionContext);\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n  return context.sendConnection;\n}\n\nexport function useConnectionConfig() {\n  const context = useContext(ConnectionContext);\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n  return {\n    endpoint: context.endpoint,\n    endpointInfo: context.availableEndpoints.find(\n      (info) => info.endpoint === context.endpoint,\n    ),\n    setEndpoint: context.setEndpoint,\n    availableEndpoints: context.availableEndpoints,\n    setCustomEndpoints: context.setCustomEndpoints,\n  };\n}\n\nexport function useAccountInfo(\n  publicKey: PublicKey | undefined | null,\n): [AccountInfo<Buffer> | null | undefined, boolean] {\n  const connection = useConnection();\n  const cacheKey = tuple(connection, publicKey?.toBase58());\n  const [accountInfo, loaded] = useAsyncData<AccountInfo<Buffer> | null>(\n    async () => (publicKey ? connection.getAccountInfo(publicKey) : null),\n    cacheKey,\n    { refreshInterval: 60_000 },\n  );\n  useEffect(() => {\n    if (!publicKey) {\n      return;\n    }\n    if (accountListenerCount.has(cacheKey)) {\n      let currentItem = accountListenerCount.get(cacheKey);\n      ++currentItem.count;\n    } else {\n      let previousInfo: AccountInfo<Buffer> | null = null;\n      const subscriptionId = connection.onAccountChange(publicKey, (info) => {\n        if (\n          !previousInfo ||\n          !previousInfo.data.equals(info.data) ||\n          previousInfo.lamports !== info.lamports\n        ) {\n          previousInfo = info;\n          setCache(cacheKey, info);\n        }\n      });\n      accountListenerCount.set(cacheKey, { count: 1, subscriptionId });\n    }\n    return () => {\n      let currentItem = accountListenerCount.get(cacheKey);\n      let nextCount = currentItem.count - 1;\n      if (nextCount <= 0) {\n        connection.removeAccountChangeListener(currentItem.subscriptionId);\n        accountListenerCount.delete(cacheKey);\n      } else {\n        --currentItem.count;\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cacheKey]);\n  const previousInfoRef = useRef<AccountInfo<Buffer> | null | undefined>(null);\n  if (\n    !accountInfo ||\n    !previousInfoRef.current ||\n    !previousInfoRef.current.data.equals(accountInfo.data) ||\n    previousInfoRef.current.lamports !== accountInfo.lamports\n  ) {\n    previousInfoRef.current = accountInfo;\n  }\n  return [previousInfoRef.current, loaded];\n}\n\nexport function useAccountData(publicKey) {\n  const [accountInfo] = useAccountInfo(publicKey);\n  return accountInfo && accountInfo.data;\n}\n"]},"metadata":{},"sourceType":"module"}