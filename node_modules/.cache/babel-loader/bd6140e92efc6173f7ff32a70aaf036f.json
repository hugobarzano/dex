{"ast":null,"code":"import _regeneratorRuntime from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{FormEvent,useMemo,useState}from'react';import{AdminControlledPoolInstructions}from'@project-serum/pool';import{TokenInstructions}from'@project-serum/serum';import FloatingElement from'../../../components/layout/FloatingElement';import{useConnection}from'../../../utils/connection';import{useWallet}from'../../../utils/wallet';import{getSelectedTokenAccountForMint,useTokenAccounts}from'../../../utils/markets';import{sendTransaction}from'../../../utils/send';import{notify}from'../../../utils/notifications';import{Account,PublicKey,SystemProgram,Transaction}from'@solana/web3.js';import{AutoComplete,Button,Input,Select,Tabs}from'antd';import{createAssociatedTokenAccount,getAssociatedTokenAddress}from'@project-serum/associated-token';import{parseTokenMintData,useMintToTickers}from'../../../utils/tokens';import BN from'bn.js';import{refreshAllCaches}from'../../../utils/fetch-loop';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var TabPane=Tabs.TabPane;var Option=Select.Option;export function PoolAdminPanel(_ref){var poolInfo=_ref.poolInfo;return/*#__PURE__*/_jsx(FloatingElement,{children:/*#__PURE__*/_jsxs(Tabs,{children:[/*#__PURE__*/_jsx(TabPane,{tab:\"Pause/Unpause\",children:/*#__PURE__*/_jsx(PauseUnpauseTab,{poolInfo:poolInfo})},\"pause\"),/*#__PURE__*/_jsx(TabPane,{tab:\"Add Token\",children:/*#__PURE__*/_jsx(AddAssetTab,{poolInfo:poolInfo})},\"addAsset\"),/*#__PURE__*/_jsx(TabPane,{tab:\"Remove Token\",children:/*#__PURE__*/_jsx(RemoveAssetTab,{poolInfo:poolInfo})},\"removeAsset\"),/*#__PURE__*/_jsx(TabPane,{tab:\"Deposit\",children:/*#__PURE__*/_jsx(DepositTab,{poolInfo:poolInfo})},\"deposit\"),/*#__PURE__*/_jsx(TabPane,{tab:\"Withdraw\",children:/*#__PURE__*/_jsx(WithdrawTab,{poolInfo:poolInfo})},\"withdraw\"),/*#__PURE__*/_jsx(TabPane,{tab:\"Modify Fee\",children:/*#__PURE__*/_jsx(UpdateFeeTab,{poolInfo:poolInfo})},\"updateFee\")]})});}function PauseUnpauseTab(_ref2){var poolInfo=_ref2.poolInfo;var connection=useConnection();var _useWallet=useWallet(),wallet=_useWallet.wallet,connected=_useWallet.connected;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),submitting=_useState2[0],setSubmitting=_useState2[1];function sendPause(){return _sendPause.apply(this,arguments);}function _sendPause(){_sendPause=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var transaction;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(!connected||!wallet)){_context.next=2;break;}return _context.abrupt(\"return\");case 2:setSubmitting(true);_context.prev=3;transaction=new Transaction();transaction.add(AdminControlledPoolInstructions.pause(poolInfo));_context.next=8;return sendTransaction({connection:connection,wallet:wallet,transaction:transaction});case 8:_context.next=13;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](3);notify({message:'Error pausing pool',description:_context.t0.message,type:'error'});case 13:_context.prev=13;setSubmitting(false);return _context.finish(13);case 16:case\"end\":return _context.stop();}}},_callee,null,[[3,10,13,16]]);}));return _sendPause.apply(this,arguments);}function sendUnpause(){return _sendUnpause.apply(this,arguments);}function _sendUnpause(){_sendUnpause=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var transaction;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(!connected||!wallet)){_context2.next=2;break;}return _context2.abrupt(\"return\");case 2:setSubmitting(true);_context2.prev=3;transaction=new Transaction();transaction.add(AdminControlledPoolInstructions.unpause(poolInfo));_context2.next=8;return sendTransaction({connection:connection,wallet:wallet,transaction:transaction});case 8:_context2.next=13;break;case 10:_context2.prev=10;_context2.t0=_context2[\"catch\"](3);notify({message:'Error unpausing pool',description:_context2.t0.message,type:'error'});case 13:_context2.prev=13;setSubmitting(false);return _context2.finish(13);case 16:case\"end\":return _context2.stop();}}},_callee2,null,[[3,10,13,16]]);}));return _sendUnpause.apply(this,arguments);}return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Button,{onClick:sendPause,disabled:submitting,children:\"Pause\"}),' ',/*#__PURE__*/_jsx(Button,{onClick:sendUnpause,disabled:submitting,children:\"Unpause\"})]});}function AddAssetTab(_ref3){var poolInfo=_ref3.poolInfo;var connection=useConnection();var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),address=_useState4[0],setAddress=_useState4[1];var _useWallet2=useWallet(),wallet=_useWallet2.wallet,connected=_useWallet2.connected;var canSubmit=connected&&address;var _useOnSubmitHandler=useOnSubmitHandler('adding asset to pool',/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var mintAddress,vaultAddress,transaction;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:mintAddress=new PublicKey(address);_context3.next=3;return getAssociatedTokenAddress(poolInfo.state.vaultSigner,mintAddress);case 3:vaultAddress=_context3.sent;transaction=new Transaction();_context3.next=7;return connection.getAccountInfo(vaultAddress);case 7:_context3.t0=!_context3.sent;if(!_context3.t0){_context3.next=10;break;}_context3.t0=wallet;case 10:if(!_context3.t0){_context3.next=16;break;}_context3.t1=transaction;_context3.next=14;return createAssociatedTokenAccount(wallet.publicKey,poolInfo.state.vaultSigner,mintAddress);case 14:_context3.t2=_context3.sent;_context3.t1.add.call(_context3.t1,_context3.t2);case 16:transaction.add(AdminControlledPoolInstructions.addAsset(poolInfo,vaultAddress));return _context3.abrupt(\"return\",[transaction,[]]);case 18:case\"end\":return _context3.stop();}}},_callee3);}))),_useOnSubmitHandler2=_slicedToArray(_useOnSubmitHandler,2),onSubmit=_useOnSubmitHandler2[0],submitting=_useOnSubmitHandler2[1];return/*#__PURE__*/_jsxs(\"form\",{onSubmit:onSubmit,children:[/*#__PURE__*/_jsx(MintSelector,{label:\"Token Mint Address\",value:address,onChange:function onChange(value){return setAddress(value);},style:{marginBottom:24}}),/*#__PURE__*/_jsx(SubmitButton,{canSubmit:canSubmit,submitting:submitting})]});}function RemoveAssetTab(_ref5){var poolInfo=_ref5.poolInfo;var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),address=_useState6[0],setAddress=_useState6[1];var _useWallet3=useWallet(),connected=_useWallet3.connected;var canSubmit=connected&&address;var _useOnSubmitHandler3=useOnSubmitHandler('removing asset from pool',/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var _poolInfo$state$asset;var mintAddress,vaultAddress,transaction;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:mintAddress=new PublicKey(address);vaultAddress=(_poolInfo$state$asset=poolInfo.state.assets.find(function(asset){return asset.mint.equals(mintAddress);}))===null||_poolInfo$state$asset===void 0?void 0:_poolInfo$state$asset.vaultAddress;if(vaultAddress){_context4.next=4;break;}throw new Error('Asset not in pool');case 4:transaction=new Transaction();transaction.add(AdminControlledPoolInstructions.removeAsset(poolInfo,vaultAddress));return _context4.abrupt(\"return\",[transaction,[]]);case 7:case\"end\":return _context4.stop();}}},_callee4);}))),_useOnSubmitHandler4=_slicedToArray(_useOnSubmitHandler3,2),onSubmit=_useOnSubmitHandler4[0],submitting=_useOnSubmitHandler4[1];return/*#__PURE__*/_jsxs(\"form\",{onSubmit:onSubmit,children:[/*#__PURE__*/_jsx(MintInPoolSelector,{poolInfo:poolInfo,label:\"Token Mint Address\",value:address,onChange:function onChange(value){return setAddress(value);},style:{marginBottom:24}}),/*#__PURE__*/_jsx(SubmitButton,{canSubmit:canSubmit,submitting:submitting})]});}function DepositTab(_ref7){var poolInfo=_ref7.poolInfo;var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),address=_useState8[0],setAddress=_useState8[1];var _useState9=useState(''),_useState10=_slicedToArray(_useState9,2),quantity=_useState10[0],setQuantity=_useState10[1];var connection=useConnection();var _useWallet4=useWallet(),wallet=_useWallet4.wallet,connected=_useWallet4.connected;var _useTokenAccounts=useTokenAccounts(),_useTokenAccounts2=_slicedToArray(_useTokenAccounts,1),tokenAccounts=_useTokenAccounts2[0];var canSubmit=connected&&address&&tokenAccounts&&parseFloat(quantity);var _useOnSubmitHandler5=useOnSubmitHandler('depositing to pool',/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){var _poolInfo$state$asset2;var mintAddress,vaultAddress,walletTokenAccount,mintAccountInfo,mintDecimals,parsedQuantity,wrappedSolAccount,transaction,signers;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(wallet){_context5.next=2;break;}throw new Error('Wallet is not connected');case 2:mintAddress=new PublicKey(address);vaultAddress=(_poolInfo$state$asset2=poolInfo.state.assets.find(function(asset){return asset.mint.equals(mintAddress);}))===null||_poolInfo$state$asset2===void 0?void 0:_poolInfo$state$asset2.vaultAddress;if(vaultAddress){_context5.next=6;break;}throw new Error('Asset not in pool');case 6:walletTokenAccount=getSelectedTokenAccountForMint(tokenAccounts,mintAddress);if(walletTokenAccount){_context5.next=9;break;}throw new Error('Asset not in wallet');case 9:_context5.next=11;return connection.getAccountInfo(mintAddress);case 11:mintAccountInfo=_context5.sent;if(mintAccountInfo){_context5.next=14;break;}throw new Error('Mint not found');case 14:mintDecimals=parseTokenMintData(mintAccountInfo.data).decimals;parsedQuantity=Math.round(parseFloat(quantity)*Math.pow(10,mintDecimals));wrappedSolAccount=mintAddress.equals(TokenInstructions.WRAPPED_SOL_MINT)&&walletTokenAccount.pubkey.equals(wallet.publicKey)?new Account():null;transaction=new Transaction();signers=[];if(wrappedSolAccount){transaction.add(SystemProgram.createAccount({fromPubkey:wallet.publicKey,lamports:parsedQuantity+2.04e6,newAccountPubkey:wrappedSolAccount.publicKey,programId:TokenInstructions.TOKEN_PROGRAM_ID,space:165}),TokenInstructions.initializeAccount({account:wrappedSolAccount.publicKey,mint:TokenInstructions.WRAPPED_SOL_MINT,owner:wallet.publicKey}),TokenInstructions.transfer({source:wrappedSolAccount.publicKey,destination:vaultAddress,amount:parsedQuantity,owner:wallet.publicKey}),TokenInstructions.closeAccount({source:wrappedSolAccount.publicKey,destination:walletTokenAccount.pubkey,owner:wallet.publicKey}));signers.push(wrappedSolAccount);}else{transaction.add(TokenInstructions.transfer({source:walletTokenAccount.pubkey,destination:vaultAddress,amount:parsedQuantity,owner:wallet.publicKey}));}return _context5.abrupt(\"return\",[transaction,signers]);case 21:case\"end\":return _context5.stop();}}},_callee5);})),true),_useOnSubmitHandler6=_slicedToArray(_useOnSubmitHandler5,2),onSubmit=_useOnSubmitHandler6[0],submitting=_useOnSubmitHandler6[1];return/*#__PURE__*/_jsxs(\"form\",{onSubmit:onSubmit,children:[/*#__PURE__*/_jsx(MintInPoolSelector,{poolInfo:poolInfo,label:\"Token Mint Address\",value:address,onChange:function onChange(value){return setAddress(value);},style:{marginBottom:24}}),/*#__PURE__*/_jsx(Input,{addonBefore:/*#__PURE__*/_jsx(_Fragment,{children:\"Quantity\"}),value:quantity,onChange:function onChange(e){return setQuantity(e.target.value.trim());},style:{marginBottom:24}}),/*#__PURE__*/_jsx(SubmitButton,{canSubmit:canSubmit,submitting:submitting})]});}function WithdrawTab(_ref9){var poolInfo=_ref9.poolInfo;var _useState11=useState(''),_useState12=_slicedToArray(_useState11,2),address=_useState12[0],setAddress=_useState12[1];var _useState13=useState(''),_useState14=_slicedToArray(_useState13,2),quantity=_useState14[0],setQuantity=_useState14[1];var connection=useConnection();var _useWallet5=useWallet(),wallet=_useWallet5.wallet,connected=_useWallet5.connected;var _useTokenAccounts3=useTokenAccounts(),_useTokenAccounts4=_slicedToArray(_useTokenAccounts3,1),tokenAccounts=_useTokenAccounts4[0];var canSubmit=connected&&address&&tokenAccounts&&parseFloat(quantity);var _useOnSubmitHandler7=useOnSubmitHandler('withdrawing from pool',/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(){var _poolInfo$state$asset3;var mintAddress,vaultAddress,walletTokenAccount,mintAccountInfo,mintDecimals,parsedQuantity,wrappedSolAccount,transaction,signers;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:if(wallet){_context6.next=2;break;}throw new Error('Wallet is not connected');case 2:mintAddress=new PublicKey(address);vaultAddress=(_poolInfo$state$asset3=poolInfo.state.assets.find(function(asset){return asset.mint.equals(mintAddress);}))===null||_poolInfo$state$asset3===void 0?void 0:_poolInfo$state$asset3.vaultAddress;if(vaultAddress){_context6.next=6;break;}throw new Error('Asset not in pool');case 6:walletTokenAccount=getSelectedTokenAccountForMint(tokenAccounts,mintAddress);if(walletTokenAccount){_context6.next=9;break;}throw new Error('Asset not in wallet');case 9:_context6.next=11;return connection.getAccountInfo(mintAddress);case 11:mintAccountInfo=_context6.sent;if(mintAccountInfo){_context6.next=14;break;}throw new Error('Mint not found');case 14:mintDecimals=parseTokenMintData(mintAccountInfo.data).decimals;parsedQuantity=Math.round(parseFloat(quantity)*Math.pow(10,mintDecimals));wrappedSolAccount=mintAddress.equals(TokenInstructions.WRAPPED_SOL_MINT)&&walletTokenAccount.pubkey.equals(wallet.publicKey)?new Account():null;transaction=new Transaction();signers=[];if(wrappedSolAccount){transaction.add(SystemProgram.createAccount({fromPubkey:wallet.publicKey,lamports:2.04e6,newAccountPubkey:wrappedSolAccount.publicKey,programId:TokenInstructions.TOKEN_PROGRAM_ID,space:165}),TokenInstructions.initializeAccount({account:wrappedSolAccount.publicKey,mint:TokenInstructions.WRAPPED_SOL_MINT,owner:wallet.publicKey}));signers.push(wrappedSolAccount);}transaction.add(AdminControlledPoolInstructions.approveDelegate(poolInfo,vaultAddress,wallet.publicKey,new BN(parsedQuantity)));if(wrappedSolAccount){transaction.add(TokenInstructions.transfer({source:vaultAddress,destination:wrappedSolAccount.publicKey,amount:parsedQuantity,owner:wallet.publicKey}),TokenInstructions.closeAccount({source:wrappedSolAccount.publicKey,destination:walletTokenAccount.pubkey,owner:wallet.publicKey}));}else{transaction.add(TokenInstructions.transfer({source:vaultAddress,destination:walletTokenAccount.pubkey,amount:parsedQuantity,owner:wallet.publicKey}));}return _context6.abrupt(\"return\",[transaction,signers]);case 23:case\"end\":return _context6.stop();}}},_callee6);}))),_useOnSubmitHandler8=_slicedToArray(_useOnSubmitHandler7,2),onSubmit=_useOnSubmitHandler8[0],submitting=_useOnSubmitHandler8[1];return/*#__PURE__*/_jsxs(\"form\",{onSubmit:onSubmit,children:[/*#__PURE__*/_jsx(MintInPoolSelector,{poolInfo:poolInfo,label:\"Token Mint Address\",value:address,onChange:function onChange(value){return setAddress(value);},style:{marginBottom:24}}),/*#__PURE__*/_jsx(Input,{addonBefore:/*#__PURE__*/_jsx(_Fragment,{children:\"Quantity\"}),value:quantity,onChange:function onChange(e){return setQuantity(e.target.value.trim());},style:{marginBottom:24}}),/*#__PURE__*/_jsx(SubmitButton,{canSubmit:canSubmit,submitting:submitting})]});}function UpdateFeeTab(_ref11){var poolInfo=_ref11.poolInfo;var _useState15=useState(''),_useState16=_slicedToArray(_useState15,2),feeRate=_useState16[0],setFeeRate=_useState16[1];var _useWallet6=useWallet(),connected=_useWallet6.connected;var _useTokenAccounts5=useTokenAccounts(),_useTokenAccounts6=_slicedToArray(_useTokenAccounts5,1),tokenAccounts=_useTokenAccounts6[0];var canSubmit=connected&&tokenAccounts&&parseFloat(feeRate);var _useOnSubmitHandler9=useOnSubmitHandler('changing pool fee',/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(){var transaction;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:transaction=new Transaction();transaction.add(AdminControlledPoolInstructions.updateFee(poolInfo,Math.round(parseFloat(feeRate)*1000000)));return _context7.abrupt(\"return\",[transaction,[]]);case 3:case\"end\":return _context7.stop();}}},_callee7);}))),_useOnSubmitHandler10=_slicedToArray(_useOnSubmitHandler9,2),onSubmit=_useOnSubmitHandler10[0],submitting=_useOnSubmitHandler10[1];return/*#__PURE__*/_jsxs(\"form\",{onSubmit:onSubmit,children:[/*#__PURE__*/_jsx(Input,{addonBefore:/*#__PURE__*/_jsx(_Fragment,{children:\"Fee Rate\"}),value:feeRate,onChange:function onChange(e){return setFeeRate(e.target.value.trim());},style:{marginBottom:24}}),/*#__PURE__*/_jsx(SubmitButton,{canSubmit:canSubmit,submitting:submitting})]});}function useOnSubmitHandler(description,makeTransaction){var refresh=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var connection=useConnection();var _useWallet7=useWallet(),wallet=_useWallet7.wallet,connected=_useWallet7.connected;var _useState17=useState(false),_useState18=_slicedToArray(_useState17,2),submitting=_useState18[0],setSubmitting=_useState18[1];function onSubmit(_x){return _onSubmit.apply(this,arguments);}function _onSubmit(){_onSubmit=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(e){var _yield$makeTransactio,_yield$makeTransactio2,transaction,signers;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:e.preventDefault();if(!submitting){_context8.next=3;break;}return _context8.abrupt(\"return\");case 3:setSubmitting(true);_context8.prev=4;if(!(!connected||!wallet)){_context8.next=7;break;}throw new Error('Wallet not connected');case 7:_context8.next=9;return makeTransaction();case 9:_yield$makeTransactio=_context8.sent;_yield$makeTransactio2=_slicedToArray(_yield$makeTransactio,2);transaction=_yield$makeTransactio2[0];signers=_yield$makeTransactio2[1];_context8.next=15;return sendTransaction({connection:connection,wallet:wallet,transaction:transaction,signers:signers});case 15:if(refresh){refreshAllCaches();}_context8.next=21;break;case 18:_context8.prev=18;_context8.t0=_context8[\"catch\"](4);notify({message:\"Error \".concat(description),description:_context8.t0.message,type:'error'});case 21:_context8.prev=21;setSubmitting(false);return _context8.finish(21);case 24:case\"end\":return _context8.stop();}}},_callee8,null,[[4,18,21,24]]);}));return _onSubmit.apply(this,arguments);}return[onSubmit,submitting];}function SubmitButton(_ref13){var canSubmit=_ref13.canSubmit,submitting=_ref13.submitting;var _useWallet8=useWallet(),connected=_useWallet8.connected;return/*#__PURE__*/_jsx(Button,{htmlType:\"submit\",type:\"primary\",disabled:!canSubmit||submitting,children:!connected?'Wallet not connected':'Submit'});}function MintInPoolSelector(_ref14){var poolInfo=_ref14.poolInfo,label=_ref14.label,value=_ref14.value,onChange=_ref14.onChange,style=_ref14.style;var mintToTickers=useMintToTickers();return/*#__PURE__*/_jsxs(Input.Group,{style:style,children:[/*#__PURE__*/_jsx(\"span\",{className:\"ant-input-group-addon\",children:label}),/*#__PURE__*/_jsx(Select,{onChange:onChange,value:value,style:{width:'100%'},children:poolInfo.state.assets.map(function(asset){return/*#__PURE__*/_jsx(Option,{value:asset.mint.toBase58(),children:mintToTickers[asset.mint.toBase58()]?/*#__PURE__*/_jsxs(_Fragment,{children:[mintToTickers[asset.mint.toBase58()],\" (\",asset.mint.toBase58(),\")\"]}):asset.mint.toBase58()},asset.mint.toBase58());})})]});}function MintSelector(_ref15){var label=_ref15.label,style=_ref15.style,value=_ref15.value,_onChange=_ref15.onChange;var mintToTickers=useMintToTickers();var options=useMemo(function(){return Object.entries(mintToTickers).filter(function(_ref16){var _ref17=_slicedToArray(_ref16,2),mintAddress=_ref17[0],ticker=_ref17[1];return mintAddress.includes(value)||ticker.toLowerCase().includes(value.toLowerCase());}).map(function(_ref18){var _ref19=_slicedToArray(_ref18,2),mintAddress=_ref19[0],ticker=_ref19[1];return{value:mintAddress,label:/*#__PURE__*/_jsxs(_Fragment,{children:[ticker,\" (\",mintAddress,\")\"]})};});},[mintToTickers,value]);return/*#__PURE__*/_jsxs(Input.Group,{style:style,children:[/*#__PURE__*/_jsx(\"span\",{className:\"ant-input-group-addon\",children:label}),/*#__PURE__*/_jsx(AutoComplete,{options:options,value:value,onChange:function onChange(e){return _onChange(e);},style:{width:'100%'}})]});}","map":{"version":3,"sources":["/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/src/pages/pools/PoolPage/PoolAdminPanel.tsx"],"names":["React","FormEvent","useMemo","useState","AdminControlledPoolInstructions","TokenInstructions","FloatingElement","useConnection","useWallet","getSelectedTokenAccountForMint","useTokenAccounts","sendTransaction","notify","Account","PublicKey","SystemProgram","Transaction","AutoComplete","Button","Input","Select","Tabs","createAssociatedTokenAccount","getAssociatedTokenAddress","parseTokenMintData","useMintToTickers","BN","refreshAllCaches","TabPane","Option","PoolAdminPanel","poolInfo","PauseUnpauseTab","connection","wallet","connected","submitting","setSubmitting","sendPause","transaction","add","pause","message","description","type","sendUnpause","unpause","AddAssetTab","address","setAddress","canSubmit","useOnSubmitHandler","mintAddress","state","vaultSigner","vaultAddress","getAccountInfo","publicKey","addAsset","onSubmit","value","marginBottom","RemoveAssetTab","assets","find","asset","mint","equals","Error","removeAsset","DepositTab","quantity","setQuantity","tokenAccounts","parseFloat","walletTokenAccount","mintAccountInfo","mintDecimals","data","decimals","parsedQuantity","Math","round","wrappedSolAccount","WRAPPED_SOL_MINT","pubkey","signers","createAccount","fromPubkey","lamports","newAccountPubkey","programId","TOKEN_PROGRAM_ID","space","initializeAccount","account","owner","transfer","source","destination","amount","closeAccount","push","e","target","trim","WithdrawTab","approveDelegate","UpdateFeeTab","feeRate","setFeeRate","updateFee","makeTransaction","refresh","preventDefault","SubmitButton","MintInPoolSelector","label","onChange","style","mintToTickers","width","map","toBase58","MintSelector","options","Object","entries","filter","ticker","includes","toLowerCase"],"mappings":"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","sourcesContent":["import React, { FormEvent, useMemo, useState } from 'react';\nimport { AdminControlledPoolInstructions, PoolInfo } from '@project-serum/pool';\nimport { TokenInstructions } from '@project-serum/serum';\nimport FloatingElement from '../../../components/layout/FloatingElement';\nimport { useConnection } from '../../../utils/connection';\nimport { useWallet } from '../../../utils/wallet';\nimport {\n  getSelectedTokenAccountForMint,\n  useTokenAccounts,\n} from '../../../utils/markets';\nimport { sendTransaction } from '../../../utils/send';\nimport { notify } from '../../../utils/notifications';\nimport {\n  Account,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n} from '@solana/web3.js';\nimport { AutoComplete, Button, Input, Select, Tabs } from 'antd';\nimport {\n  createAssociatedTokenAccount,\n  getAssociatedTokenAddress,\n} from '@project-serum/associated-token';\nimport { parseTokenMintData, useMintToTickers } from '../../../utils/tokens';\nimport BN from 'bn.js';\nimport { refreshAllCaches } from '../../../utils/fetch-loop';\n\nconst { TabPane } = Tabs;\nconst { Option } = Select;\n\nexport function PoolAdminPanel({ poolInfo }: { poolInfo: PoolInfo }) {\n  return (\n    <FloatingElement>\n      <Tabs>\n        <TabPane tab=\"Pause/Unpause\" key=\"pause\">\n          <PauseUnpauseTab poolInfo={poolInfo} />\n        </TabPane>\n        <TabPane tab=\"Add Token\" key=\"addAsset\">\n          <AddAssetTab poolInfo={poolInfo} />\n        </TabPane>\n        <TabPane tab=\"Remove Token\" key=\"removeAsset\">\n          <RemoveAssetTab poolInfo={poolInfo} />\n        </TabPane>\n        <TabPane tab=\"Deposit\" key=\"deposit\">\n          <DepositTab poolInfo={poolInfo} />\n        </TabPane>\n        <TabPane tab=\"Withdraw\" key=\"withdraw\">\n          <WithdrawTab poolInfo={poolInfo} />\n        </TabPane>\n        <TabPane tab=\"Modify Fee\" key=\"updateFee\">\n          <UpdateFeeTab poolInfo={poolInfo} />\n        </TabPane>\n      </Tabs>\n    </FloatingElement>\n  );\n}\n\ninterface TabParams {\n  poolInfo: PoolInfo;\n}\n\nfunction PauseUnpauseTab({ poolInfo }: TabParams) {\n  const connection = useConnection();\n  const { wallet, connected } = useWallet();\n  const [submitting, setSubmitting] = useState(false);\n\n  async function sendPause() {\n    if (!connected || !wallet) {\n      return;\n    }\n    setSubmitting(true);\n    try {\n      const transaction = new Transaction();\n      transaction.add(AdminControlledPoolInstructions.pause(poolInfo));\n      await sendTransaction({ connection, wallet, transaction });\n    } catch (e) {\n      notify({\n        message: 'Error pausing pool',\n        description: e.message,\n        type: 'error',\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  async function sendUnpause() {\n    if (!connected || !wallet) {\n      return;\n    }\n    setSubmitting(true);\n    try {\n      const transaction = new Transaction();\n      transaction.add(AdminControlledPoolInstructions.unpause(poolInfo));\n      await sendTransaction({ connection, wallet, transaction });\n    } catch (e) {\n      notify({\n        message: 'Error unpausing pool',\n        description: e.message,\n        type: 'error',\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return (\n    <>\n      <Button onClick={sendPause} disabled={submitting}>\n        Pause\n      </Button>{' '}\n      <Button onClick={sendUnpause} disabled={submitting}>\n        Unpause\n      </Button>\n    </>\n  );\n}\n\nfunction AddAssetTab({ poolInfo }: TabParams) {\n  const connection = useConnection();\n  const [address, setAddress] = useState('');\n  const { wallet, connected } = useWallet();\n  const canSubmit = connected && address;\n  const [onSubmit, submitting] = useOnSubmitHandler(\n    'adding asset to pool',\n    async () => {\n      const mintAddress = new PublicKey(address);\n      const vaultAddress = await getAssociatedTokenAddress(\n        poolInfo.state.vaultSigner,\n        mintAddress,\n      );\n      const transaction = new Transaction();\n      if (!(await connection.getAccountInfo(vaultAddress)) && wallet) {\n        transaction.add(\n          await createAssociatedTokenAccount(\n            wallet.publicKey,\n            poolInfo.state.vaultSigner,\n            mintAddress,\n          ),\n        );\n      }\n      transaction.add(\n        AdminControlledPoolInstructions.addAsset(poolInfo, vaultAddress),\n      );\n      return [transaction, []];\n    },\n  );\n\n  return (\n    <form onSubmit={onSubmit}>\n      <MintSelector\n        label=\"Token Mint Address\"\n        value={address}\n        onChange={(value) => setAddress(value)}\n        style={{ marginBottom: 24 }}\n      />\n      <SubmitButton canSubmit={canSubmit} submitting={submitting} />\n    </form>\n  );\n}\n\nfunction RemoveAssetTab({ poolInfo }: TabParams) {\n  const [address, setAddress] = useState('');\n  const { connected } = useWallet();\n  const canSubmit = connected && address;\n  const [onSubmit, submitting] = useOnSubmitHandler(\n    'removing asset from pool',\n    async () => {\n      const mintAddress = new PublicKey(address);\n      const vaultAddress = poolInfo.state.assets.find((asset) =>\n        asset.mint.equals(mintAddress),\n      )?.vaultAddress;\n      if (!vaultAddress) {\n        throw new Error('Asset not in pool');\n      }\n      const transaction = new Transaction();\n      transaction.add(\n        AdminControlledPoolInstructions.removeAsset(poolInfo, vaultAddress),\n      );\n      return [transaction, []];\n    },\n  );\n\n  return (\n    <form onSubmit={onSubmit}>\n      <MintInPoolSelector\n        poolInfo={poolInfo}\n        label=\"Token Mint Address\"\n        value={address}\n        onChange={(value) => setAddress(value)}\n        style={{ marginBottom: 24 }}\n      />\n      <SubmitButton canSubmit={canSubmit} submitting={submitting} />\n    </form>\n  );\n}\n\nfunction DepositTab({ poolInfo }: TabParams) {\n  const [address, setAddress] = useState('');\n  const [quantity, setQuantity] = useState('');\n\n  const connection = useConnection();\n  const { wallet, connected } = useWallet();\n  const [tokenAccounts] = useTokenAccounts();\n  const canSubmit =\n    connected && address && tokenAccounts && parseFloat(quantity);\n\n  const [onSubmit, submitting] = useOnSubmitHandler(\n    'depositing to pool',\n    async () => {\n      if (!wallet) {\n        throw new Error('Wallet is not connected');\n      }\n\n      const mintAddress = new PublicKey(address);\n      const vaultAddress = poolInfo.state.assets.find((asset) =>\n        asset.mint.equals(mintAddress),\n      )?.vaultAddress;\n      if (!vaultAddress) {\n        throw new Error('Asset not in pool');\n      }\n\n      const walletTokenAccount = getSelectedTokenAccountForMint(\n        tokenAccounts,\n        mintAddress,\n      );\n      if (!walletTokenAccount) {\n        throw new Error('Asset not in wallet');\n      }\n\n      const mintAccountInfo = await connection.getAccountInfo(mintAddress);\n      if (!mintAccountInfo) {\n        throw new Error('Mint not found');\n      }\n      const mintDecimals = parseTokenMintData(mintAccountInfo.data).decimals;\n      const parsedQuantity = Math.round(\n        parseFloat(quantity) * 10 ** mintDecimals,\n      );\n\n      const wrappedSolAccount =\n        mintAddress.equals(TokenInstructions.WRAPPED_SOL_MINT) &&\n        walletTokenAccount.pubkey.equals(wallet.publicKey)\n          ? new Account()\n          : null;\n\n      const transaction = new Transaction();\n      const signers: Account[] = [];\n      if (wrappedSolAccount) {\n        transaction.add(\n          SystemProgram.createAccount({\n            fromPubkey: wallet.publicKey,\n            lamports: parsedQuantity + 2.04e6,\n            newAccountPubkey: wrappedSolAccount.publicKey,\n            programId: TokenInstructions.TOKEN_PROGRAM_ID,\n            space: 165,\n          }),\n          TokenInstructions.initializeAccount({\n            account: wrappedSolAccount.publicKey,\n            mint: TokenInstructions.WRAPPED_SOL_MINT,\n            owner: wallet.publicKey,\n          }),\n          TokenInstructions.transfer({\n            source: wrappedSolAccount.publicKey,\n            destination: vaultAddress,\n            amount: parsedQuantity,\n            owner: wallet.publicKey,\n          }),\n          TokenInstructions.closeAccount({\n            source: wrappedSolAccount.publicKey,\n            destination: walletTokenAccount.pubkey,\n            owner: wallet.publicKey,\n          }),\n        );\n        signers.push(wrappedSolAccount);\n      } else {\n        transaction.add(\n          TokenInstructions.transfer({\n            source: walletTokenAccount.pubkey,\n            destination: vaultAddress,\n            amount: parsedQuantity,\n            owner: wallet.publicKey,\n          }),\n        );\n      }\n      return [transaction, signers];\n    },\n    true,\n  );\n\n  return (\n    <form onSubmit={onSubmit}>\n      <MintInPoolSelector\n        poolInfo={poolInfo}\n        label=\"Token Mint Address\"\n        value={address}\n        onChange={(value) => setAddress(value)}\n        style={{ marginBottom: 24 }}\n      />\n      <Input\n        addonBefore={<>Quantity</>}\n        value={quantity}\n        onChange={(e) => setQuantity(e.target.value.trim())}\n        style={{ marginBottom: 24 }}\n      />\n      <SubmitButton canSubmit={canSubmit} submitting={submitting} />\n    </form>\n  );\n}\n\nfunction WithdrawTab({ poolInfo }: TabParams) {\n  const [address, setAddress] = useState('');\n  const [quantity, setQuantity] = useState('');\n\n  const connection = useConnection();\n  const { wallet, connected } = useWallet();\n  const [tokenAccounts] = useTokenAccounts();\n  const canSubmit =\n    connected && address && tokenAccounts && parseFloat(quantity);\n\n  const [onSubmit, submitting] = useOnSubmitHandler(\n    'withdrawing from pool',\n    async () => {\n      if (!wallet) {\n        throw new Error('Wallet is not connected');\n      }\n\n      const mintAddress = new PublicKey(address);\n      const vaultAddress = poolInfo.state.assets.find((asset) =>\n        asset.mint.equals(mintAddress),\n      )?.vaultAddress;\n      if (!vaultAddress) {\n        throw new Error('Asset not in pool');\n      }\n\n      const walletTokenAccount = getSelectedTokenAccountForMint(\n        tokenAccounts,\n        mintAddress,\n      );\n      if (!walletTokenAccount) {\n        throw new Error('Asset not in wallet');\n      }\n\n      const mintAccountInfo = await connection.getAccountInfo(mintAddress);\n      if (!mintAccountInfo) {\n        throw new Error('Mint not found');\n      }\n      const mintDecimals = parseTokenMintData(mintAccountInfo.data).decimals;\n      const parsedQuantity = Math.round(\n        parseFloat(quantity) * 10 ** mintDecimals,\n      );\n\n      const wrappedSolAccount =\n        mintAddress.equals(TokenInstructions.WRAPPED_SOL_MINT) &&\n        walletTokenAccount.pubkey.equals(wallet.publicKey)\n          ? new Account()\n          : null;\n\n      const transaction = new Transaction();\n      const signers: Account[] = [];\n      if (wrappedSolAccount) {\n        transaction.add(\n          SystemProgram.createAccount({\n            fromPubkey: wallet.publicKey,\n            lamports: 2.04e6,\n            newAccountPubkey: wrappedSolAccount.publicKey,\n            programId: TokenInstructions.TOKEN_PROGRAM_ID,\n            space: 165,\n          }),\n          TokenInstructions.initializeAccount({\n            account: wrappedSolAccount.publicKey,\n            mint: TokenInstructions.WRAPPED_SOL_MINT,\n            owner: wallet.publicKey,\n          }),\n        );\n        signers.push(wrappedSolAccount);\n      }\n      transaction.add(\n        AdminControlledPoolInstructions.approveDelegate(\n          poolInfo,\n          vaultAddress,\n          wallet.publicKey,\n          new BN(parsedQuantity),\n        ),\n      );\n      if (wrappedSolAccount) {\n        transaction.add(\n          TokenInstructions.transfer({\n            source: vaultAddress,\n            destination: wrappedSolAccount.publicKey,\n            amount: parsedQuantity,\n            owner: wallet.publicKey,\n          }),\n          TokenInstructions.closeAccount({\n            source: wrappedSolAccount.publicKey,\n            destination: walletTokenAccount.pubkey,\n            owner: wallet.publicKey,\n          }),\n        );\n      } else {\n        transaction.add(\n          TokenInstructions.transfer({\n            source: vaultAddress,\n            destination: walletTokenAccount.pubkey,\n            amount: parsedQuantity,\n            owner: wallet.publicKey,\n          }),\n        );\n      }\n      return [transaction, signers];\n    },\n  );\n\n  return (\n    <form onSubmit={onSubmit}>\n      <MintInPoolSelector\n        poolInfo={poolInfo}\n        label=\"Token Mint Address\"\n        value={address}\n        onChange={(value) => setAddress(value)}\n        style={{ marginBottom: 24 }}\n      />\n      <Input\n        addonBefore={<>Quantity</>}\n        value={quantity}\n        onChange={(e) => setQuantity(e.target.value.trim())}\n        style={{ marginBottom: 24 }}\n      />\n      <SubmitButton canSubmit={canSubmit} submitting={submitting} />\n    </form>\n  );\n}\n\nfunction UpdateFeeTab({ poolInfo }: TabParams) {\n  const [feeRate, setFeeRate] = useState('');\n\n  const { connected } = useWallet();\n  const [tokenAccounts] = useTokenAccounts();\n  const canSubmit = connected && tokenAccounts && parseFloat(feeRate);\n\n  const [onSubmit, submitting] = useOnSubmitHandler(\n    'changing pool fee',\n    async () => {\n      const transaction = new Transaction();\n      transaction.add(\n        AdminControlledPoolInstructions.updateFee(\n          poolInfo,\n          Math.round(parseFloat(feeRate) * 1_000_000),\n        ),\n      );\n      return [transaction, []];\n    },\n  );\n\n  return (\n    <form onSubmit={onSubmit}>\n      <Input\n        addonBefore={<>Fee Rate</>}\n        value={feeRate}\n        onChange={(e) => setFeeRate(e.target.value.trim())}\n        style={{ marginBottom: 24 }}\n      />\n      <SubmitButton canSubmit={canSubmit} submitting={submitting} />\n    </form>\n  );\n}\n\nfunction useOnSubmitHandler(\n  description: string,\n  makeTransaction: () => Promise<[Transaction, Account[]]>,\n  refresh = false,\n): [(FormEvent) => void, boolean] {\n  const connection = useConnection();\n  const { wallet, connected } = useWallet();\n  const [submitting, setSubmitting] = useState(false);\n\n  async function onSubmit(e: FormEvent) {\n    e.preventDefault();\n    if (submitting) {\n      return;\n    }\n    setSubmitting(true);\n    try {\n      if (!connected || !wallet) {\n        throw new Error('Wallet not connected');\n      }\n      const [transaction, signers] = await makeTransaction();\n      await sendTransaction({ connection, wallet, transaction, signers });\n      if (refresh) {\n        refreshAllCaches();\n      }\n    } catch (e) {\n      notify({\n        message: `Error ${description}`,\n        description: e.message,\n        type: 'error',\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return [onSubmit, submitting];\n}\n\nfunction SubmitButton({ canSubmit, submitting }) {\n  const { connected } = useWallet();\n  return (\n    <Button\n      htmlType=\"submit\"\n      type=\"primary\"\n      disabled={!canSubmit || submitting}\n    >\n      {!connected ? 'Wallet not connected' : 'Submit'}\n    </Button>\n  );\n}\n\nfunction MintInPoolSelector({\n  poolInfo,\n  label,\n  value,\n  onChange,\n  style,\n}: {\n  poolInfo: PoolInfo;\n  label: string;\n  value: string;\n  onChange: (string) => void;\n  style: any;\n}) {\n  const mintToTickers = useMintToTickers();\n  return (\n    <Input.Group style={style}>\n      <span className=\"ant-input-group-addon\">{label}</span>\n      <Select onChange={onChange} value={value} style={{ width: '100%' }}>\n        {poolInfo.state.assets.map((asset) => (\n          <Option value={asset.mint.toBase58()} key={asset.mint.toBase58()}>\n            {mintToTickers[asset.mint.toBase58()] ? (\n              <>\n                {mintToTickers[asset.mint.toBase58()]} ({asset.mint.toBase58()})\n              </>\n            ) : (\n              asset.mint.toBase58()\n            )}\n          </Option>\n        ))}\n      </Select>\n    </Input.Group>\n  );\n}\n\nfunction MintSelector({ label, style, value, onChange }) {\n  const mintToTickers = useMintToTickers();\n  const options = useMemo(() => {\n    return Object.entries(mintToTickers)\n      .filter(\n        ([mintAddress, ticker]) =>\n          mintAddress.includes(value) ||\n          ticker.toLowerCase().includes(value.toLowerCase()),\n      )\n      .map(([mintAddress, ticker]) => ({\n        value: mintAddress,\n        label: (\n          <>\n            {ticker} ({mintAddress})\n          </>\n        ),\n      }));\n  }, [mintToTickers, value]);\n  return (\n    <Input.Group style={style}>\n      <span className=\"ant-input-group-addon\">{label}</span>\n      <AutoComplete\n        options={options}\n        value={value}\n        onChange={(e) => onChange(e)}\n        style={{ width: '100%' }}\n      />\n    </Input.Group>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}