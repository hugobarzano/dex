{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deleteNameRegistry = exports.transferNameOwnership = exports.updateNameRegistryData = exports.createNameRegistry = exports.VERIFICATION_AUTHORITY_OFFSET = exports.HASH_PREFIX = exports.NAME_PROGRAM_ID = void 0;\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar instructions_1 = require(\"./instructions\");\n\nvar state_1 = require(\"./state\");\n\nvar utils_1 = require(\"./utils\");\n\nvar utils_2 = require(\"./utils\"); ////////////////////////////////////////////////////////////\n\n\nexports.NAME_PROGRAM_ID = new web3_js_1.PublicKey('namesLPneVptA9Z5rqUDD9tMTWEJwofgaYwp8cawRkX');\nexports.HASH_PREFIX = 'SPL Name Service';\nexports.VERIFICATION_AUTHORITY_OFFSET = 64; ////////////////////////////////////////////////////////////\n\n/**\n * Creates a name account with the given rent budget, allocated space, owner and class.\n *\n * @param connection The solana connection object to the RPC node\n * @param name The name of the new account\n * @param space The space in bytes allocated to the account\n * @param payerKey The allocation cost payer\n * @param nameOwner The pubkey to be set as owner of the new name account\n * @param lamports The budget to be set for the name account. If not specified, it'll be the minimum for rent exemption\n * @param nameClass The class of this new name\n * @param parentName The parent name of the new name. If specified its owner needs to sign\n * @returns\n */\n\nfunction createNameRegistry(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n  return _createNameRegistry.apply(this, arguments);\n}\n\nfunction _createNameRegistry() {\n  _createNameRegistry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection, name, space, payerKey, nameOwner, lamports, nameClass, parentName) {\n    var hashed_name, nameAccountKey, balance, nameParentOwner, parentAccount, createNameInstr;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return utils_2.getHashedName(name);\n\n          case 2:\n            hashed_name = _context.sent;\n            _context.next = 5;\n            return utils_2.getNameAccountKey(hashed_name, nameClass, parentName);\n\n          case 5:\n            nameAccountKey = _context.sent;\n            space += 96; // Accounting for the Registry State Header\n\n            if (!lamports) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.t0 = lamports;\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.next = 13;\n            return connection.getMinimumBalanceForRentExemption(space);\n\n          case 13:\n            _context.t0 = _context.sent;\n\n          case 14:\n            balance = _context.t0;\n\n            if (!parentName) {\n              _context.next = 20;\n              break;\n            }\n\n            _context.next = 18;\n            return utils_2.getNameOwner(connection, parentName);\n\n          case 18:\n            parentAccount = _context.sent;\n            nameParentOwner = parentAccount.owner;\n\n          case 20:\n            createNameInstr = instructions_1.createInstruction(exports.NAME_PROGRAM_ID, web3_js_1.SystemProgram.programId, nameAccountKey, nameOwner, payerKey, hashed_name, new utils_1.Numberu64(balance), new utils_2.Numberu32(space), nameClass, parentName, nameParentOwner);\n            return _context.abrupt(\"return\", createNameInstr);\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _createNameRegistry.apply(this, arguments);\n}\n\nexports.createNameRegistry = createNameRegistry;\n/**\n * Overwrite the data of the given name registry.\n *\n * @param connection The solana connection object to the RPC node\n * @param name The name of the name registry to update\n * @param offset The offset to which the data should be written into the registry\n * @param input_data The data to be written\n * @param nameClass The class of this name, if it exsists\n * @param nameParent The parent name of this name, if it exists\n */\n\nfunction updateNameRegistryData(_x9, _x10, _x11, _x12, _x13, _x14) {\n  return _updateNameRegistryData.apply(this, arguments);\n}\n\nfunction _updateNameRegistryData() {\n  _updateNameRegistryData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection, name, offset, input_data, nameClass, nameParent) {\n    var hashed_name, nameAccountKey, signer, updateInstr;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return utils_2.getHashedName(name);\n\n          case 2:\n            hashed_name = _context2.sent;\n            _context2.next = 5;\n            return utils_2.getNameAccountKey(hashed_name, nameClass, nameParent);\n\n          case 5:\n            nameAccountKey = _context2.sent;\n\n            if (!nameClass) {\n              _context2.next = 10;\n              break;\n            }\n\n            signer = nameClass;\n            _context2.next = 13;\n            break;\n\n          case 10:\n            _context2.next = 12;\n            return state_1.NameRegistryState.retrieve(connection, nameAccountKey);\n\n          case 12:\n            signer = _context2.sent.owner;\n\n          case 13:\n            updateInstr = instructions_1.updateInstruction(exports.NAME_PROGRAM_ID, nameAccountKey, new utils_2.Numberu32(offset), input_data, signer);\n            return _context2.abrupt(\"return\", updateInstr);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _updateNameRegistryData.apply(this, arguments);\n}\n\nexports.updateNameRegistryData = updateNameRegistryData;\n/**\n * Change the owner of a given name account.\n *\n * @param connection The solana connection object to the RPC node\n * @param name The name of the name account\n * @param newOwner The new owner to be set\n * @param curentNameOwner the current name Owner\n * @param nameClass The class of this name, if it exsists\n * @param nameParent The parent name of this name, if it exists\n * @returns\n */\n\nfunction transferNameOwnership(_x15, _x16, _x17, _x18, _x19) {\n  return _transferNameOwnership.apply(this, arguments);\n}\n\nfunction _transferNameOwnership() {\n  _transferNameOwnership = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(connection, name, newOwner, nameClass, nameParent) {\n    var hashed_name, nameAccountKey, curentNameOwner, transferInstr;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return utils_2.getHashedName(name);\n\n          case 2:\n            hashed_name = _context3.sent;\n            _context3.next = 5;\n            return utils_2.getNameAccountKey(hashed_name, nameClass, nameParent);\n\n          case 5:\n            nameAccountKey = _context3.sent;\n\n            if (!nameClass) {\n              _context3.next = 10;\n              break;\n            }\n\n            curentNameOwner = nameClass;\n            _context3.next = 13;\n            break;\n\n          case 10:\n            _context3.next = 12;\n            return state_1.NameRegistryState.retrieve(connection, nameAccountKey);\n\n          case 12:\n            curentNameOwner = _context3.sent.owner;\n\n          case 13:\n            transferInstr = instructions_1.transferInstruction(exports.NAME_PROGRAM_ID, nameAccountKey, newOwner, curentNameOwner, nameClass);\n            return _context3.abrupt(\"return\", transferInstr);\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _transferNameOwnership.apply(this, arguments);\n}\n\nexports.transferNameOwnership = transferNameOwnership;\n/**\n * Delete the name account and transfer the rent to the target.\n *\n * @param connection The solana connection object to the RPC node\n * @param name The name of the name account\n * @param refundTargetKey The refund destination address\n * @param nameClass The class of this name, if it exsists\n * @param nameParent The parent name of this name, if it exists\n * @returns\n */\n\nfunction deleteNameRegistry(_x20, _x21, _x22, _x23, _x24) {\n  return _deleteNameRegistry.apply(this, arguments);\n}\n\nfunction _deleteNameRegistry() {\n  _deleteNameRegistry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(connection, name, refundTargetKey, nameClass, nameParent) {\n    var hashed_name, nameAccountKey, nameOwner, changeAuthoritiesInstr;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return utils_2.getHashedName(name);\n\n          case 2:\n            hashed_name = _context4.sent;\n            _context4.next = 5;\n            return utils_2.getNameAccountKey(hashed_name, nameClass, nameParent);\n\n          case 5:\n            nameAccountKey = _context4.sent;\n\n            if (!nameClass) {\n              _context4.next = 10;\n              break;\n            }\n\n            nameOwner = nameClass;\n            _context4.next = 13;\n            break;\n\n          case 10:\n            _context4.next = 12;\n            return state_1.NameRegistryState.retrieve(connection, nameAccountKey);\n\n          case 12:\n            nameOwner = _context4.sent.owner;\n\n          case 13:\n            changeAuthoritiesInstr = instructions_1.deleteInstruction(exports.NAME_PROGRAM_ID, nameAccountKey, refundTargetKey, nameOwner);\n            return _context4.abrupt(\"return\", changeAuthoritiesInstr);\n\n          case 15:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _deleteNameRegistry.apply(this, arguments);\n}\n\nexports.deleteNameRegistry = deleteNameRegistry;","map":{"version":3,"sources":["../src/bindings.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deleteNameRegistry = exports.transferNameOwnership = exports.updateNameRegistryData = exports.createNameRegistry = exports.VERIFICATION_AUTHORITY_OFFSET = exports.HASH_PREFIX = exports.NAME_PROGRAM_ID = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst instructions_1 = require(\"./instructions\");\nconst state_1 = require(\"./state\");\nconst utils_1 = require(\"./utils\");\nconst utils_2 = require(\"./utils\");\n////////////////////////////////////////////////////////////\nexports.NAME_PROGRAM_ID = new web3_js_1.PublicKey('namesLPneVptA9Z5rqUDD9tMTWEJwofgaYwp8cawRkX');\nexports.HASH_PREFIX = 'SPL Name Service';\nexports.VERIFICATION_AUTHORITY_OFFSET = 64;\n////////////////////////////////////////////////////////////\n/**\n * Creates a name account with the given rent budget, allocated space, owner and class.\n *\n * @param connection The solana connection object to the RPC node\n * @param name The name of the new account\n * @param space The space in bytes allocated to the account\n * @param payerKey The allocation cost payer\n * @param nameOwner The pubkey to be set as owner of the new name account\n * @param lamports The budget to be set for the name account. If not specified, it'll be the minimum for rent exemption\n * @param nameClass The class of this new name\n * @param parentName The parent name of the new name. If specified its owner needs to sign\n * @returns\n */\nasync function createNameRegistry(connection, name, space, payerKey, nameOwner, lamports, nameClass, parentName) {\n    const hashed_name = await utils_2.getHashedName(name);\n    const nameAccountKey = await utils_2.getNameAccountKey(hashed_name, nameClass, parentName);\n    space += 96; // Accounting for the Registry State Header\n    const balance = lamports\n        ? lamports\n        : await connection.getMinimumBalanceForRentExemption(space);\n    let nameParentOwner;\n    if (parentName) {\n        const parentAccount = await utils_2.getNameOwner(connection, parentName);\n        nameParentOwner = parentAccount.owner;\n    }\n    const createNameInstr = instructions_1.createInstruction(exports.NAME_PROGRAM_ID, web3_js_1.SystemProgram.programId, nameAccountKey, nameOwner, payerKey, hashed_name, new utils_1.Numberu64(balance), new utils_2.Numberu32(space), nameClass, parentName, nameParentOwner);\n    return createNameInstr;\n}\nexports.createNameRegistry = createNameRegistry;\n/**\n * Overwrite the data of the given name registry.\n *\n * @param connection The solana connection object to the RPC node\n * @param name The name of the name registry to update\n * @param offset The offset to which the data should be written into the registry\n * @param input_data The data to be written\n * @param nameClass The class of this name, if it exsists\n * @param nameParent The parent name of this name, if it exists\n */\nasync function updateNameRegistryData(connection, name, offset, input_data, nameClass, nameParent) {\n    const hashed_name = await utils_2.getHashedName(name);\n    const nameAccountKey = await utils_2.getNameAccountKey(hashed_name, nameClass, nameParent);\n    let signer;\n    if (nameClass) {\n        signer = nameClass;\n    }\n    else {\n        signer = (await state_1.NameRegistryState.retrieve(connection, nameAccountKey))\n            .owner;\n    }\n    const updateInstr = instructions_1.updateInstruction(exports.NAME_PROGRAM_ID, nameAccountKey, new utils_2.Numberu32(offset), input_data, signer);\n    return updateInstr;\n}\nexports.updateNameRegistryData = updateNameRegistryData;\n/**\n * Change the owner of a given name account.\n *\n * @param connection The solana connection object to the RPC node\n * @param name The name of the name account\n * @param newOwner The new owner to be set\n * @param curentNameOwner the current name Owner\n * @param nameClass The class of this name, if it exsists\n * @param nameParent The parent name of this name, if it exists\n * @returns\n */\nasync function transferNameOwnership(connection, name, newOwner, nameClass, nameParent) {\n    const hashed_name = await utils_2.getHashedName(name);\n    const nameAccountKey = await utils_2.getNameAccountKey(hashed_name, nameClass, nameParent);\n    let curentNameOwner;\n    if (nameClass) {\n        curentNameOwner = nameClass;\n    }\n    else {\n        curentNameOwner = (await state_1.NameRegistryState.retrieve(connection, nameAccountKey)).owner;\n    }\n    const transferInstr = instructions_1.transferInstruction(exports.NAME_PROGRAM_ID, nameAccountKey, newOwner, curentNameOwner, nameClass);\n    return transferInstr;\n}\nexports.transferNameOwnership = transferNameOwnership;\n/**\n * Delete the name account and transfer the rent to the target.\n *\n * @param connection The solana connection object to the RPC node\n * @param name The name of the name account\n * @param refundTargetKey The refund destination address\n * @param nameClass The class of this name, if it exsists\n * @param nameParent The parent name of this name, if it exists\n * @returns\n */\nasync function deleteNameRegistry(connection, name, refundTargetKey, nameClass, nameParent) {\n    const hashed_name = await utils_2.getHashedName(name);\n    const nameAccountKey = await utils_2.getNameAccountKey(hashed_name, nameClass, nameParent);\n    let nameOwner;\n    if (nameClass) {\n        nameOwner = nameClass;\n    }\n    else {\n        nameOwner = (await state_1.NameRegistryState.retrieve(connection, nameAccountKey))\n            .owner;\n    }\n    const changeAuthoritiesInstr = instructions_1.deleteInstruction(exports.NAME_PROGRAM_ID, nameAccountKey, refundTargetKey, nameOwner);\n    return changeAuthoritiesInstr;\n}\nexports.deleteNameRegistry = deleteNameRegistry;\n//# sourceMappingURL=bindings.js.map"]},"metadata":{},"sourceType":"script"}