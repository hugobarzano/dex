{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAssociatedTokenAccount = exports.getAssociatedTokenAddress = exports.ASSOCIATED_TOKEN_PROGRAM_ID = void 0;\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar TOKEN_PROGRAM_ID = new web3_js_1.PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\n/** Program ID for the associated token account program. */\n\nexports.ASSOCIATED_TOKEN_PROGRAM_ID = new web3_js_1.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n/**\n * Derives the associated token address for the given wallet address and token mint.\n * @param owner Wallet address\n * @param mint Mint address\n */\n\nfunction getAssociatedTokenAddress(_x, _x2) {\n  return _getAssociatedTokenAddress.apply(this, arguments);\n}\n\nfunction _getAssociatedTokenAddress() {\n  _getAssociatedTokenAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(owner, mint) {\n    var _yield$web3_js_1$Publ, _yield$web3_js_1$Publ2, address;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return web3_js_1.PublicKey.findProgramAddress([owner.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], exports.ASSOCIATED_TOKEN_PROGRAM_ID);\n\n          case 2:\n            _yield$web3_js_1$Publ = _context.sent;\n            _yield$web3_js_1$Publ2 = _slicedToArray(_yield$web3_js_1$Publ, 1);\n            address = _yield$web3_js_1$Publ2[0];\n            return _context.abrupt(\"return\", address);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getAssociatedTokenAddress.apply(this, arguments);\n}\n\nexports.getAssociatedTokenAddress = getAssociatedTokenAddress;\n/**\n * Instruction to create the associated token address for the given wallet address and token mint.\n *\n * @param payer Account to use to pay for fees\n * @param owner Wallet address for the new associated token address\n * @param mint Mint address for the new associated token address\n */\n\nfunction createAssociatedTokenAccount(_x3, _x4, _x5) {\n  return _createAssociatedTokenAccount.apply(this, arguments);\n}\n\nfunction _createAssociatedTokenAccount() {\n  _createAssociatedTokenAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(payer, owner, mint) {\n    var associatedTokenAddress;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getAssociatedTokenAddress(owner, mint);\n\n          case 2:\n            associatedTokenAddress = _context2.sent;\n            return _context2.abrupt(\"return\", new web3_js_1.TransactionInstruction({\n              keys: [{\n                pubkey: payer,\n                isSigner: true,\n                isWritable: true\n              }, {\n                pubkey: associatedTokenAddress,\n                isSigner: false,\n                isWritable: true\n              }, {\n                pubkey: owner,\n                isSigner: false,\n                isWritable: false\n              }, {\n                pubkey: mint,\n                isSigner: false,\n                isWritable: false\n              }, {\n                pubkey: web3_js_1.SystemProgram.programId,\n                isSigner: false,\n                isWritable: false\n              }, {\n                pubkey: TOKEN_PROGRAM_ID,\n                isSigner: false,\n                isWritable: false\n              }, {\n                pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n                isSigner: false,\n                isWritable: false\n              }],\n              programId: exports.ASSOCIATED_TOKEN_PROGRAM_ID\n            }));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _createAssociatedTokenAccount.apply(this, arguments);\n}\n\nexports.createAssociatedTokenAccount = createAssociatedTokenAccount;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAOA,IAAM,gBAAgB,GAAG,IAAI,SAAA,CAAA,SAAJ,CACvB,6CADuB,CAAzB;AAIA;;AACa,OAAA,CAAA,2BAAA,GAA8B,IAAI,SAAA,CAAA,SAAJ,CACzC,8CADyC,CAA9B;AAIb;;;;AAIG;;SACmB,yB;;;;;wFAAf,iBACL,KADK,EAEL,IAFK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAImB,SAAA,CAAA,SAAA,CAAU,kBAAV,CACtB,CAAC,KAAK,CAAC,QAAN,EAAD,EAAmB,gBAAgB,CAAC,QAAjB,EAAnB,EAAgD,IAAI,CAAC,QAAL,EAAhD,CADsB,EAEtB,OAAA,CAAA,2BAFsB,CAJnB;;AAAA;AAAA;AAAA;AAIE,YAAA,OAJF;AAAA,6CAQE,OARF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAAP,OAAA,CAAA,yBAAA,GAAA,yBAAA;AAWA;;;;;;AAMG;;SACmB,4B;;;;;2FAAf,kBACL,KADK,EAEL,KAFK,EAGL,IAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAKgC,yBAAyB,CAAC,KAAD,EAAQ,IAAR,CALzD;;AAAA;AAKC,YAAA,sBALD;AAAA,8CAME,IAAI,SAAA,CAAA,sBAAJ,CAA2B;AAChC,cAAA,IAAI,EAAE,CACJ;AAAE,gBAAA,MAAM,EAAE,KAAV;AAAiB,gBAAA,QAAQ,EAAE,IAA3B;AAAiC,gBAAA,UAAU,EAAE;AAA7C,eADI,EAEJ;AAAE,gBAAA,MAAM,EAAE,sBAAV;AAAkC,gBAAA,QAAQ,EAAE,KAA5C;AAAmD,gBAAA,UAAU,EAAE;AAA/D,eAFI,EAGJ;AAAE,gBAAA,MAAM,EAAE,KAAV;AAAiB,gBAAA,QAAQ,EAAE,KAA3B;AAAkC,gBAAA,UAAU,EAAE;AAA9C,eAHI,EAIJ;AAAE,gBAAA,MAAM,EAAE,IAAV;AAAgB,gBAAA,QAAQ,EAAE,KAA1B;AAAiC,gBAAA,UAAU,EAAE;AAA7C,eAJI,EAKJ;AAAE,gBAAA,MAAM,EAAE,SAAA,CAAA,aAAA,CAAc,SAAxB;AAAmC,gBAAA,QAAQ,EAAE,KAA7C;AAAoD,gBAAA,UAAU,EAAE;AAAhE,eALI,EAMJ;AAAE,gBAAA,MAAM,EAAE,gBAAV;AAA4B,gBAAA,QAAQ,EAAE,KAAtC;AAA6C,gBAAA,UAAU,EAAE;AAAzD,eANI,EAOJ;AAAE,gBAAA,MAAM,EAAE,SAAA,CAAA,kBAAV;AAA8B,gBAAA,QAAQ,EAAE,KAAxC;AAA+C,gBAAA,UAAU,EAAE;AAA3D,eAPI,CAD0B;AAUhC,cAAA,SAAS,EAAE,OAAA,CAAA;AAVqB,aAA3B,CANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAAP,OAAA,CAAA,4BAAA,GAAA,4BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createAssociatedTokenAccount = exports.getAssociatedTokenAddress = exports.ASSOCIATED_TOKEN_PROGRAM_ID = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst TOKEN_PROGRAM_ID = new web3_js_1.PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\n/** Program ID for the associated token account program. */\nexports.ASSOCIATED_TOKEN_PROGRAM_ID = new web3_js_1.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n/**\n * Derives the associated token address for the given wallet address and token mint.\n * @param owner Wallet address\n * @param mint Mint address\n */\nasync function getAssociatedTokenAddress(owner, mint) {\n    const [address] = await web3_js_1.PublicKey.findProgramAddress([owner.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], exports.ASSOCIATED_TOKEN_PROGRAM_ID);\n    return address;\n}\nexports.getAssociatedTokenAddress = getAssociatedTokenAddress;\n/**\n * Instruction to create the associated token address for the given wallet address and token mint.\n *\n * @param payer Account to use to pay for fees\n * @param owner Wallet address for the new associated token address\n * @param mint Mint address for the new associated token address\n */\nasync function createAssociatedTokenAccount(payer, owner, mint) {\n    const associatedTokenAddress = await getAssociatedTokenAddress(owner, mint);\n    return new web3_js_1.TransactionInstruction({\n        keys: [\n            { pubkey: payer, isSigner: true, isWritable: true },\n            { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n            { pubkey: owner, isSigner: false, isWritable: false },\n            { pubkey: mint, isSigner: false, isWritable: false },\n            { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false },\n            { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n            { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n        ],\n        programId: exports.ASSOCIATED_TOKEN_PROGRAM_ID,\n    });\n}\nexports.createAssociatedTokenAccount = createAssociatedTokenAccount;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}