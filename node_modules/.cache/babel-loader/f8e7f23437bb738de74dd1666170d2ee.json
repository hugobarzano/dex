{"ast":null,"code":"var _jsxFileName = \"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/components/UserInfoTable/WalletBalancesTable.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport DataTable from '../layout/DataTable';\nimport { Button, Row } from 'antd';\nimport { settleAllFunds } from '../../utils/send';\nimport { notify } from '../../utils/notifications';\nimport { useConnection } from '../../utils/connection';\nimport { useWallet } from '../../utils/wallet';\nimport { useAllMarkets, useSelectedTokenAccounts, useTokenAccounts } from '../../utils/markets';\nimport StandaloneTokenAccountsSelect from '../StandaloneTokenAccountSelect';\nimport { abbreviateAddress } from '../../utils/utils';\nimport { PublicKey } from '@solana/web3.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function WalletBalancesTable(_ref) {\n  _s();\n\n  let {\n    walletBalances\n  } = _ref;\n  const connection = useConnection();\n  const {\n    wallet,\n    connected\n  } = useWallet();\n  const [selectedTokenAccounts] = useSelectedTokenAccounts();\n  const [tokenAccounts, tokenAccountsConnected] = useTokenAccounts();\n  const [allMarkets, allMarketsConnected] = useAllMarkets();\n  const [settlingFunds, setSettlingFunds] = useState(false);\n\n  async function onSettleFunds() {\n    setSettlingFunds(true);\n\n    try {\n      if (!wallet) {\n        notify({\n          message: 'Wallet not connected',\n          description: 'Wallet not connected',\n          type: 'error'\n        });\n        return;\n      }\n\n      if (!tokenAccounts || !tokenAccountsConnected) {\n        notify({\n          message: 'Error settling funds',\n          description: 'TokenAccounts not connected',\n          type: 'error'\n        });\n        return;\n      }\n\n      if (!allMarkets || !allMarketsConnected) {\n        notify({\n          message: 'Error settling funds',\n          description: 'Markets not connected',\n          type: 'error'\n        });\n        return;\n      }\n\n      await settleAllFunds({\n        connection,\n        tokenAccounts,\n        selectedTokenAccounts,\n        wallet,\n        markets: allMarkets.map(marketInfo => marketInfo.market)\n      });\n    } catch (e) {\n      notify({\n        message: 'Error settling funds',\n        description: e.message,\n        type: 'error'\n      });\n    } finally {\n      setSettlingFunds(false);\n    }\n  }\n\n  const columns = [{\n    title: 'Coin',\n    key: 'coin',\n    width: '20%',\n    render: walletBalance => /*#__PURE__*/_jsxDEV(Row, {\n      align: \"middle\",\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://solscan.io/address/${walletBalance.mint}`,\n        target: '_blank',\n        rel: \"noopener noreferrer\",\n        children: walletBalance.coin || abbreviateAddress(new PublicKey(walletBalance.mint))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)\n  }, {\n    title: 'Wallet Balance',\n    dataIndex: 'walletBalance',\n    key: 'walletBalance',\n    width: '20%'\n  }, {\n    title: 'Open orders total balances',\n    dataIndex: 'openOrdersTotal',\n    key: 'openOrdersTotal',\n    width: '20%'\n  }, {\n    title: 'Unsettled balances',\n    dataIndex: 'openOrdersFree',\n    key: 'openOrdersFree',\n    width: '20%'\n  }, {\n    title: 'Selected token account',\n    key: 'selectTokenAccount',\n    width: '20%',\n    render: walletBalance => /*#__PURE__*/_jsxDEV(Row, {\n      align: \"middle\",\n      style: {\n        width: '430px'\n      },\n      children: /*#__PURE__*/_jsxDEV(StandaloneTokenAccountsSelect, {\n        accounts: tokenAccounts === null || tokenAccounts === void 0 ? void 0 : tokenAccounts.filter(t => t.effectiveMint.toBase58() === walletBalance.mint),\n        mint: walletBalance.mint\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this)\n  }];\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DataTable, {\n      emptyLabel: \"No balances\",\n      dataSource: walletBalances,\n      columns: columns,\n      pagination: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), connected && /*#__PURE__*/_jsxDEV(Button, {\n      onClick: onSettleFunds,\n      loading: settlingFunds,\n      children: \"Settle all funds\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WalletBalancesTable, \"p9pLZZx+GxjuEDYnssZx1hl1xbo=\", false, function () {\n  return [useConnection, useWallet, useSelectedTokenAccounts, useTokenAccounts, useAllMarkets];\n});\n\n_c = WalletBalancesTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"WalletBalancesTable\");","map":{"version":3,"sources":["/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/components/UserInfoTable/WalletBalancesTable.tsx"],"names":["React","useState","DataTable","Button","Row","settleAllFunds","notify","useConnection","useWallet","useAllMarkets","useSelectedTokenAccounts","useTokenAccounts","StandaloneTokenAccountsSelect","abbreviateAddress","PublicKey","WalletBalancesTable","walletBalances","connection","wallet","connected","selectedTokenAccounts","tokenAccounts","tokenAccountsConnected","allMarkets","allMarketsConnected","settlingFunds","setSettlingFunds","onSettleFunds","message","description","type","markets","map","marketInfo","market","e","columns","title","key","width","render","walletBalance","mint","coin","dataIndex","filter","t","effectiveMint","toBase58"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport DataTable from '../layout/DataTable';\nimport { Button, Row } from 'antd';\nimport { settleAllFunds } from '../../utils/send';\nimport { notify } from '../../utils/notifications';\nimport { useConnection } from '../../utils/connection';\nimport { useWallet } from '../../utils/wallet';\nimport {\n  useAllMarkets,\n  useSelectedTokenAccounts,\n  useTokenAccounts,\n} from '../../utils/markets';\nimport StandaloneTokenAccountsSelect from '../StandaloneTokenAccountSelect';\nimport { abbreviateAddress } from '../../utils/utils';\nimport { PublicKey } from '@solana/web3.js';\n\nexport default function WalletBalancesTable({\n  walletBalances,\n}: {\n  walletBalances: {\n    coin: string;\n    mint: string;\n    walletBalance: number;\n    openOrdersFree: number;\n    openOrdersTotal: number;\n  }[];\n}) {\n  const connection = useConnection();\n  const { wallet, connected } = useWallet();\n  const [selectedTokenAccounts] = useSelectedTokenAccounts();\n  const [tokenAccounts, tokenAccountsConnected] = useTokenAccounts();\n  const [allMarkets, allMarketsConnected] = useAllMarkets();\n  const [settlingFunds, setSettlingFunds] = useState(false);\n\n  async function onSettleFunds() {\n    setSettlingFunds(true);\n    try {\n      if (!wallet) {\n        notify({\n          message: 'Wallet not connected',\n          description: 'Wallet not connected',\n          type: 'error',\n        });\n        return;\n      }\n\n      if (!tokenAccounts || !tokenAccountsConnected) {\n        notify({\n          message: 'Error settling funds',\n          description: 'TokenAccounts not connected',\n          type: 'error',\n        });\n        return;\n      }\n      if (!allMarkets || !allMarketsConnected) {\n        notify({\n          message: 'Error settling funds',\n          description: 'Markets not connected',\n          type: 'error',\n        });\n        return;\n      }\n      await settleAllFunds({\n        connection,\n        tokenAccounts,\n        selectedTokenAccounts,\n        wallet,\n        markets: allMarkets.map((marketInfo) => marketInfo.market),\n      });\n    } catch (e) {\n      notify({\n        message: 'Error settling funds',\n        description: e.message,\n        type: 'error',\n      });\n    } finally {\n      setSettlingFunds(false);\n    }\n  }\n\n  const columns = [\n    {\n      title: 'Coin',\n      key: 'coin',\n      width: '20%',\n      render: (walletBalance) => (\n        <Row align=\"middle\">\n          <a\n            href={`https://solscan.io/address/${walletBalance.mint}`}\n            target={'_blank'}\n            rel=\"noopener noreferrer\"\n          >\n            {walletBalance.coin ||\n              abbreviateAddress(new PublicKey(walletBalance.mint))}\n          </a>\n        </Row>\n      ),\n    },\n    {\n      title: 'Wallet Balance',\n      dataIndex: 'walletBalance',\n      key: 'walletBalance',\n      width: '20%',\n    },\n    {\n      title: 'Open orders total balances',\n      dataIndex: 'openOrdersTotal',\n      key: 'openOrdersTotal',\n      width: '20%',\n    },\n    {\n      title: 'Unsettled balances',\n      dataIndex: 'openOrdersFree',\n      key: 'openOrdersFree',\n      width: '20%',\n    },\n    {\n      title: 'Selected token account',\n      key: 'selectTokenAccount',\n      width: '20%',\n      render: (walletBalance) => (\n        <Row align=\"middle\" style={{ width: '430px' }}>\n          <StandaloneTokenAccountsSelect\n            accounts={tokenAccounts?.filter(\n              (t) => t.effectiveMint.toBase58() === walletBalance.mint,\n            )}\n            mint={walletBalance.mint}\n          />\n        </Row>\n      ),\n    },\n  ];\n  return (\n    <React.Fragment>\n      <DataTable\n        emptyLabel=\"No balances\"\n        dataSource={walletBalances}\n        columns={columns}\n        pagination={false}\n      />\n      {connected && (\n        <Button onClick={onSettleFunds} loading={settlingFunds}>\n          Settle all funds\n        </Button>\n      )}\n    </React.Fragment>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}