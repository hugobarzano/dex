{"ast":null,"code":"var _jsxFileName = \"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/pages/ListNewMarketPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, Form, Input, Tooltip, Typography } from 'antd';\nimport { notify } from '../utils/notifications';\nimport { MARKETS } from '@project-serum/serum';\nimport { useConnection } from '../utils/connection';\nimport FloatingElement from '../components/layout/FloatingElement';\nimport styled from 'styled-components';\nimport { useWallet } from '../utils/wallet';\nimport { listMarket } from '../utils/send';\nimport { useMintInput } from '../components/useMintInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Text,\n  Title\n} = Typography;\nconst Wrapper = styled.div`\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 24px;\n  margin-bottom: 24px;\n`;\n_c = Wrapper;\nexport default function ListNewMarketPage() {\n  _s();\n\n  const connection = useConnection();\n  const {\n    wallet,\n    connected\n  } = useWallet();\n  const [baseMintInput, baseMintInfo] = useMintInput('baseMint', /*#__PURE__*/_jsxDEV(Text, {\n    children: [\"Base Token Mint Address\", ' ', /*#__PURE__*/_jsxDEV(Text, {\n      type: \"secondary\",\n      children: [\"(e.g. BTC solana address:\", ' ', /*#__PURE__*/_jsxDEV(Text, {\n        type: \"secondary\",\n        code: true,\n        children: \"9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this), 'The base token is the token being traded. For example, the base token of a BTC/USDT market is BTC.');\n  const [quoteMintInput, quoteMintInfo] = useMintInput('quoteMint', /*#__PURE__*/_jsxDEV(Text, {\n    children: [\"Quote Token Mint Address\", ' ', /*#__PURE__*/_jsxDEV(Text, {\n      type: \"secondary\",\n      children: [\"(e.g. USDT solana address:\", ' ', /*#__PURE__*/_jsxDEV(Text, {\n        type: \"secondary\",\n        code: true,\n        children: \"BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this), 'The quote token is the token used to price trades. For example, the quote token of a BTC/USDT market is USDT.');\n  const [lotSize, setLotSize] = useState('1');\n  const [tickSize, setTickSize] = useState('0.01');\n  const dexProgramId = MARKETS.find(_ref => {\n    let {\n      deprecated\n    } = _ref;\n    return !deprecated;\n  }).programId;\n  const [submitting, setSubmitting] = useState(false);\n  const [listedMarket, setListedMarket] = useState(null);\n  let baseLotSize;\n  let quoteLotSize;\n\n  if (baseMintInfo && parseFloat(lotSize) > 0) {\n    baseLotSize = Math.round(10 ** baseMintInfo.decimals * parseFloat(lotSize));\n\n    if (quoteMintInfo && parseFloat(tickSize) > 0) {\n      quoteLotSize = Math.round(parseFloat(lotSize) * 10 ** quoteMintInfo.decimals * parseFloat(tickSize));\n    }\n  }\n\n  const canSubmit = connected && !!baseMintInfo && !!quoteMintInfo && !!baseLotSize && !!quoteLotSize;\n\n  async function onSubmit() {\n    if (!canSubmit) {\n      return;\n    }\n\n    setSubmitting(true);\n\n    try {\n      const marketAddress = await listMarket({\n        connection,\n        wallet,\n        baseMint: baseMintInfo.address,\n        quoteMint: quoteMintInfo.address,\n        baseLotSize,\n        quoteLotSize,\n        dexProgramId\n      });\n      setListedMarket(marketAddress);\n    } catch (e) {\n      console.warn(e);\n      notify({\n        message: 'Error listing new market',\n        description: e.message,\n        type: 'error'\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(FloatingElement, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        level: 4,\n        children: \"List New Market\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        labelCol: {\n          span: 24\n        },\n        wrapperCol: {\n          span: 24\n        },\n        layout: 'vertical',\n        onFinish: onSubmit,\n        children: [baseMintInput, quoteMintInput, /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"Smallest allowed order size. For a BTC/USDT market, this would be in units of BTC.\",\n            children: [\"Minimum Order Size\", ' ', /*#__PURE__*/_jsxDEV(Text, {\n              type: \"secondary\",\n              children: \"(Lot size in e.g. BTC)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this),\n          name: \"lotSize\",\n          initialValue: \"1\",\n          validateStatus: baseMintInfo && quoteMintInfo ? baseLotSize ? 'success' : 'error' : null,\n          hasFeedback: baseMintInfo && quoteMintInfo,\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            value: lotSize,\n            onChange: e => setLotSize(e.target.value.trim()),\n            type: \"number\",\n            min: \"0\",\n            step: \"any\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"Smallest amount by which prices can move. For a BTC/USDT market, this would be in units of USDT.\",\n            children: [\"Tick Size\", ' ', /*#__PURE__*/_jsxDEV(Text, {\n              type: \"secondary\",\n              children: \"(Price increment in e.g. USDT)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 15\n          }, this),\n          name: \"tickSize\",\n          initialValue: \"0.01\",\n          validateStatus: baseMintInfo && quoteMintInfo ? quoteLotSize ? 'success' : 'error' : null,\n          hasFeedback: baseMintInfo && quoteMintInfo,\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            value: tickSize,\n            onChange: e => setTickSize(e.target.value.trim()),\n            type: \"number\",\n            min: \"0\",\n            step: \"any\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \" \",\n          colon: false,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            disabled: !canSubmit,\n            loading: submitting,\n            children: connected ? 'Submit' : 'Not connected to wallet'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), listedMarket ? /*#__PURE__*/_jsxDEV(FloatingElement, {\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        children: [\"New market address: \", listedMarket.toBase58()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ListNewMarketPage, \"sE1ysXUZMR5WvWYF6wj/5gIH1YU=\", false, function () {\n  return [useConnection, useWallet, useMintInput, useMintInput];\n});\n\n_c2 = ListNewMarketPage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"ListNewMarketPage\");","map":{"version":3,"sources":["/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/pages/ListNewMarketPage.jsx"],"names":["React","useState","Button","Form","Input","Tooltip","Typography","notify","MARKETS","useConnection","FloatingElement","styled","useWallet","listMarket","useMintInput","Text","Title","Wrapper","div","ListNewMarketPage","connection","wallet","connected","baseMintInput","baseMintInfo","quoteMintInput","quoteMintInfo","lotSize","setLotSize","tickSize","setTickSize","dexProgramId","find","deprecated","programId","submitting","setSubmitting","listedMarket","setListedMarket","baseLotSize","quoteLotSize","parseFloat","Math","round","decimals","canSubmit","onSubmit","marketAddress","baseMint","address","quoteMint","e","console","warn","message","description","type","span","target","value","trim","toBase58"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Form, Input, Tooltip, Typography } from 'antd';\nimport { notify } from '../utils/notifications';\nimport { MARKETS } from '@project-serum/serum';\nimport { useConnection } from '../utils/connection';\nimport FloatingElement from '../components/layout/FloatingElement';\nimport styled from 'styled-components';\nimport { useWallet } from '../utils/wallet';\nimport { listMarket } from '../utils/send';\nimport { useMintInput } from '../components/useMintInput';\n\nconst { Text, Title } = Typography;\n\nconst Wrapper = styled.div`\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 24px;\n  margin-bottom: 24px;\n`;\n\nexport default function ListNewMarketPage() {\n  const connection = useConnection();\n  const { wallet, connected } = useWallet();\n  const [baseMintInput, baseMintInfo] = useMintInput(\n    'baseMint',\n    <Text>\n      Base Token Mint Address{' '}\n      <Text type=\"secondary\">\n        (e.g. BTC solana address:{' '}\n        {\n          <Text type=\"secondary\" code>\n            9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E\n          </Text>\n        }\n        )\n      </Text>\n    </Text>,\n    'The base token is the token being traded. For example, the base token of a BTC/USDT market is BTC.',\n  );\n  const [quoteMintInput, quoteMintInfo] = useMintInput(\n    'quoteMint',\n    <Text>\n      Quote Token Mint Address{' '}\n      <Text type=\"secondary\">\n        (e.g. USDT solana address:{' '}\n        {\n          <Text type=\"secondary\" code>\n            BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4\n          </Text>\n        }\n        )\n      </Text>\n    </Text>,\n    'The quote token is the token used to price trades. For example, the quote token of a BTC/USDT market is USDT.',\n  );\n  const [lotSize, setLotSize] = useState('1');\n  const [tickSize, setTickSize] = useState('0.01');\n  const dexProgramId = MARKETS.find(({ deprecated }) => !deprecated).programId;\n  const [submitting, setSubmitting] = useState(false);\n\n  const [listedMarket, setListedMarket] = useState(null);\n\n  let baseLotSize;\n  let quoteLotSize;\n  if (baseMintInfo && parseFloat(lotSize) > 0) {\n    baseLotSize = Math.round(10 ** baseMintInfo.decimals * parseFloat(lotSize));\n    if (quoteMintInfo && parseFloat(tickSize) > 0) {\n      quoteLotSize = Math.round(\n        parseFloat(lotSize) *\n          10 ** quoteMintInfo.decimals *\n          parseFloat(tickSize),\n      );\n    }\n  }\n\n  const canSubmit =\n    connected &&\n    !!baseMintInfo &&\n    !!quoteMintInfo &&\n    !!baseLotSize &&\n    !!quoteLotSize;\n\n  async function onSubmit() {\n    if (!canSubmit) {\n      return;\n    }\n    setSubmitting(true);\n    try {\n      const marketAddress = await listMarket({\n        connection,\n        wallet,\n        baseMint: baseMintInfo.address,\n        quoteMint: quoteMintInfo.address,\n        baseLotSize,\n        quoteLotSize,\n        dexProgramId,\n      });\n      setListedMarket(marketAddress);\n    } catch (e) {\n      console.warn(e);\n      notify({\n        message: 'Error listing new market',\n        description: e.message,\n        type: 'error',\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return (\n    <Wrapper>\n      <FloatingElement>\n        <Title level={4}>List New Market</Title>\n        <Form\n          labelCol={{ span: 24 }}\n          wrapperCol={{ span: 24 }}\n          layout={'vertical'}\n          onFinish={onSubmit}\n        >\n          {baseMintInput}\n          {quoteMintInput}\n          <Form.Item\n            label={\n              <Tooltip title=\"Smallest allowed order size. For a BTC/USDT market, this would be in units of BTC.\">\n                Minimum Order Size{' '}\n                <Text type=\"secondary\">(Lot size in e.g. BTC)</Text>\n              </Tooltip>\n            }\n            name=\"lotSize\"\n            initialValue=\"1\"\n            validateStatus={\n              baseMintInfo && quoteMintInfo\n                ? baseLotSize\n                  ? 'success'\n                  : 'error'\n                : null\n            }\n            hasFeedback={baseMintInfo && quoteMintInfo}\n          >\n            <Input\n              value={lotSize}\n              onChange={(e) => setLotSize(e.target.value.trim())}\n              type=\"number\"\n              min=\"0\"\n              step=\"any\"\n            />\n          </Form.Item>\n          <Form.Item\n            label={\n              <Tooltip title=\"Smallest amount by which prices can move. For a BTC/USDT market, this would be in units of USDT.\">\n                Tick Size{' '}\n                <Text type=\"secondary\">(Price increment in e.g. USDT)</Text>\n              </Tooltip>\n            }\n            name=\"tickSize\"\n            initialValue=\"0.01\"\n            validateStatus={\n              baseMintInfo && quoteMintInfo\n                ? quoteLotSize\n                  ? 'success'\n                  : 'error'\n                : null\n            }\n            hasFeedback={baseMintInfo && quoteMintInfo}\n          >\n            <Input\n              value={tickSize}\n              onChange={(e) => setTickSize(e.target.value.trim())}\n              type=\"number\"\n              min=\"0\"\n              step=\"any\"\n            />\n          </Form.Item>\n          <Form.Item label=\" \" colon={false}>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              disabled={!canSubmit}\n              loading={submitting}\n            >\n              {connected ? 'Submit' : 'Not connected to wallet'}\n            </Button>\n          </Form.Item>\n        </Form>\n      </FloatingElement>\n      {listedMarket ? (\n        <FloatingElement>\n          <Text>New market address: {listedMarket.toBase58()}</Text>\n        </FloatingElement>\n      ) : null}\n    </Wrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}