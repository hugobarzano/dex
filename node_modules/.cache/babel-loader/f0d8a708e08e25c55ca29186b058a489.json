{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.simulateTransaction = void 0;\n/** Copy of Connection.simulateTransaction that takes a commitment parameter. */\n\nfunction simulateTransaction(_x, _x2, _x3) {\n  return _simulateTransaction.apply(this, arguments);\n}\n\nfunction _simulateTransaction() {\n  _simulateTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection, transaction, commitment) {\n    var signData, wireTransaction, encodedTransaction, config, args, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return connection._recentBlockhash( // @ts-ignore\n            connection._disableBlockhashCaching);\n\n          case 2:\n            transaction.recentBlockhash = _context.sent;\n            signData = transaction.serializeMessage(); // @ts-ignore\n\n            wireTransaction = transaction._serialize(signData);\n            encodedTransaction = wireTransaction.toString('base64');\n            config = {\n              encoding: 'base64',\n              commitment: commitment\n            };\n            args = [encodedTransaction, config]; // @ts-ignore\n\n            _context.next = 10;\n            return connection._rpcRequest('simulateTransaction', args);\n\n          case 10:\n            res = _context.sent;\n\n            if (!res.error) {\n              _context.next = 13;\n              break;\n            }\n\n            throw new Error('failed to simulate transaction: ' + res.error.message);\n\n          case 13:\n            return _context.abrupt(\"return\", res.result);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _simulateTransaction.apply(this, arguments);\n}\n\nexports.simulateTransaction = simulateTransaction;","map":{"version":3,"sources":["../../src/simulate-transaction.ts"],"names":[],"mappings":";;;;;;;;;;AAQA;;SACsB,mB;;;;;kFAAf,iBACL,UADK,EAEL,WAFK,EAGL,UAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAM+B,UAAU,CAAC,gBAAX,EAClC;AACA,YAAA,UAAU,CAAC,wBAFuB,CAN/B;;AAAA;AAML,YAAA,WAAW,CAAC,eANP;AAWC,YAAA,QAXD,GAWY,WAAW,CAAC,gBAAZ,EAXZ,EAYL;;AACM,YAAA,eAbD,GAamB,WAAW,CAAC,UAAZ,CAAuB,QAAvB,CAbnB;AAcC,YAAA,kBAdD,GAcsB,eAAe,CAAC,QAAhB,CAAyB,QAAzB,CAdtB;AAeC,YAAA,MAfD,GAee;AAAE,cAAA,QAAQ,EAAE,QAAZ;AAAsB,cAAA,UAAU,EAAV;AAAtB,aAff;AAgBC,YAAA,IAhBD,GAgBQ,CAAC,kBAAD,EAAqB,MAArB,CAhBR,EAkBL;;AAlBK;AAAA,mBAmBa,UAAU,CAAC,WAAX,CAAuB,qBAAvB,EAA8C,IAA9C,CAnBb;;AAAA;AAmBC,YAAA,GAnBD;;AAAA,iBAoBD,GAAG,CAAC,KApBH;AAAA;AAAA;AAAA;;AAAA,kBAqBG,IAAI,KAAJ,CAAU,qCAAqC,GAAG,CAAC,KAAJ,CAAU,OAAzD,CArBH;;AAAA;AAAA,6CAuBE,GAAG,CAAC,MAvBN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAAP,OAAA,CAAA,mBAAA,GAAA,mBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.simulateTransaction = void 0;\n/** Copy of Connection.simulateTransaction that takes a commitment parameter. */\nasync function simulateTransaction(connection, transaction, commitment) {\n    // @ts-ignore\n    transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching);\n    const signData = transaction.serializeMessage();\n    // @ts-ignore\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = { encoding: 'base64', commitment };\n    const args = [encodedTransaction, config];\n    // @ts-ignore\n    const res = await connection._rpcRequest('simulateTransaction', args);\n    if (res.error) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    return res.result;\n}\nexports.simulateTransaction = simulateTransaction;\n//# sourceMappingURL=simulate-transaction.js.map"]},"metadata":{},"sourceType":"script"}