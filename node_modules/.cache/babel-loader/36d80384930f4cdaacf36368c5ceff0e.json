{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/fork/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTwitterRegistryData = exports.getTwitterRegistry = exports.getTwitterRegistryKey = exports.getTwitterHandle = exports.deleteTwitterRegistry = exports.changeVerifiedPubkey = exports.changeTwitterRegistryData = exports.createVerifiedTwitterRegistry = exports.TWITTER_ROOT_PARENT_REGISTRY_KEY = exports.TWITTER_VERIFICATION_AUTHORITY = void 0;\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar bindings_1 = require(\"./bindings\");\n\nvar instructions_1 = require(\"./instructions\");\n\nvar state_1 = require(\"./state\");\n\nvar utils_1 = require(\"./utils\");\n\nexports.TWITTER_VERIFICATION_AUTHORITY = new web3_js_1.PublicKey('867BLob5b52i81SNaV9Awm5ejkZV6VGSv9SxLcwukDDJ'); // The address of the name registry that will be a parent to all twitter handle registries,\n// it should be owned by the TWITTER_VERIFICATION_AUTHORITY and it's name is irrelevant\n\nexports.TWITTER_ROOT_PARENT_REGISTRY_KEY = new web3_js_1.PublicKey('AFrGkxNmVLBn3mKhvfJJABvm8RJkTtRhHDoaF97pQZaA'); // Signed by the authority and the payer\n\nfunction createVerifiedTwitterRegistry(_x, _x2, _x3, _x4, _x5) {\n  return _createVerifiedTwitterRegistry.apply(this, arguments);\n}\n\nfunction _createVerifiedTwitterRegistry() {\n  _createVerifiedTwitterRegistry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection, twitterHandle, verifiedPubkey, space, // The space that the user will have to write data into the verified registry\n  payerKey) {\n    var hashedTwitterHandle, twitterHandleRegistryKey, hashedVerifiedPubkey, reverseRegistryKey, instructions;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return utils_1.getHashedName(twitterHandle);\n\n          case 2:\n            hashedTwitterHandle = _context.sent;\n            _context.next = 5;\n            return utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n\n          case 5:\n            twitterHandleRegistryKey = _context.sent;\n            _context.next = 8;\n            return utils_1.getHashedName(verifiedPubkey.toString().concat(twitterHandle));\n\n          case 8:\n            hashedVerifiedPubkey = _context.sent;\n            _context.next = 11;\n            return utils_1.getNameAccountKey(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, undefined);\n\n          case 11:\n            reverseRegistryKey = _context.sent;\n            space += 96; // Accounting for the Registry State Header\n\n            _context.t0 = instructions_1;\n            _context.t1 = bindings_1.NAME_PROGRAM_ID;\n            _context.t2 = web3_js_1.SystemProgram.programId;\n            _context.t3 = twitterHandleRegistryKey;\n            _context.t4 = verifiedPubkey;\n            _context.t5 = payerKey;\n            _context.t6 = hashedTwitterHandle;\n            _context.t7 = utils_1.Numberu64;\n            _context.next = 23;\n            return connection.getMinimumBalanceForRentExemption(space);\n\n          case 23:\n            _context.t8 = _context.sent;\n            _context.t9 = new _context.t7(_context.t8);\n            _context.t10 = new utils_1.Numberu32(space);\n            _context.t11 = undefined;\n            _context.t12 = exports.TWITTER_ROOT_PARENT_REGISTRY_KEY;\n            _context.t13 = exports.TWITTER_VERIFICATION_AUTHORITY // Twitter authority acts as owner of the parent for all user-facing registries\n            ;\n            _context.t14 = _context.t0.createInstruction.call(_context.t0, _context.t1, _context.t2, _context.t3, _context.t4, _context.t5, _context.t6, _context.t9, _context.t10, _context.t11, _context.t12, _context.t13);\n            _context.t15 = instructions_1;\n            _context.t16 = bindings_1.NAME_PROGRAM_ID;\n            _context.t17 = web3_js_1.SystemProgram.programId;\n            _context.t18 = reverseRegistryKey;\n            _context.t19 = verifiedPubkey;\n            _context.t20 = payerKey;\n            _context.t21 = hashedVerifiedPubkey;\n            _context.t22 = utils_1.Numberu64;\n            _context.next = 40;\n            return connection.getMinimumBalanceForRentExemption(96 + 18);\n\n          case 40:\n            _context.t23 = _context.sent;\n            _context.t24 = new _context.t22(_context.t23);\n            _context.t25 = new utils_1.Numberu32(96 + 18);\n            _context.t26 = // maximum length of a twitter handle\n            exports.TWITTER_VERIFICATION_AUTHORITY;\n            _context.t27 = // Twitter authority acts as class for all reverse-lookup registries\n            undefined;\n            _context.t28 = undefined;\n            _context.t29 = _context.t15.createInstruction.call(_context.t15, _context.t16, _context.t17, _context.t18, _context.t19, _context.t20, _context.t21, _context.t24, _context.t25, _context.t26, _context.t27, _context.t28);\n            _context.t30 = // Write the twitter handle into the reverse lookup registry\n            instructions_1.updateInstruction(bindings_1.NAME_PROGRAM_ID, reverseRegistryKey, new utils_1.Numberu32(0), Buffer.from(twitterHandle), exports.TWITTER_VERIFICATION_AUTHORITY);\n            instructions = [_context.t14, _context.t29, _context.t30];\n            return _context.abrupt(\"return\", instructions);\n\n          case 50:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _createVerifiedTwitterRegistry.apply(this, arguments);\n}\n\nexports.createVerifiedTwitterRegistry = createVerifiedTwitterRegistry; // Overwrite the data that is written in the user facing registry\n// Signed by the verified pubkey\n\nfunction changeTwitterRegistryData(_x6, _x7, _x8, _x9) {\n  return _changeTwitterRegistryData.apply(this, arguments);\n}\n\nfunction _changeTwitterRegistryData() {\n  _changeTwitterRegistryData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(twitterHandle, verifiedPubkey, offset, // The offset at which to write the input data into the NameRegistryData\n  input_data) {\n    var hashedTwitterHandle, twitterHandleRegistryKey, instructions;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return utils_1.getHashedName(twitterHandle);\n\n          case 2:\n            hashedTwitterHandle = _context2.sent;\n            _context2.next = 5;\n            return utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n\n          case 5:\n            twitterHandleRegistryKey = _context2.sent;\n            instructions = [instructions_1.updateInstruction(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, new utils_1.Numberu32(offset), input_data, verifiedPubkey)];\n            return _context2.abrupt(\"return\", instructions);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _changeTwitterRegistryData.apply(this, arguments);\n}\n\nexports.changeTwitterRegistryData = changeTwitterRegistryData; // Change the verified pubkey for a given twitter handle\n// Signed by the Authority, the verified pubkey and the payer\n\nfunction changeVerifiedPubkey(_x10, _x11, _x12, _x13, _x14) {\n  return _changeVerifiedPubkey.apply(this, arguments);\n}\n\nfunction _changeVerifiedPubkey() {\n  _changeVerifiedPubkey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(connection, twitterHandle, currentVerifiedPubkey, newVerifiedPubkey, payerKey) {\n    var hashedTwitterHandle, twitterHandleRegistryKey, currentHashedVerifiedPubkey, currentReverseRegistryKey, newHashedVerifiedPubkey, newReverseRegistryKey, instructions;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return utils_1.getHashedName(twitterHandle);\n\n          case 2:\n            hashedTwitterHandle = _context3.sent;\n            _context3.next = 5;\n            return utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n\n          case 5:\n            twitterHandleRegistryKey = _context3.sent;\n            _context3.next = 8;\n            return utils_1.getHashedName(currentVerifiedPubkey.toString().concat(twitterHandle));\n\n          case 8:\n            currentHashedVerifiedPubkey = _context3.sent;\n            _context3.next = 11;\n            return utils_1.getNameAccountKey(currentHashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, undefined);\n\n          case 11:\n            currentReverseRegistryKey = _context3.sent;\n            _context3.next = 14;\n            return utils_1.getHashedName(newVerifiedPubkey.toString().concat(twitterHandle));\n\n          case 14:\n            newHashedVerifiedPubkey = _context3.sent;\n            _context3.next = 17;\n            return utils_1.getNameAccountKey(newHashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, undefined);\n\n          case 17:\n            newReverseRegistryKey = _context3.sent;\n            _context3.t0 = // Transfer the user-facing registry ownership\n            instructions_1.transferInstruction(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, newVerifiedPubkey, currentVerifiedPubkey, undefined);\n            _context3.t1 = // Delete the current reverse registry\n            instructions_1.deleteInstruction(bindings_1.NAME_PROGRAM_ID, currentReverseRegistryKey, payerKey, currentVerifiedPubkey);\n            _context3.t2 = instructions_1;\n            _context3.t3 = bindings_1.NAME_PROGRAM_ID;\n            _context3.t4 = web3_js_1.SystemProgram.programId;\n            _context3.t5 = newReverseRegistryKey;\n            _context3.t6 = exports.TWITTER_VERIFICATION_AUTHORITY;\n            _context3.t7 = payerKey;\n            _context3.t8 = newHashedVerifiedPubkey;\n            _context3.t9 = utils_1.Numberu64;\n            _context3.next = 30;\n            return connection.getMinimumBalanceForRentExemption(18);\n\n          case 30:\n            _context3.t10 = _context3.sent;\n            _context3.t11 = new _context3.t9(_context3.t10);\n            _context3.t12 = new utils_1.Numberu32(18);\n            _context3.t13 = // maximum length of a twitter handle\n            exports.TWITTER_VERIFICATION_AUTHORITY;\n            _context3.t14 = // Twitter authority acts as class for all reverse-lookup registries\n            undefined;\n            _context3.t15 = undefined;\n            _context3.t16 = _context3.t2.createInstruction.call(_context3.t2, _context3.t3, _context3.t4, _context3.t5, _context3.t6, _context3.t7, _context3.t8, _context3.t11, _context3.t12, _context3.t13, _context3.t14, _context3.t15);\n            _context3.t17 = // Write the twitter handle into the new reverse lookup registry\n            instructions_1.updateInstruction(bindings_1.NAME_PROGRAM_ID, newReverseRegistryKey, new utils_1.Numberu32(0), Buffer.from(twitterHandle), exports.TWITTER_VERIFICATION_AUTHORITY);\n            instructions = [_context3.t0, _context3.t1, _context3.t16, _context3.t17];\n            return _context3.abrupt(\"return\", instructions);\n\n          case 40:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _changeVerifiedPubkey.apply(this, arguments);\n}\n\nexports.changeVerifiedPubkey = changeVerifiedPubkey; // Delete the verified registry for a given twitter handle\n// Signed by the verified pubkey\n\nfunction deleteTwitterRegistry(_x15, _x16) {\n  return _deleteTwitterRegistry.apply(this, arguments);\n}\n\nfunction _deleteTwitterRegistry() {\n  _deleteTwitterRegistry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(twitterHandle, verifiedPubkey) {\n    var hashedTwitterHandle, twitterHandleRegistryKey, hashedVerifiedPubkey, reverseRegistryKey, instructions;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return utils_1.getHashedName(twitterHandle);\n\n          case 2:\n            hashedTwitterHandle = _context4.sent;\n            _context4.next = 5;\n            return utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n\n          case 5:\n            twitterHandleRegistryKey = _context4.sent;\n            _context4.next = 8;\n            return utils_1.getHashedName(verifiedPubkey.toString().concat(twitterHandle));\n\n          case 8:\n            hashedVerifiedPubkey = _context4.sent;\n            _context4.next = 11;\n            return utils_1.getNameAccountKey(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, undefined);\n\n          case 11:\n            reverseRegistryKey = _context4.sent;\n            instructions = [// Delete the user facing registry\n            instructions_1.deleteInstruction(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, verifiedPubkey, verifiedPubkey), // Delete the reverse registry\n            instructions_1.deleteInstruction(bindings_1.NAME_PROGRAM_ID, reverseRegistryKey, verifiedPubkey, verifiedPubkey)];\n            return _context4.abrupt(\"return\", instructions);\n\n          case 14:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _deleteTwitterRegistry.apply(this, arguments);\n}\n\nexports.deleteTwitterRegistry = deleteTwitterRegistry;\n\nfunction getTwitterHandle(_x17, _x18) {\n  return _getTwitterHandle.apply(this, arguments);\n}\n\nfunction _getTwitterHandle() {\n  _getTwitterHandle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(connection, verifiedPubkey) {\n    var filters, filteredAccounts, _iterator, _step, f;\n\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            filters = [{\n              memcmp: {\n                offset: 32,\n                bytes: verifiedPubkey.toBase58()\n              }\n            }, {\n              memcmp: {\n                offset: bindings_1.VERIFICATION_AUTHORITY_OFFSET,\n                bytes: exports.TWITTER_VERIFICATION_AUTHORITY.toBase58()\n              }\n            }];\n            _context5.next = 3;\n            return utils_1.getFilteredProgramAccounts(connection, bindings_1.NAME_PROGRAM_ID, filters);\n\n          case 3:\n            filteredAccounts = _context5.sent;\n            _iterator = _createForOfIteratorHelper(filteredAccounts);\n            _context5.prev = 5;\n\n            _iterator.s();\n\n          case 7:\n            if ((_step = _iterator.n()).done) {\n              _context5.next = 13;\n              break;\n            }\n\n            f = _step.value;\n\n            if (!(f.accountInfo.data.length == 114)) {\n              _context5.next = 11;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", f.accountInfo.data.slice(96, 114).toString());\n\n          case 11:\n            _context5.next = 7;\n            break;\n\n          case 13:\n            _context5.next = 18;\n            break;\n\n          case 15:\n            _context5.prev = 15;\n            _context5.t0 = _context5[\"catch\"](5);\n\n            _iterator.e(_context5.t0);\n\n          case 18:\n            _context5.prev = 18;\n\n            _iterator.f();\n\n            return _context5.finish(18);\n\n          case 21:\n            throw 'Could not find the twitter handle';\n\n          case 22:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[5, 15, 18, 21]]);\n  }));\n  return _getTwitterHandle.apply(this, arguments);\n}\n\nexports.getTwitterHandle = getTwitterHandle; // Returns the key of the user-facing registry\n\nfunction getTwitterRegistryKey(_x19) {\n  return _getTwitterRegistryKey.apply(this, arguments);\n}\n\nfunction _getTwitterRegistryKey() {\n  _getTwitterRegistryKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(twitter_handle) {\n    var hashedTwitterHandle;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return utils_1.getHashedName(twitter_handle);\n\n          case 2:\n            hashedTwitterHandle = _context6.sent;\n            _context6.next = 5;\n            return utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n\n          case 5:\n            return _context6.abrupt(\"return\", _context6.sent);\n\n          case 6:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _getTwitterRegistryKey.apply(this, arguments);\n}\n\nexports.getTwitterRegistryKey = getTwitterRegistryKey;\n\nfunction getTwitterRegistry(_x20, _x21) {\n  return _getTwitterRegistry.apply(this, arguments);\n}\n\nfunction _getTwitterRegistry() {\n  _getTwitterRegistry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(connection, twitter_handle) {\n    var hashedTwitterHandle, twitterHandleRegistryKey, registry;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return utils_1.getHashedName(twitter_handle);\n\n          case 2:\n            hashedTwitterHandle = _context7.sent;\n            _context7.next = 5;\n            return utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n\n          case 5:\n            twitterHandleRegistryKey = _context7.sent;\n            registry = state_1.NameRegistryState.retrieve(connection, twitterHandleRegistryKey);\n            return _context7.abrupt(\"return\", registry);\n\n          case 8:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _getTwitterRegistry.apply(this, arguments);\n}\n\nexports.getTwitterRegistry = getTwitterRegistry;\n\nfunction getTwitterRegistryData(_x22, _x23) {\n  return _getTwitterRegistryData.apply(this, arguments);\n}\n\nfunction _getTwitterRegistryData() {\n  _getTwitterRegistryData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(connection, verifiedPubkey) {\n    var filters, filteredAccounts;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            // Does not give you the name, but is faster than getTwitterHandle + getTwitterRegistry to get the data\n            filters = [{\n              memcmp: {\n                offset: 0,\n                bytes: exports.TWITTER_ROOT_PARENT_REGISTRY_KEY.toBytes()\n              }\n            }, {\n              memcmp: {\n                offset: 32,\n                bytes: verifiedPubkey.toBytes()\n              }\n            }];\n            _context8.next = 3;\n            return utils_1.getFilteredProgramAccounts(connection, bindings_1.NAME_PROGRAM_ID, filters);\n\n          case 3:\n            filteredAccounts = _context8.sent;\n\n            if (!(filteredAccounts.length > 1)) {\n              _context8.next = 6;\n              break;\n            }\n\n            throw 'Found more than one twitter handle';\n\n          case 6:\n            return _context8.abrupt(\"return\", filteredAccounts[0].accountInfo.data);\n\n          case 7:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _getTwitterRegistryData.apply(this, arguments);\n}\n\nexports.getTwitterRegistryData = getTwitterRegistryData;","map":{"version":3,"sources":["../src/twitter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTwitterRegistryData = exports.getTwitterRegistry = exports.getTwitterRegistryKey = exports.getTwitterHandle = exports.deleteTwitterRegistry = exports.changeVerifiedPubkey = exports.changeTwitterRegistryData = exports.createVerifiedTwitterRegistry = exports.TWITTER_ROOT_PARENT_REGISTRY_KEY = exports.TWITTER_VERIFICATION_AUTHORITY = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst bindings_1 = require(\"./bindings\");\nconst instructions_1 = require(\"./instructions\");\nconst state_1 = require(\"./state\");\nconst utils_1 = require(\"./utils\");\nexports.TWITTER_VERIFICATION_AUTHORITY = new web3_js_1.PublicKey('867BLob5b52i81SNaV9Awm5ejkZV6VGSv9SxLcwukDDJ');\n// The address of the name registry that will be a parent to all twitter handle registries,\n// it should be owned by the TWITTER_VERIFICATION_AUTHORITY and it's name is irrelevant\nexports.TWITTER_ROOT_PARENT_REGISTRY_KEY = new web3_js_1.PublicKey('AFrGkxNmVLBn3mKhvfJJABvm8RJkTtRhHDoaF97pQZaA');\n// Signed by the authority and the payer\nasync function createVerifiedTwitterRegistry(connection, twitterHandle, verifiedPubkey, space, // The space that the user will have to write data into the verified registry\npayerKey) {\n    const hashedTwitterHandle = await utils_1.getHashedName(twitterHandle);\n    const twitterHandleRegistryKey = await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    const hashedVerifiedPubkey = await utils_1.getHashedName(verifiedPubkey.toString().concat(twitterHandle));\n    const reverseRegistryKey = await utils_1.getNameAccountKey(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, undefined);\n    space += 96; // Accounting for the Registry State Header\n    const instructions = [\n        // Create user facing registry\n        instructions_1.createInstruction(bindings_1.NAME_PROGRAM_ID, web3_js_1.SystemProgram.programId, twitterHandleRegistryKey, verifiedPubkey, payerKey, hashedTwitterHandle, new utils_1.Numberu64(await connection.getMinimumBalanceForRentExemption(space)), new utils_1.Numberu32(space), undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY, exports.TWITTER_VERIFICATION_AUTHORITY // Twitter authority acts as owner of the parent for all user-facing registries\n        ),\n        // Create reverse lookup registry\n        instructions_1.createInstruction(bindings_1.NAME_PROGRAM_ID, web3_js_1.SystemProgram.programId, reverseRegistryKey, verifiedPubkey, payerKey, hashedVerifiedPubkey, new utils_1.Numberu64(await connection.getMinimumBalanceForRentExemption(96 + 18)), new utils_1.Numberu32(96 + 18), // maximum length of a twitter handle\n        exports.TWITTER_VERIFICATION_AUTHORITY, // Twitter authority acts as class for all reverse-lookup registries\n        undefined, undefined),\n        // Write the twitter handle into the reverse lookup registry\n        instructions_1.updateInstruction(bindings_1.NAME_PROGRAM_ID, reverseRegistryKey, new utils_1.Numberu32(0), Buffer.from(twitterHandle), exports.TWITTER_VERIFICATION_AUTHORITY),\n    ];\n    return instructions;\n}\nexports.createVerifiedTwitterRegistry = createVerifiedTwitterRegistry;\n// Overwrite the data that is written in the user facing registry\n// Signed by the verified pubkey\nasync function changeTwitterRegistryData(twitterHandle, verifiedPubkey, offset, // The offset at which to write the input data into the NameRegistryData\ninput_data) {\n    const hashedTwitterHandle = await utils_1.getHashedName(twitterHandle);\n    const twitterHandleRegistryKey = await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    const instructions = [\n        instructions_1.updateInstruction(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, new utils_1.Numberu32(offset), input_data, verifiedPubkey),\n    ];\n    return instructions;\n}\nexports.changeTwitterRegistryData = changeTwitterRegistryData;\n// Change the verified pubkey for a given twitter handle\n// Signed by the Authority, the verified pubkey and the payer\nasync function changeVerifiedPubkey(connection, twitterHandle, currentVerifiedPubkey, newVerifiedPubkey, payerKey) {\n    const hashedTwitterHandle = await utils_1.getHashedName(twitterHandle);\n    const twitterHandleRegistryKey = await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    const currentHashedVerifiedPubkey = await utils_1.getHashedName(currentVerifiedPubkey.toString().concat(twitterHandle));\n    const currentReverseRegistryKey = await utils_1.getNameAccountKey(currentHashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, undefined);\n    const newHashedVerifiedPubkey = await utils_1.getHashedName(newVerifiedPubkey.toString().concat(twitterHandle));\n    const newReverseRegistryKey = await utils_1.getNameAccountKey(newHashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, undefined);\n    const instructions = [\n        // Transfer the user-facing registry ownership\n        instructions_1.transferInstruction(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, newVerifiedPubkey, currentVerifiedPubkey, undefined),\n        // Delete the current reverse registry\n        instructions_1.deleteInstruction(bindings_1.NAME_PROGRAM_ID, currentReverseRegistryKey, payerKey, currentVerifiedPubkey),\n        // Create the new reverse lookup registry\n        instructions_1.createInstruction(bindings_1.NAME_PROGRAM_ID, web3_js_1.SystemProgram.programId, newReverseRegistryKey, exports.TWITTER_VERIFICATION_AUTHORITY, payerKey, newHashedVerifiedPubkey, new utils_1.Numberu64(await connection.getMinimumBalanceForRentExemption(18)), new utils_1.Numberu32(18), // maximum length of a twitter handle\n        exports.TWITTER_VERIFICATION_AUTHORITY, // Twitter authority acts as class for all reverse-lookup registries\n        undefined, undefined),\n        // Write the twitter handle into the new reverse lookup registry\n        instructions_1.updateInstruction(bindings_1.NAME_PROGRAM_ID, newReverseRegistryKey, new utils_1.Numberu32(0), Buffer.from(twitterHandle), exports.TWITTER_VERIFICATION_AUTHORITY),\n    ];\n    return instructions;\n}\nexports.changeVerifiedPubkey = changeVerifiedPubkey;\n// Delete the verified registry for a given twitter handle\n// Signed by the verified pubkey\nasync function deleteTwitterRegistry(twitterHandle, verifiedPubkey) {\n    const hashedTwitterHandle = await utils_1.getHashedName(twitterHandle);\n    const twitterHandleRegistryKey = await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    const hashedVerifiedPubkey = await utils_1.getHashedName(verifiedPubkey.toString().concat(twitterHandle));\n    const reverseRegistryKey = await utils_1.getNameAccountKey(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, undefined);\n    const instructions = [\n        // Delete the user facing registry\n        instructions_1.deleteInstruction(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, verifiedPubkey, verifiedPubkey),\n        // Delete the reverse registry\n        instructions_1.deleteInstruction(bindings_1.NAME_PROGRAM_ID, reverseRegistryKey, verifiedPubkey, verifiedPubkey),\n    ];\n    return instructions;\n}\nexports.deleteTwitterRegistry = deleteTwitterRegistry;\nasync function getTwitterHandle(connection, verifiedPubkey) {\n    const filters = [\n        {\n            memcmp: {\n                offset: 32,\n                bytes: verifiedPubkey.toBase58(),\n            },\n        },\n        {\n            memcmp: {\n                offset: bindings_1.VERIFICATION_AUTHORITY_OFFSET,\n                bytes: exports.TWITTER_VERIFICATION_AUTHORITY.toBase58(),\n            },\n        },\n    ];\n    const filteredAccounts = await utils_1.getFilteredProgramAccounts(connection, bindings_1.NAME_PROGRAM_ID, filters);\n    for (const f of filteredAccounts) {\n        if (f.accountInfo.data.length == 114) {\n            return f.accountInfo.data.slice(96, 114).toString();\n        }\n    }\n    throw 'Could not find the twitter handle';\n}\nexports.getTwitterHandle = getTwitterHandle;\n// Returns the key of the user-facing registry\nasync function getTwitterRegistryKey(twitter_handle) {\n    const hashedTwitterHandle = await utils_1.getHashedName(twitter_handle);\n    return await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n}\nexports.getTwitterRegistryKey = getTwitterRegistryKey;\nasync function getTwitterRegistry(connection, twitter_handle) {\n    const hashedTwitterHandle = await utils_1.getHashedName(twitter_handle);\n    const twitterHandleRegistryKey = await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    const registry = state_1.NameRegistryState.retrieve(connection, twitterHandleRegistryKey);\n    return registry;\n}\nexports.getTwitterRegistry = getTwitterRegistry;\nasync function getTwitterRegistryData(connection, verifiedPubkey) {\n    // Does not give you the name, but is faster than getTwitterHandle + getTwitterRegistry to get the data\n    const filters = [\n        {\n            memcmp: {\n                offset: 0,\n                bytes: exports.TWITTER_ROOT_PARENT_REGISTRY_KEY.toBytes(),\n            },\n        },\n        {\n            memcmp: {\n                offset: 32,\n                bytes: verifiedPubkey.toBytes(),\n            },\n        },\n    ];\n    const filteredAccounts = await utils_1.getFilteredProgramAccounts(connection, bindings_1.NAME_PROGRAM_ID, filters);\n    if (filteredAccounts.length > 1) {\n        throw 'Found more than one twitter handle';\n    }\n    return filteredAccounts[0].accountInfo.data;\n}\nexports.getTwitterRegistryData = getTwitterRegistryData;\n//# sourceMappingURL=twitter.js.map"]},"metadata":{},"sourceType":"script"}