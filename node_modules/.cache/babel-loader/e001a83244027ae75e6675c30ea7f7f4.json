{"ast":null,"code":"import _regeneratorRuntime from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import EventEmitter from'eventemitter3';import TransportWebUSB from'@ledgerhq/hw-transport-webusb';import{notify}from'../../utils/notifications';import{getPublicKey,signTransaction as _signTransaction}from'./core';import{DEFAULT_PUBLIC_KEY}from'../types';export var LedgerWalletAdapter=/*#__PURE__*/function(_EventEmitter){_inherits(LedgerWalletAdapter,_EventEmitter);var _super=_createSuper(LedgerWalletAdapter);function LedgerWalletAdapter(){var _this;_classCallCheck(this,LedgerWalletAdapter);_this=_super.call(this);_this._connecting=void 0;_this._publicKey=void 0;_this._transport=void 0;_this._connecting=false;_this._publicKey=null;_this._transport=null;return _this;}_createClass(LedgerWalletAdapter,[{key:\"publicKey\",get:function get(){return this._publicKey||DEFAULT_PUBLIC_KEY;}},{key:\"connected\",get:function get(){return this._publicKey!==null;}},{key:\"autoApprove\",get:function get(){return false;}},{key:\"signAllTransactions\",value:function(){var _signAllTransactions=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(transactions){var result,i,transaction,signed;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:result=[];i=0;case 2:if(!(i<transactions.length)){_context.next=11;break;}transaction=transactions[i];_context.next=6;return this.signTransaction(transaction);case 6:signed=_context.sent;result.push(signed);case 8:i++;_context.next=2;break;case 11:return _context.abrupt(\"return\",result);case 12:case\"end\":return _context.stop();}}},_callee,this);}));function signAllTransactions(_x){return _signAllTransactions.apply(this,arguments);}return signAllTransactions;}()},{key:\"signTransaction\",value:function(){var _signTransaction2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(transaction){var signature;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(!this._transport||!this._publicKey)){_context2.next=2;break;}throw new Error('Not connected to Ledger');case 2:_context2.next=4;return _signTransaction(this._transport,transaction);case 4:signature=_context2.sent;transaction.addSignature(this._publicKey,signature);return _context2.abrupt(\"return\",transaction);case 7:case\"end\":return _context2.stop();}}},_callee2,this);}));function signTransaction(_x2){return _signTransaction2.apply(this,arguments);}return signTransaction;}()},{key:\"connect\",value:function(){var _connect=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!this._connecting){_context3.next=2;break;}return _context3.abrupt(\"return\");case 2:this._connecting=true;_context3.prev=3;_context3.next=6;return TransportWebUSB.create();case 6:this._transport=_context3.sent;_context3.next=9;return getPublicKey(this._transport);case 9:this._publicKey=_context3.sent;this.emit('connect',this._publicKey);_context3.next=18;break;case 13:_context3.prev=13;_context3.t0=_context3[\"catch\"](3);notify({message:'Ledger Error',description:_context3.t0.message});_context3.next=18;return this.disconnect();case 18:_context3.prev=18;this._connecting=false;return _context3.finish(18);case 21:case\"end\":return _context3.stop();}}},_callee3,this,[[3,13,18,21]]);}));function connect(){return _connect.apply(this,arguments);}return connect;}()},{key:\"disconnect\",value:function(){var _disconnect=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var emit;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:emit=false;if(!this._transport){_context4.next=6;break;}_context4.next=4;return this._transport.close();case 4:this._transport=null;emit=true;case 6:this._connecting=false;this._publicKey=null;if(emit){this.emit('disconnect');}case 9:case\"end\":return _context4.stop();}}},_callee4,this);}));function disconnect(){return _disconnect.apply(this,arguments);}return disconnect;}()}]);return LedgerWalletAdapter;}(EventEmitter);","map":{"version":3,"sources":["/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/wallet-adapters/ledger/index.tsx"],"names":["EventEmitter","TransportWebUSB","notify","getPublicKey","signTransaction","DEFAULT_PUBLIC_KEY","LedgerWalletAdapter","_connecting","_publicKey","_transport","transactions","result","i","length","transaction","signed","push","Error","signature","addSignature","create","emit","message","description","disconnect","close"],"mappings":"qiCAGA,MAAOA,CAAAA,YAAP,KAAyB,eAAzB,CAEA,MAAOC,CAAAA,eAAP,KAA4B,+BAA5B,CACA,OAASC,MAAT,KAAuB,2BAAvB,CACA,OAASC,YAAT,CAAuBC,eAAe,GAAfA,CAAAA,gBAAvB,KAA8C,QAA9C,CACA,OAASC,kBAAT,KAAkD,UAAlD,CAEA,UAAaC,CAAAA,mBAAb,gIAKE,8BAAc,qDACZ,wBADY,MAJdC,WAIc,cAHdC,UAGc,cAFdC,UAEc,QAEZ,MAAKF,WAAL,CAAmB,KAAnB,CACA,MAAKC,UAAL,CAAkB,IAAlB,CACA,MAAKC,UAAL,CAAkB,IAAlB,CAJY,aAKb,CAVH,uDAYE,cAAgB,CACd,MAAO,MAAKD,UAAL,EAAmBH,kBAA1B,CACD,CAdH,uBAgBE,cAAgB,CACd,MAAO,MAAKG,UAAL,GAAoB,IAA3B,CACD,CAlBH,yBAoBE,cAAkB,CAChB,MAAO,MAAP,CACD,CAtBH,+HAwBE,iBACEE,YADF,kJAGQC,MAHR,CAGgC,EAHhC,CAIWC,CAJX,CAIe,CAJf,aAIkBA,CAAC,CAAGF,YAAY,CAACG,MAJnC,2BAKUC,WALV,CAKwBJ,YAAY,CAACE,CAAD,CALpC,uBAMyB,MAAKR,eAAL,CAAqBU,WAArB,CANzB,QAMUC,MANV,eAOIJ,MAAM,CAACK,IAAP,CAAYD,MAAZ,EAPJ,OAI2CH,CAAC,EAJ5C,+DAUSD,MAVT,8DAxBF,6OAqCE,kBAAsBG,WAAtB,yIACM,CAAC,KAAKL,UAAN,EAAoB,CAAC,KAAKD,UADhC,gCAEU,IAAIS,CAAAA,KAAJ,CAAU,yBAAV,CAFV,+BAM0Bb,CAAAA,gBAAe,CAAC,KAAKK,UAAN,CAAkBK,WAAlB,CANzC,QAMQI,SANR,gBAQEJ,WAAW,CAACK,YAAZ,CAAyB,KAAKX,UAA9B,CAA0CU,SAA1C,EARF,iCAUSJ,WAVT,+DArCF,kNAkDE,4IACM,KAAKP,WADX,mEAKE,KAAKA,WAAL,CAAmB,IAAnB,CALF,wCAS4BN,CAAAA,eAAe,CAACmB,MAAhB,EAT5B,QASI,KAAKX,UATT,uCAW4BN,CAAAA,YAAY,CAAC,KAAKM,UAAN,CAXxC,QAWI,KAAKD,UAXT,gBAYI,KAAKa,IAAL,CAAU,SAAV,CAAqB,KAAKb,UAA1B,EAZJ,qFAcIN,MAAM,CAAC,CACLoB,OAAO,CAAE,cADJ,CAELC,WAAW,CAAE,aAAMD,OAFd,CAAD,CAAN,CAdJ,wBAkBU,MAAKE,UAAL,EAlBV,2BAoBI,KAAKjB,WAAL,CAAmB,KAAnB,CApBJ,yGAlDF,4LA0EE,iJACMc,IADN,CACa,KADb,KAEM,KAAKZ,UAFX,iDAGU,MAAKA,UAAL,CAAgBgB,KAAhB,EAHV,QAII,KAAKhB,UAAL,CAAkB,IAAlB,CACAY,IAAI,CAAG,IAAP,CALJ,OAQE,KAAKd,WAAL,CAAmB,KAAnB,CACA,KAAKC,UAAL,CAAkB,IAAlB,CAEA,GAAIa,IAAJ,CAAU,CACR,KAAKA,IAAL,CAAU,YAAV,EACD,CAbH,6DA1EF,yHAAyCrB,YAAzC","sourcesContent":["import type Transport from '@ledgerhq/hw-transport';\nimport type { Transaction } from '@solana/web3.js';\n\nimport EventEmitter from 'eventemitter3';\nimport { PublicKey } from '@solana/web3.js';\nimport TransportWebUSB from '@ledgerhq/hw-transport-webusb';\nimport { notify } from '../../utils/notifications';\nimport { getPublicKey, signTransaction } from './core';\nimport { DEFAULT_PUBLIC_KEY, WalletAdapter } from '../types';\n\nexport class LedgerWalletAdapter extends EventEmitter implements WalletAdapter {\n  _connecting: boolean;\n  _publicKey: PublicKey | null;\n  _transport: Transport | null;\n\n  constructor() {\n    super();\n    this._connecting = false;\n    this._publicKey = null;\n    this._transport = null;\n  }\n\n  get publicKey() {\n    return this._publicKey || DEFAULT_PUBLIC_KEY;\n  }\n\n  get connected() {\n    return this._publicKey !== null;\n  }\n\n  get autoApprove() {\n    return false;\n  }\n\n  public async signAllTransactions(\n    transactions: Transaction[],\n  ): Promise<Transaction[]> {\n    const result: Transaction[] = [];\n    for (let i = 0; i < transactions.length; i++) {\n      const transaction = transactions[i];\n      const signed = await this.signTransaction(transaction);\n      result.push(signed);\n    }\n\n    return result;\n  }\n\n  async signTransaction(transaction: Transaction) {\n    if (!this._transport || !this._publicKey) {\n      throw new Error('Not connected to Ledger');\n    }\n\n    // @TODO: account selection (derivation path changes with account)\n    const signature = await signTransaction(this._transport, transaction);\n\n    transaction.addSignature(this._publicKey, signature);\n\n    return transaction;\n  }\n\n  async connect() {\n    if (this._connecting) {\n      return;\n    }\n\n    this._connecting = true;\n\n    try {\n      // @TODO: transport selection (WebUSB, WebHID, bluetooth, ...)\n      this._transport = await TransportWebUSB.create();\n      // @TODO: account selection\n      this._publicKey = await getPublicKey(this._transport);\n      this.emit('connect', this._publicKey);\n    } catch (error) {\n      notify({\n        message: 'Ledger Error',\n        description: error.message,\n      });\n      await this.disconnect();\n    } finally {\n      this._connecting = false;\n    }\n  }\n\n  async disconnect() {\n    let emit = false;\n    if (this._transport) {\n      await this._transport.close();\n      this._transport = null;\n      emit = true;\n    }\n\n    this._connecting = false;\n    this._publicKey = null;\n\n    if (emit) {\n      this.emit('disconnect');\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}