{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PoolTransactions = void 0;\n\nvar instructions_1 = require(\"./instructions\");\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar serum_1 = require(\"@project-serum/serum\");\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar associated_token_1 = require(\"@project-serum/associated-token\");\n/**\n * High-level API for constructing transactions to interact with pools.\n *\n * For a lower-level API, see {@link PoolInstructions}.\n */\n\n\nvar PoolTransactions = /*#__PURE__*/function () {\n  function PoolTransactions() {\n    _classCallCheck(this, PoolTransactions);\n  }\n\n  _createClass(PoolTransactions, null, [{\n    key: \"initializeSimplePool\",\n    value:\n    /**\n     * Transaction to initialize a simple pool.\n     *\n     * This will:\n     * - initialize a new pool token mint\n     * - initialize a pool token account for the creator and mint some tokens to it\n     * - initialize vault accounts for each of the pool assets\n     * - transfer assets from the pool creator to the vault accounts\n     * - initialize the pool\n     */\n    function () {\n      var _initializeSimplePool = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {\n        var connection, programId, poolStateSpace, _params$poolMintDecim, poolMintDecimals, poolName, assetMints, _params$initialPoolMi, initialPoolMintSupply, initialAssetQuantities, creator, creatorAssets, _params$feeRate, feeRate, _params$additionalAcc, additionalAccounts, poolStateAccount, _yield$web3_js_1$Publ, _yield$web3_js_1$Publ2, vaultSigner, vaultSignerNonce, poolTokenMint, creatorPoolTokenAddress, vaultAddresses, lqdFeeAddress, setup, finalize, mintAccountSpace, mintAccountLamports;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                connection = params.connection, programId = params.programId, poolStateSpace = params.poolStateSpace, _params$poolMintDecim = params.poolMintDecimals, poolMintDecimals = _params$poolMintDecim === void 0 ? 6 : _params$poolMintDecim, poolName = params.poolName, assetMints = params.assetMints, _params$initialPoolMi = params.initialPoolMintSupply, initialPoolMintSupply = _params$initialPoolMi === void 0 ? new bn_js_1.default('1' + '0'.repeat(poolMintDecimals)) : _params$initialPoolMi, initialAssetQuantities = params.initialAssetQuantities, creator = params.creator, creatorAssets = params.creatorAssets, _params$feeRate = params.feeRate, feeRate = _params$feeRate === void 0 ? 2500 : _params$feeRate, _params$additionalAcc = params.additionalAccounts, additionalAccounts = _params$additionalAcc === void 0 ? [] : _params$additionalAcc;\n\n                if (!(assetMints.length !== initialAssetQuantities.length)) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                throw new Error('assetMints and initialAssetQuantities must have the same length');\n\n              case 3:\n                if (!(assetMints.length !== creatorAssets.length)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                throw new Error('assetMints and creatorAssets must have the same length');\n\n              case 5:\n                poolStateAccount = new web3_js_1.Account();\n                _context2.next = 8;\n                return web3_js_1.PublicKey.findProgramAddress([poolStateAccount.publicKey.toBuffer()], programId);\n\n              case 8:\n                _yield$web3_js_1$Publ = _context2.sent;\n                _yield$web3_js_1$Publ2 = _slicedToArray(_yield$web3_js_1$Publ, 2);\n                vaultSigner = _yield$web3_js_1$Publ2[0];\n                vaultSignerNonce = _yield$web3_js_1$Publ2[1];\n                poolTokenMint = new web3_js_1.Account();\n                _context2.next = 15;\n                return associated_token_1.getAssociatedTokenAddress(creator, poolTokenMint.publicKey);\n\n              case 15:\n                creatorPoolTokenAddress = _context2.sent;\n                _context2.next = 18;\n                return Promise.all(assetMints.map(function (mint) {\n                  return associated_token_1.getAssociatedTokenAddress(vaultSigner, mint);\n                }));\n\n              case 18:\n                vaultAddresses = _context2.sent;\n                _context2.next = 21;\n                return associated_token_1.getAssociatedTokenAddress(instructions_1.LQD_FEE_OWNER_ADDRESS, poolTokenMint.publicKey);\n\n              case 21:\n                lqdFeeAddress = _context2.sent;\n                // Split into two transactions to stay under the size limit.\n                // Ideally all instructions that transfer tokens happen in the second transaction,\n                // so they get reverted if the pool creation fails.\n                setup = {\n                  transaction: new web3_js_1.Transaction(),\n                  signers: [poolTokenMint]\n                };\n                finalize = {\n                  transaction: new web3_js_1.Transaction(),\n                  signers: [poolStateAccount]\n                };\n                mintAccountSpace = 82;\n                _context2.next = 27;\n                return connection.getMinimumBalanceForRentExemption(mintAccountSpace);\n\n              case 27:\n                mintAccountLamports = _context2.sent;\n                _context2.t0 = setup.transaction;\n                _context2.t1 = web3_js_1.SystemProgram.createAccount({\n                  fromPubkey: creator,\n                  newAccountPubkey: poolTokenMint.publicKey,\n                  space: mintAccountSpace,\n                  lamports: mintAccountLamports,\n                  programId: serum_1.TokenInstructions.TOKEN_PROGRAM_ID\n                });\n                _context2.t2 = serum_1.TokenInstructions.initializeMint({\n                  mint: poolTokenMint.publicKey,\n                  decimals: poolMintDecimals,\n                  mintAuthority: creator\n                });\n                _context2.next = 33;\n                return associated_token_1.createAssociatedTokenAccount(creator, creator, poolTokenMint.publicKey);\n\n              case 33:\n                _context2.t3 = _context2.sent;\n                _context2.next = 36;\n                return associated_token_1.createAssociatedTokenAccount(creator, instructions_1.LQD_FEE_OWNER_ADDRESS, poolTokenMint.publicKey);\n\n              case 36:\n                _context2.t4 = _context2.sent;\n\n                _context2.t0.add.call(_context2.t0, _context2.t1, _context2.t2, _context2.t3, _context2.t4);\n\n                finalize.transaction.add(serum_1.TokenInstructions.mintTo({\n                  mint: poolTokenMint.publicKey,\n                  destination: creatorPoolTokenAddress,\n                  amount: initialPoolMintSupply,\n                  mintAuthority: creator\n                }), serum_1.TokenInstructions.setAuthority({\n                  target: poolTokenMint.publicKey,\n                  currentAuthority: creator,\n                  newAuthority: vaultSigner,\n                  authorityType: 0\n                })); // Initialize vault accounts.\n\n                _context2.next = 41;\n                return Promise.all(assetMints.map( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(mint, index) {\n                    var vault;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            vault = vaultAddresses[index];\n                            _context.t0 = setup.transaction;\n                            _context.next = 4;\n                            return associated_token_1.createAssociatedTokenAccount(creator, vaultSigner, mint);\n\n                          case 4:\n                            _context.t1 = _context.sent;\n\n                            _context.t0.add.call(_context.t0, _context.t1);\n\n                            finalize.transaction.add(serum_1.TokenInstructions.transfer({\n                              source: creatorAssets[index],\n                              destination: vault,\n                              amount: initialAssetQuantities[index],\n                              owner: creator\n                            }));\n\n                          case 7:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x2, _x3) {\n                    return _ref.apply(this, arguments);\n                  };\n                }()));\n\n              case 41:\n                _context2.t5 = finalize.transaction;\n                _context2.t6 = web3_js_1.SystemProgram;\n                _context2.t7 = creator;\n                _context2.t8 = poolStateAccount.publicKey;\n                _context2.t9 = poolStateSpace;\n                _context2.next = 48;\n                return connection.getMinimumBalanceForRentExemption(poolStateSpace);\n\n              case 48:\n                _context2.t10 = _context2.sent;\n                _context2.t11 = programId;\n                _context2.t12 = {\n                  fromPubkey: _context2.t7,\n                  newAccountPubkey: _context2.t8,\n                  space: _context2.t9,\n                  lamports: _context2.t10,\n                  programId: _context2.t11\n                };\n                _context2.t13 = _context2.t6.createAccount.call(_context2.t6, _context2.t12);\n                _context2.t14 = instructions_1.PoolInstructions.initialize(programId, poolStateAccount.publicKey, poolTokenMint.publicKey, poolName, vaultAddresses, vaultSigner, vaultSignerNonce, lqdFeeAddress, creatorPoolTokenAddress, feeRate, additionalAccounts);\n\n                _context2.t5.add.call(_context2.t5, _context2.t13, _context2.t14);\n\n                return _context2.abrupt(\"return\", [poolStateAccount.publicKey, [setup, finalize]]);\n\n              case 55:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function initializeSimplePool(_x) {\n        return _initializeSimplePool.apply(this, arguments);\n      }\n\n      return initializeSimplePool;\n    }()\n    /**\n     * Transaction to get a pool basket, for use with simulateTransaction.\n     *\n     * This is a wrapper around {@link PoolInstructions.getBasket} that handles\n     * initializing the retbuf account.\n     *\n     * @param pool Pool to interact with.\n     * @param action Creation, redemption, or swap.\n     * @param payer Payer for fees. Must have nonzero SOL but will not be charged\n     * if the transaction is only simulated.\n     */\n\n  }, {\n    key: \"getBasket\",\n    value: function getBasket(pool, action, payer) {\n      var transaction = new web3_js_1.Transaction();\n      var retbufAccount = new web3_js_1.Account();\n      transaction.add(web3_js_1.SystemProgram.createAccount({\n        fromPubkey: payer,\n        newAccountPubkey: retbufAccount.publicKey,\n        lamports: 0,\n        space: 1024,\n        programId: instructions_1.RETBUF_PROGRAM_ID\n      }));\n      transaction.add(instructions_1.PoolInstructions.getBasket(pool, action, retbufAccount.publicKey));\n      transaction.feePayer = payer;\n      return {\n        transaction: transaction,\n        signers: [retbufAccount]\n      };\n    }\n    /**\n     * Transaction to execute a creation, redemption, or swap.\n     *\n     * This is a wrapper around {@link PoolInstructions.execute} that handles\n     * token delegation.\n     *\n     * The transaction will create a temporary account, delegate tokens to it,\n     * and use it in place of the actual owner, to limit the quantity of tokens\n     * that the pool can pull from the user's accounts.\n     *\n     * @param pool Pool to interact with.\n     * @param action Creation, redemption, or swap.\n     * @param user Token accounts to pull funds from or send funds to.\n     * @param expectedBasket Expected basket. Used to determine the quantity of\n     * tokens to approve.\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute(pool, action, user, expectedBasket) {\n      if (expectedBasket.quantities.length !== pool.state.assets.length) {\n        throw new Error('expectedBasket must have the same number of components as the pool');\n      }\n\n      var transaction = new web3_js_1.Transaction();\n      var delegate = new web3_js_1.Account();\n      var signers = [delegate];\n      user = _objectSpread(_objectSpread({}, user), {}, {\n        assetAccounts: user.assetAccounts.slice()\n      });\n      var wrappedSolAccount = null;\n\n      function approveDelegate(amount, index) {\n        var approveZero = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (user.assetAccounts[index].equals(user.owner) && pool.state.assets[index].mint.equals(serum_1.TokenInstructions.WRAPPED_SOL_MINT)) {\n          wrappedSolAccount = new web3_js_1.Account();\n          signers.push(wrappedSolAccount);\n          transaction.add(web3_js_1.SystemProgram.createAccount({\n            fromPubkey: user.owner,\n            newAccountPubkey: wrappedSolAccount.publicKey,\n            lamports: amount.toNumber() + 2.04e6,\n            space: 165,\n            programId: serum_1.TokenInstructions.TOKEN_PROGRAM_ID\n          }), serum_1.TokenInstructions.initializeAccount({\n            account: wrappedSolAccount.publicKey,\n            mint: serum_1.TokenInstructions.WRAPPED_SOL_MINT,\n            owner: delegate.publicKey\n          }));\n          user.assetAccounts[index] = wrappedSolAccount.publicKey;\n        } else if (amount.gtn(0) || approveZero) {\n          transaction.add(serum_1.TokenInstructions.approve({\n            owner: user.owner,\n            source: user.assetAccounts[index],\n            delegate: delegate.publicKey,\n            amount: amount\n          }));\n        }\n      }\n\n      if ('create' in action) {\n        expectedBasket.quantities.forEach(function (amount, index) {\n          approveDelegate(amount, index, true);\n        });\n      } else if ('redeem' in action) {\n        transaction.add(serum_1.TokenInstructions.approve({\n          owner: user.owner,\n          source: user.poolTokenAccount,\n          delegate: delegate.publicKey,\n          amount: action.redeem\n        }));\n        expectedBasket.quantities.forEach(function (amount, index) {\n          if (amount.isNeg()) {\n            approveDelegate(amount.abs(), index);\n          } else {\n            approveDelegate(new bn_js_1.default(0), index);\n          }\n        });\n      } else if ('swap' in action) {\n        action.swap.quantities.forEach(function (amount, index) {\n          approveDelegate(amount, index);\n        });\n      }\n\n      transaction.add(instructions_1.PoolInstructions.execute(pool, action, _objectSpread(_objectSpread({}, user), {}, {\n        owner: delegate.publicKey\n      })));\n\n      if (wrappedSolAccount) {\n        transaction.add(serum_1.TokenInstructions.closeAccount({\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          source: wrappedSolAccount.publicKey,\n          destination: user.owner,\n          owner: delegate.publicKey\n        }));\n      }\n\n      return {\n        transaction: transaction,\n        signers: signers\n      };\n    }\n  }]);\n\n  return PoolTransactions;\n}();\n\nexports.PoolTransactions = PoolTransactions;","map":{"version":3,"sources":["../../src/transactions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PoolTransactions = void 0;\nconst instructions_1 = require(\"./instructions\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst serum_1 = require(\"@project-serum/serum\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst associated_token_1 = require(\"@project-serum/associated-token\");\n/**\n * High-level API for constructing transactions to interact with pools.\n *\n * For a lower-level API, see {@link PoolInstructions}.\n */\nclass PoolTransactions {\n    /**\n     * Transaction to initialize a simple pool.\n     *\n     * This will:\n     * - initialize a new pool token mint\n     * - initialize a pool token account for the creator and mint some tokens to it\n     * - initialize vault accounts for each of the pool assets\n     * - transfer assets from the pool creator to the vault accounts\n     * - initialize the pool\n     */\n    static async initializeSimplePool(params) {\n        const { connection, programId, poolStateSpace, poolMintDecimals = 6, poolName, assetMints, initialPoolMintSupply = new bn_js_1.default('1' + '0'.repeat(poolMintDecimals)), initialAssetQuantities, creator, creatorAssets, feeRate = 2500, additionalAccounts = [], } = params;\n        if (assetMints.length !== initialAssetQuantities.length) {\n            throw new Error('assetMints and initialAssetQuantities must have the same length');\n        }\n        if (assetMints.length !== creatorAssets.length) {\n            throw new Error('assetMints and creatorAssets must have the same length');\n        }\n        const poolStateAccount = new web3_js_1.Account();\n        const [vaultSigner, vaultSignerNonce] = await web3_js_1.PublicKey.findProgramAddress([poolStateAccount.publicKey.toBuffer()], programId);\n        const poolTokenMint = new web3_js_1.Account();\n        const creatorPoolTokenAddress = await associated_token_1.getAssociatedTokenAddress(creator, poolTokenMint.publicKey);\n        const vaultAddresses = await Promise.all(assetMints.map(mint => associated_token_1.getAssociatedTokenAddress(vaultSigner, mint)));\n        const lqdFeeAddress = await associated_token_1.getAssociatedTokenAddress(instructions_1.LQD_FEE_OWNER_ADDRESS, poolTokenMint.publicKey);\n        // Split into two transactions to stay under the size limit.\n        // Ideally all instructions that transfer tokens happen in the second transaction,\n        // so they get reverted if the pool creation fails.\n        const setup = {\n            transaction: new web3_js_1.Transaction(),\n            signers: [poolTokenMint],\n        };\n        const finalize = {\n            transaction: new web3_js_1.Transaction(),\n            signers: [poolStateAccount],\n        };\n        const mintAccountSpace = 82;\n        const mintAccountLamports = await connection.getMinimumBalanceForRentExemption(mintAccountSpace);\n        // Initialize pool token.\n        setup.transaction.add(web3_js_1.SystemProgram.createAccount({\n            fromPubkey: creator,\n            newAccountPubkey: poolTokenMint.publicKey,\n            space: mintAccountSpace,\n            lamports: mintAccountLamports,\n            programId: serum_1.TokenInstructions.TOKEN_PROGRAM_ID,\n        }), serum_1.TokenInstructions.initializeMint({\n            mint: poolTokenMint.publicKey,\n            decimals: poolMintDecimals,\n            mintAuthority: creator,\n        }), await associated_token_1.createAssociatedTokenAccount(creator, creator, poolTokenMint.publicKey), await associated_token_1.createAssociatedTokenAccount(creator, instructions_1.LQD_FEE_OWNER_ADDRESS, poolTokenMint.publicKey));\n        finalize.transaction.add(serum_1.TokenInstructions.mintTo({\n            mint: poolTokenMint.publicKey,\n            destination: creatorPoolTokenAddress,\n            amount: initialPoolMintSupply,\n            mintAuthority: creator,\n        }), serum_1.TokenInstructions.setAuthority({\n            target: poolTokenMint.publicKey,\n            currentAuthority: creator,\n            newAuthority: vaultSigner,\n            authorityType: 0,\n        }));\n        // Initialize vault accounts.\n        await Promise.all(assetMints.map(async (mint, index) => {\n            const vault = vaultAddresses[index];\n            setup.transaction.add(await associated_token_1.createAssociatedTokenAccount(creator, vaultSigner, mint));\n            finalize.transaction.add(serum_1.TokenInstructions.transfer({\n                source: creatorAssets[index],\n                destination: vault,\n                amount: initialAssetQuantities[index],\n                owner: creator,\n            }));\n        }));\n        // Initialize pool account.\n        finalize.transaction.add(web3_js_1.SystemProgram.createAccount({\n            fromPubkey: creator,\n            newAccountPubkey: poolStateAccount.publicKey,\n            space: poolStateSpace,\n            lamports: await connection.getMinimumBalanceForRentExemption(poolStateSpace),\n            programId: programId,\n        }), instructions_1.PoolInstructions.initialize(programId, poolStateAccount.publicKey, poolTokenMint.publicKey, poolName, vaultAddresses, vaultSigner, vaultSignerNonce, lqdFeeAddress, creatorPoolTokenAddress, feeRate, additionalAccounts));\n        return [poolStateAccount.publicKey, [setup, finalize]];\n    }\n    /**\n     * Transaction to get a pool basket, for use with simulateTransaction.\n     *\n     * This is a wrapper around {@link PoolInstructions.getBasket} that handles\n     * initializing the retbuf account.\n     *\n     * @param pool Pool to interact with.\n     * @param action Creation, redemption, or swap.\n     * @param payer Payer for fees. Must have nonzero SOL but will not be charged\n     * if the transaction is only simulated.\n     */\n    static getBasket(pool, action, payer) {\n        const transaction = new web3_js_1.Transaction();\n        const retbufAccount = new web3_js_1.Account();\n        transaction.add(web3_js_1.SystemProgram.createAccount({\n            fromPubkey: payer,\n            newAccountPubkey: retbufAccount.publicKey,\n            lamports: 0,\n            space: 1024,\n            programId: instructions_1.RETBUF_PROGRAM_ID,\n        }));\n        transaction.add(instructions_1.PoolInstructions.getBasket(pool, action, retbufAccount.publicKey));\n        transaction.feePayer = payer;\n        return { transaction, signers: [retbufAccount] };\n    }\n    /**\n     * Transaction to execute a creation, redemption, or swap.\n     *\n     * This is a wrapper around {@link PoolInstructions.execute} that handles\n     * token delegation.\n     *\n     * The transaction will create a temporary account, delegate tokens to it,\n     * and use it in place of the actual owner, to limit the quantity of tokens\n     * that the pool can pull from the user's accounts.\n     *\n     * @param pool Pool to interact with.\n     * @param action Creation, redemption, or swap.\n     * @param user Token accounts to pull funds from or send funds to.\n     * @param expectedBasket Expected basket. Used to determine the quantity of\n     * tokens to approve.\n     */\n    static execute(pool, action, user, expectedBasket) {\n        if (expectedBasket.quantities.length !== pool.state.assets.length) {\n            throw new Error('expectedBasket must have the same number of components as the pool');\n        }\n        const transaction = new web3_js_1.Transaction();\n        const delegate = new web3_js_1.Account();\n        const signers = [delegate];\n        user = { ...user, assetAccounts: user.assetAccounts.slice() };\n        let wrappedSolAccount = null;\n        function approveDelegate(amount, index, approveZero = false) {\n            if (user.assetAccounts[index].equals(user.owner) &&\n                pool.state.assets[index].mint.equals(serum_1.TokenInstructions.WRAPPED_SOL_MINT)) {\n                wrappedSolAccount = new web3_js_1.Account();\n                signers.push(wrappedSolAccount);\n                transaction.add(web3_js_1.SystemProgram.createAccount({\n                    fromPubkey: user.owner,\n                    newAccountPubkey: wrappedSolAccount.publicKey,\n                    lamports: amount.toNumber() + 2.04e6,\n                    space: 165,\n                    programId: serum_1.TokenInstructions.TOKEN_PROGRAM_ID,\n                }), serum_1.TokenInstructions.initializeAccount({\n                    account: wrappedSolAccount.publicKey,\n                    mint: serum_1.TokenInstructions.WRAPPED_SOL_MINT,\n                    owner: delegate.publicKey,\n                }));\n                user.assetAccounts[index] = wrappedSolAccount.publicKey;\n            }\n            else if (amount.gtn(0) || approveZero) {\n                transaction.add(serum_1.TokenInstructions.approve({\n                    owner: user.owner,\n                    source: user.assetAccounts[index],\n                    delegate: delegate.publicKey,\n                    amount,\n                }));\n            }\n        }\n        if ('create' in action) {\n            expectedBasket.quantities.forEach((amount, index) => {\n                approveDelegate(amount, index, true);\n            });\n        }\n        else if ('redeem' in action) {\n            transaction.add(serum_1.TokenInstructions.approve({\n                owner: user.owner,\n                source: user.poolTokenAccount,\n                delegate: delegate.publicKey,\n                amount: action.redeem,\n            }));\n            expectedBasket.quantities.forEach((amount, index) => {\n                if (amount.isNeg()) {\n                    approveDelegate(amount.abs(), index);\n                }\n                else {\n                    approveDelegate(new bn_js_1.default(0), index);\n                }\n            });\n        }\n        else if ('swap' in action) {\n            action.swap.quantities.forEach((amount, index) => {\n                approveDelegate(amount, index);\n            });\n        }\n        transaction.add(instructions_1.PoolInstructions.execute(pool, action, {\n            ...user,\n            owner: delegate.publicKey,\n        }));\n        if (wrappedSolAccount) {\n            transaction.add(serum_1.TokenInstructions.closeAccount({\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                source: wrappedSolAccount.publicKey,\n                destination: user.owner,\n                owner: delegate.publicKey,\n            }));\n        }\n        return { transaction, signers };\n    }\n}\nexports.PoolTransactions = PoolTransactions;\n//# sourceMappingURL=transactions.js.map"]},"metadata":{},"sourceType":"script"}