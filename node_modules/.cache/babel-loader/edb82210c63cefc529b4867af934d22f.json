{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport * as BufferLayout from 'buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport { WRAPPED_SOL_MINT } from '@project-serum/serum/lib/token-instructions';\nimport { TOKEN_MINTS } from '@project-serum/serum';\nimport { useAllMarkets, useCustomMarkets, useTokenAccounts } from './markets';\nimport { getMultipleSolanaAccounts } from './send';\nimport { useConnection } from './connection';\nimport { useAsyncData } from './fetch-loop';\nimport tuple from 'immutable-tuple';\nimport BN from 'bn.js';\nimport { useMemo } from 'react';\nexport const ACCOUNT_LAYOUT = BufferLayout.struct([BufferLayout.blob(32, 'mint'), BufferLayout.blob(32, 'owner'), BufferLayout.nu64('amount'), BufferLayout.blob(93)]);\nexport const MINT_LAYOUT = BufferLayout.struct([BufferLayout.blob(36), BufferLayout.blob(8, 'supply'), BufferLayout.u8('decimals'), BufferLayout.u8('initialized'), BufferLayout.blob(36)]);\nexport function parseTokenAccountData(data) {\n  let {\n    mint,\n    owner,\n    amount\n  } = ACCOUNT_LAYOUT.decode(data);\n  return {\n    mint: new PublicKey(mint),\n    owner: new PublicKey(owner),\n    amount\n  };\n}\nexport function parseTokenMintData(data) {\n  let {\n    decimals,\n    initialized,\n    supply\n  } = MINT_LAYOUT.decode(data);\n  return {\n    decimals,\n    initialized: !!initialized,\n    supply: new BN(supply, 10, 'le')\n  };\n}\nexport function getOwnedAccountsFilters(publicKey) {\n  return [{\n    memcmp: {\n      offset: ACCOUNT_LAYOUT.offsetOf('owner'),\n      bytes: publicKey.toBase58()\n    }\n  }, {\n    dataSize: ACCOUNT_LAYOUT.span\n  }];\n}\nexport const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\nexport async function getOwnedTokenAccounts(connection, publicKey) {\n  let filters = getOwnedAccountsFilters(publicKey);\n  let resp = await connection.getProgramAccounts(TOKEN_PROGRAM_ID, {\n    filters\n  });\n  return resp.map(_ref => {\n    let {\n      pubkey,\n      account: {\n        data,\n        executable,\n        owner,\n        lamports\n      }\n    } = _ref;\n    return {\n      publicKey: new PublicKey(pubkey),\n      accountInfo: {\n        data,\n        executable,\n        owner: new PublicKey(owner),\n        lamports\n      }\n    };\n  });\n}\nexport async function getTokenAccountInfo(connection, ownerAddress) {\n  let [splAccounts, account] = await Promise.all([getOwnedTokenAccounts(connection, ownerAddress), connection.getAccountInfo(ownerAddress)]);\n  const parsedSplAccounts = splAccounts.map(_ref2 => {\n    let {\n      publicKey,\n      accountInfo\n    } = _ref2;\n    return {\n      pubkey: publicKey,\n      account: accountInfo,\n      effectiveMint: parseTokenAccountData(accountInfo.data).mint\n    };\n  });\n  return parsedSplAccounts.concat({\n    pubkey: ownerAddress,\n    account,\n    effectiveMint: WRAPPED_SOL_MINT\n  });\n} // todo: use this to map custom mints to custom tickers. Add functionality once custom markets store mints\n\nexport function useMintToTickers() {\n  _s();\n\n  const {\n    customMarkets\n  } = useCustomMarkets();\n  return useMemo(() => {\n    return Object.fromEntries(TOKEN_MINTS.map(mint => [mint.address.toBase58(), mint.name])); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [customMarkets.length]);\n}\n\n_s(useMintToTickers, \"OeNpYoskYh7yt6lO4BNpIuc9h/I=\", false, function () {\n  return [useCustomMarkets];\n});\n\nconst _VERY_SLOW_REFRESH_INTERVAL = 5000 * 1000; // todo: move this to using mints stored in static market infos once custom markets support that.\n\n\nexport function useMintInfos() {\n  _s2();\n\n  const connection = useConnection();\n  const [tokenAccounts] = useTokenAccounts();\n  const [allMarkets] = useAllMarkets();\n  const allMints = (tokenAccounts || []).map(account => account.effectiveMint).concat((allMarkets || []).map(marketInfo => marketInfo.market.baseMintAddress)).concat((allMarkets || []).map(marketInfo => marketInfo.market.quoteMintAddress));\n  const uniqueMints = [...new Set(allMints.map(mint => mint.toBase58()))].map(stringMint => new PublicKey(stringMint));\n\n  const getAllMintInfo = async () => {\n    const mintInfos = await getMultipleSolanaAccounts(connection, uniqueMints);\n    return Object.fromEntries(Object.entries(mintInfos.value).map(_ref3 => {\n      let [key, accountInfo] = _ref3;\n      return [key, accountInfo && parseTokenMintData(accountInfo.data)];\n    }));\n  };\n\n  return useAsyncData(getAllMintInfo, tuple('getAllMintInfo', connection, (tokenAccounts || []).length, (allMarkets || []).length), {\n    refreshInterval: _VERY_SLOW_REFRESH_INTERVAL\n  });\n}\n\n_s2(useMintInfos, \"B/3icfInu89mfT55fcrRsmKaIVc=\", false, function () {\n  return [useConnection, useTokenAccounts, useAllMarkets, useAsyncData];\n});","map":{"version":3,"sources":["/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/utils/tokens.tsx"],"names":["BufferLayout","PublicKey","WRAPPED_SOL_MINT","TOKEN_MINTS","useAllMarkets","useCustomMarkets","useTokenAccounts","getMultipleSolanaAccounts","useConnection","useAsyncData","tuple","BN","useMemo","ACCOUNT_LAYOUT","struct","blob","nu64","MINT_LAYOUT","u8","parseTokenAccountData","data","mint","owner","amount","decode","parseTokenMintData","decimals","initialized","supply","getOwnedAccountsFilters","publicKey","memcmp","offset","offsetOf","bytes","toBase58","dataSize","span","TOKEN_PROGRAM_ID","getOwnedTokenAccounts","connection","filters","resp","getProgramAccounts","map","pubkey","account","executable","lamports","accountInfo","getTokenAccountInfo","ownerAddress","splAccounts","Promise","all","getAccountInfo","parsedSplAccounts","effectiveMint","concat","useMintToTickers","customMarkets","Object","fromEntries","address","name","length","_VERY_SLOW_REFRESH_INTERVAL","useMintInfos","tokenAccounts","allMarkets","allMints","marketInfo","market","baseMintAddress","quoteMintAddress","uniqueMints","Set","stringMint","getAllMintInfo","mintInfos","entries","value","key","refreshInterval"],"mappings":";;;AAAA,OAAO,KAAKA,YAAZ,MAA8B,eAA9B;AACA,SAAiCC,SAAjC,QAAiD,iBAAjD;AACA,SAAQC,gBAAR,QAA+B,6CAA/B;AAEA,SAAQC,WAAR,QAA0B,sBAA1B;AACA,SAAQC,aAAR,EAAuBC,gBAAvB,EAAyCC,gBAAzC,QAAgE,WAAhE;AACA,SAAQC,yBAAR,QAAwC,QAAxC;AACA,SAAQC,aAAR,QAA4B,cAA5B;AACA,SAAQC,YAAR,QAA2B,cAA3B;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,EAAP,MAAe,OAAf;AACA,SAAQC,OAAR,QAAsB,OAAtB;AAEA,OAAO,MAAMC,cAAc,GAAGb,YAAY,CAACc,MAAb,CAAoB,CAChDd,YAAY,CAACe,IAAb,CAAkB,EAAlB,EAAsB,MAAtB,CADgD,EAEhDf,YAAY,CAACe,IAAb,CAAkB,EAAlB,EAAsB,OAAtB,CAFgD,EAGhDf,YAAY,CAACgB,IAAb,CAAkB,QAAlB,CAHgD,EAIhDhB,YAAY,CAACe,IAAb,CAAkB,EAAlB,CAJgD,CAApB,CAAvB;AAOP,OAAO,MAAME,WAAW,GAAGjB,YAAY,CAACc,MAAb,CAAoB,CAC7Cd,YAAY,CAACe,IAAb,CAAkB,EAAlB,CAD6C,EAE7Cf,YAAY,CAACe,IAAb,CAAkB,CAAlB,EAAqB,QAArB,CAF6C,EAG7Cf,YAAY,CAACkB,EAAb,CAAgB,UAAhB,CAH6C,EAI7ClB,YAAY,CAACkB,EAAb,CAAgB,aAAhB,CAJ6C,EAK7ClB,YAAY,CAACe,IAAb,CAAkB,EAAlB,CAL6C,CAApB,CAApB;AAQP,OAAO,SAASI,qBAAT,CACLC,IADK,EAEkD;AACvD,MAAI;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA0BV,cAAc,CAACW,MAAf,CAAsBJ,IAAtB,CAA9B;AACA,SAAO;AACLC,IAAAA,IAAI,EAAE,IAAIpB,SAAJ,CAAcoB,IAAd,CADD;AAELC,IAAAA,KAAK,EAAE,IAAIrB,SAAJ,CAAcqB,KAAd,CAFF;AAGLC,IAAAA;AAHK,GAAP;AAKD;AAQD,OAAO,SAASE,kBAAT,CAA4BL,IAA5B,EAA4C;AACjD,MAAI;AAAEM,IAAAA,QAAF;AAAYC,IAAAA,WAAZ;AAAyBC,IAAAA;AAAzB,MAAoCX,WAAW,CAACO,MAAZ,CAAmBJ,IAAnB,CAAxC;AACA,SAAO;AACLM,IAAAA,QADK;AAELC,IAAAA,WAAW,EAAE,CAAC,CAACA,WAFV;AAGLC,IAAAA,MAAM,EAAE,IAAIjB,EAAJ,CAAOiB,MAAP,EAAe,EAAf,EAAmB,IAAnB;AAHH,GAAP;AAKD;AAED,OAAO,SAASC,uBAAT,CAAiCC,SAAjC,EAAuD;AAC5D,SAAO,CACL;AACEC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAEnB,cAAc,CAACoB,QAAf,CAAwB,OAAxB,CADF;AAENC,MAAAA,KAAK,EAAEJ,SAAS,CAACK,QAAV;AAFD;AADV,GADK,EAOL;AACEC,IAAAA,QAAQ,EAAEvB,cAAc,CAACwB;AAD3B,GAPK,CAAP;AAWD;AAED,OAAO,MAAMC,gBAAgB,GAAG,IAAIrC,SAAJ,CAC9B,6CAD8B,CAAzB;AAIP,OAAO,eAAesC,qBAAf,CACLC,UADK,EAELV,SAFK,EAGuE;AAC5E,MAAIW,OAAO,GAAGZ,uBAAuB,CAACC,SAAD,CAArC;AACA,MAAIY,IAAI,GAAG,MAAMF,UAAU,CAACG,kBAAX,CACfL,gBADe,EAEf;AACEG,IAAAA;AADF,GAFe,CAAjB;AAMA,SAAOC,IAAI,CACRE,GADI,CACA;AAAA,QAAC;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,OAAO,EAAE;AAAE1B,QAAAA,IAAF;AAAQ2B,QAAAA,UAAR;AAAoBzB,QAAAA,KAApB;AAA2B0B,QAAAA;AAA3B;AAAnB,KAAD;AAAA,WAAiE;AACpElB,MAAAA,SAAS,EAAE,IAAI7B,SAAJ,CAAc4C,MAAd,CADyD;AAEpEI,MAAAA,WAAW,EAAE;AACX7B,QAAAA,IADW;AAEX2B,QAAAA,UAFW;AAGXzB,QAAAA,KAAK,EAAE,IAAIrB,SAAJ,CAAcqB,KAAd,CAHI;AAIX0B,QAAAA;AAJW;AAFuD,KAAjE;AAAA,GADA,CAAP;AAUD;AAED,OAAO,eAAeE,mBAAf,CACLV,UADK,EAELW,YAFK,EAGL;AACA,MAAI,CAACC,WAAD,EAAcN,OAAd,IAAyB,MAAMO,OAAO,CAACC,GAAR,CAAY,CAC7Cf,qBAAqB,CAACC,UAAD,EAAaW,YAAb,CADwB,EAE7CX,UAAU,CAACe,cAAX,CAA0BJ,YAA1B,CAF6C,CAAZ,CAAnC;AAIA,QAAMK,iBAAiC,GAAGJ,WAAW,CAACR,GAAZ,CACxC,SAAgC;AAAA,QAA/B;AAAEd,MAAAA,SAAF;AAAamB,MAAAA;AAAb,KAA+B;AAC9B,WAAO;AACLJ,MAAAA,MAAM,EAAEf,SADH;AAELgB,MAAAA,OAAO,EAAEG,WAFJ;AAGLQ,MAAAA,aAAa,EAAEtC,qBAAqB,CAAC8B,WAAW,CAAC7B,IAAb,CAArB,CAAwCC;AAHlD,KAAP;AAKD,GAPuC,CAA1C;AASA,SAAOmC,iBAAiB,CAACE,MAAlB,CAAyB;AAC9Bb,IAAAA,MAAM,EAAEM,YADsB;AAE9BL,IAAAA,OAF8B;AAG9BW,IAAAA,aAAa,EAAEvD;AAHe,GAAzB,CAAP;AAKD,C,CAED;;AACA,OAAO,SAASyD,gBAAT,GAAwD;AAAA;;AAC7D,QAAM;AAAEC,IAAAA;AAAF,MAAoBvD,gBAAgB,EAA1C;AACA,SAAOO,OAAO,CAAC,MAAM;AACnB,WAAOiD,MAAM,CAACC,WAAP,CACL3D,WAAW,CAACyC,GAAZ,CAAiBvB,IAAD,IAAU,CAACA,IAAI,CAAC0C,OAAL,CAAa5B,QAAb,EAAD,EAA0Bd,IAAI,CAAC2C,IAA/B,CAA1B,CADK,CAAP,CADmB,CAInB;AACD,GALa,EAKX,CAACJ,aAAa,CAACK,MAAf,CALW,CAAd;AAMD;;GAReN,gB;UACYtD,gB;;;AAS5B,MAAM6D,2BAA2B,GAAG,OAAO,IAA3C,C,CAEA;;;AACA,OAAO,SAASC,YAAT,GAYL;AAAA;;AACA,QAAM3B,UAAU,GAAGhC,aAAa,EAAhC;AACA,QAAM,CAAC4D,aAAD,IAAkB9D,gBAAgB,EAAxC;AACA,QAAM,CAAC+D,UAAD,IAAejE,aAAa,EAAlC;AAEA,QAAMkE,QAAQ,GAAG,CAACF,aAAa,IAAI,EAAlB,EACdxB,GADc,CACTE,OAAD,IAAaA,OAAO,CAACW,aADX,EAEdC,MAFc,CAGb,CAACW,UAAU,IAAI,EAAf,EAAmBzB,GAAnB,CAAwB2B,UAAD,IAAgBA,UAAU,CAACC,MAAX,CAAkBC,eAAzD,CAHa,EAKdf,MALc,CAMb,CAACW,UAAU,IAAI,EAAf,EAAmBzB,GAAnB,CACG2B,UAAD,IAAgBA,UAAU,CAACC,MAAX,CAAkBE,gBADpC,CANa,CAAjB;AAUA,QAAMC,WAAW,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQN,QAAQ,CAAC1B,GAAT,CAAcvB,IAAD,IAAUA,IAAI,CAACc,QAAL,EAAvB,CAAR,CAAJ,EAAsDS,GAAtD,CACjBiC,UAAD,IAAgB,IAAI5E,SAAJ,CAAc4E,UAAd,CADE,CAApB;;AAIA,QAAMC,cAAc,GAAG,YAAY;AACjC,UAAMC,SAAS,GAAG,MAAMxE,yBAAyB,CAACiC,UAAD,EAAamC,WAAb,CAAjD;AACA,WAAOd,MAAM,CAACC,WAAP,CACLD,MAAM,CAACmB,OAAP,CAAeD,SAAS,CAACE,KAAzB,EAAgCrC,GAAhC,CAAoC;AAAA,UAAC,CAACsC,GAAD,EAAMjC,WAAN,CAAD;AAAA,aAAwB,CAC1DiC,GAD0D,EAE1DjC,WAAW,IAAIxB,kBAAkB,CAACwB,WAAW,CAAC7B,IAAb,CAFyB,CAAxB;AAAA,KAApC,CADK,CAAP;AAMD,GARD;;AAUA,SAAOX,YAAY,CACjBqE,cADiB,EAEjBpE,KAAK,CACH,gBADG,EAEH8B,UAFG,EAGH,CAAC4B,aAAa,IAAI,EAAlB,EAAsBH,MAHnB,EAIH,CAACI,UAAU,IAAI,EAAf,EAAmBJ,MAJhB,CAFY,EAQjB;AAAEkB,IAAAA,eAAe,EAAEjB;AAAnB,GARiB,CAAnB;AAUD;;IAnDeC,Y;UAaK3D,a,EACKF,gB,EACHF,a,EA0BdK,Y","sourcesContent":["import * as BufferLayout from 'buffer-layout';\nimport {AccountInfo, Connection, PublicKey} from '@solana/web3.js';\nimport {WRAPPED_SOL_MINT} from '@project-serum/serum/lib/token-instructions';\nimport {TokenAccount} from './types';\nimport {TOKEN_MINTS} from '@project-serum/serum';\nimport {useAllMarkets, useCustomMarkets, useTokenAccounts} from './markets';\nimport {getMultipleSolanaAccounts} from './send';\nimport {useConnection} from './connection';\nimport {useAsyncData} from './fetch-loop';\nimport tuple from 'immutable-tuple';\nimport BN from 'bn.js';\nimport {useMemo} from 'react';\n\nexport const ACCOUNT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(32, 'mint'),\n  BufferLayout.blob(32, 'owner'),\n  BufferLayout.nu64('amount'),\n  BufferLayout.blob(93),\n]);\n\nexport const MINT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(36),\n  BufferLayout.blob(8, 'supply'),\n  BufferLayout.u8('decimals'),\n  BufferLayout.u8('initialized'),\n  BufferLayout.blob(36),\n]);\n\nexport function parseTokenAccountData(\n  data: Buffer,\n): { mint: PublicKey; owner: PublicKey; amount: number } {\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\n  return {\n    mint: new PublicKey(mint),\n    owner: new PublicKey(owner),\n    amount,\n  };\n}\n\nexport interface MintInfo {\n  decimals: number;\n  initialized: boolean;\n  supply: BN;\n}\n\nexport function parseTokenMintData(data): MintInfo {\n  let { decimals, initialized, supply } = MINT_LAYOUT.decode(data);\n  return {\n    decimals,\n    initialized: !!initialized,\n    supply: new BN(supply, 10, 'le'),\n  };\n}\n\nexport function getOwnedAccountsFilters(publicKey: PublicKey) {\n  return [\n    {\n      memcmp: {\n        offset: ACCOUNT_LAYOUT.offsetOf('owner'),\n        bytes: publicKey.toBase58(),\n      },\n    },\n    {\n      dataSize: ACCOUNT_LAYOUT.span,\n    },\n  ];\n}\n\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n  'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n);\n\nexport async function getOwnedTokenAccounts(\n  connection: Connection,\n  publicKey: PublicKey,\n): Promise<Array<{ publicKey: PublicKey; accountInfo: AccountInfo<Buffer> }>> {\n  let filters = getOwnedAccountsFilters(publicKey);\n  let resp = await connection.getProgramAccounts(\n    TOKEN_PROGRAM_ID,\n    {\n      filters,\n    },\n  );\n  return resp\n    .map(({ pubkey, account: { data, executable, owner, lamports } }) => ({\n      publicKey: new PublicKey(pubkey),\n      accountInfo: {\n        data,\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n      },\n    }))\n}\n\nexport async function getTokenAccountInfo(\n  connection: Connection,\n  ownerAddress: PublicKey,\n) {\n  let [splAccounts, account] = await Promise.all([\n    getOwnedTokenAccounts(connection, ownerAddress),\n    connection.getAccountInfo(ownerAddress),\n  ]);\n  const parsedSplAccounts: TokenAccount[] = splAccounts.map(\n    ({ publicKey, accountInfo }) => {\n      return {\n        pubkey: publicKey,\n        account: accountInfo,\n        effectiveMint: parseTokenAccountData(accountInfo.data).mint,\n      };\n    },\n  );\n  return parsedSplAccounts.concat({\n    pubkey: ownerAddress,\n    account,\n    effectiveMint: WRAPPED_SOL_MINT,\n  });\n}\n\n// todo: use this to map custom mints to custom tickers. Add functionality once custom markets store mints\nexport function useMintToTickers(): { [mint: string]: string } {\n  const { customMarkets } = useCustomMarkets();\n  return useMemo(() => {\n    return Object.fromEntries(\n      TOKEN_MINTS.map((mint) => [mint.address.toBase58(), mint.name]),\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [customMarkets.length]);\n}\n\nconst _VERY_SLOW_REFRESH_INTERVAL = 5000 * 1000;\n\n// todo: move this to using mints stored in static market infos once custom markets support that.\nexport function useMintInfos(): [\n  (\n    | {\n        [mintAddress: string]: {\n          decimals: number;\n          initialized: boolean;\n        } | null;\n      }\n    | null\n    | undefined\n  ),\n  boolean,\n] {\n  const connection = useConnection();\n  const [tokenAccounts] = useTokenAccounts();\n  const [allMarkets] = useAllMarkets();\n\n  const allMints = (tokenAccounts || [])\n    .map((account) => account.effectiveMint)\n    .concat(\n      (allMarkets || []).map((marketInfo) => marketInfo.market.baseMintAddress),\n    )\n    .concat(\n      (allMarkets || []).map(\n        (marketInfo) => marketInfo.market.quoteMintAddress,\n      ),\n    );\n  const uniqueMints = [...new Set(allMints.map((mint) => mint.toBase58()))].map(\n    (stringMint) => new PublicKey(stringMint),\n  );\n\n  const getAllMintInfo = async () => {\n    const mintInfos = await getMultipleSolanaAccounts(connection, uniqueMints);\n    return Object.fromEntries(\n      Object.entries(mintInfos.value).map(([key, accountInfo]) => [\n        key,\n        accountInfo && parseTokenMintData(accountInfo.data),\n      ]),\n    );\n  };\n\n  return useAsyncData(\n    getAllMintInfo,\n    tuple(\n      'getAllMintInfo',\n      connection,\n      (tokenAccounts || []).length,\n      (allMarkets || []).length,\n    ),\n    { refreshInterval: _VERY_SLOW_REFRESH_INTERVAL },\n  );\n}\n"]},"metadata":{},"sourceType":"module"}