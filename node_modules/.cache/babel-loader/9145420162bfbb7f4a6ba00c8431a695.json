{"ast":null,"code":"var _jsxFileName = \"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/components/ConvertForm.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Button, Col, Input, Row, Select, Typography } from 'antd';\nimport styled from 'styled-components';\nimport { Orderbook } from '@project-serum/serum';\nimport { getExpectedFillPrice, getMarketDetails, getMarketInfos, getMarketOrderPrice, getSelectedTokenAccountForMint, MarketProvider, useBalances, useCustomMarkets, useLocallyStoredFeeDiscountKey, useMarket, useTokenAccounts } from '../utils/markets';\nimport { notify } from '../utils/notifications';\nimport { useWallet } from '../utils/wallet';\nimport { useConnection, useSendConnection } from '../utils/connection';\nimport { placeOrder } from '../utils/send';\nimport { floorToDecimal, getDecimalCount } from '../utils/utils';\nimport FloatingElement from './layout/FloatingElement';\nimport WalletConnect from './WalletConnect';\nimport { SwapOutlined } from '@ant-design/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\nconst {\n  Title\n} = Typography;\nconst ActionButton = styled(Button)`\n  color: #2abdd2;\n  background-color: #212734;\n  border-width: 0px;\n`;\n_c = ActionButton;\nconst ConvertButton = styled(Button)`\n  background: #02bf76;\n  border-color: #02bf76;\n`;\n_c2 = ConvertButton;\nexport default function ConvertForm() {\n  _s();\n\n  const {\n    connected,\n    wallet\n  } = useWallet();\n  const {\n    customMarkets\n  } = useCustomMarkets();\n  const marketInfos = getMarketInfos(customMarkets);\n  const [marketAddress, setMarketAddress] = useState(null);\n  const [fromToken, setFromToken] = useState(undefined);\n  const [toToken, setToToken] = useState(undefined);\n  const [size, setSize] = useState(undefined);\n  const marketInfosbyName = Object.fromEntries(marketInfos.map(market => [market.name, market]));\n  const tokenConvertMap = new Map();\n  Object.keys(marketInfosbyName).forEach(market => {\n    let [base, quote] = market.split('/');\n    !tokenConvertMap.has(base) ? tokenConvertMap.set(base, new Set([quote])) : tokenConvertMap.set(base, new Set([...(tokenConvertMap.get(base) || []), quote]));\n    !tokenConvertMap.has(quote) ? tokenConvertMap.set(quote, new Set([base])) : tokenConvertMap.set(quote, new Set([...(tokenConvertMap.get(quote) || []), base]));\n  });\n\n  const setMarket = toToken => {\n    const marketInfo = marketInfos.filter(marketInfo => !marketInfo.deprecated).find(marketInfo => marketInfo.name === `${fromToken}/${toToken}` || marketInfo.name === `${toToken}/${fromToken}`);\n\n    if (!marketInfo) {\n      console.warn(`Could not find market info for market names ${fromToken}/${toToken} or ${toToken}/${fromToken}`);\n      notify({\n        message: 'Invalid market',\n        type: 'error'\n      });\n      return;\n    }\n\n    setMarketAddress(marketInfo.address.toBase58());\n    setToToken(toToken);\n  };\n\n  return /*#__PURE__*/_jsxDEV(FloatingElement, {\n    style: {\n      maxWidth: 500\n    },\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      level: 3,\n      children: \"Convert\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), !connected && /*#__PURE__*/_jsxDEV(Row, {\n      justify: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(WalletConnect, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this), tokenConvertMap && connected && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        style: {\n          marginBottom: 8\n        },\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            style: {\n              minWidth: 300\n            },\n            placeholder: \"Select a token\",\n            value: fromToken,\n            onChange: token => {\n              setFromToken(token);\n              setToToken(undefined);\n            },\n            children: Array.from(tokenConvertMap.keys()).map(token => /*#__PURE__*/_jsxDEV(Option, {\n              value: token,\n              children: token\n            }, token, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), fromToken && /*#__PURE__*/_jsxDEV(Row, {\n        style: {\n          marginBottom: 8\n        },\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            style: {\n              minWidth: 300\n            },\n            value: toToken,\n            onChange: setMarket,\n            children: [...(tokenConvertMap.get(fromToken) || [])].map(token => /*#__PURE__*/_jsxDEV(Option, {\n              value: token,\n              children: token\n            }, token, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this), fromToken && toToken && /*#__PURE__*/_jsxDEV(MarketProvider, {\n        marketAddress: marketAddress,\n        setMarketAddress: setMarketAddress,\n        children: /*#__PURE__*/_jsxDEV(ConvertFormSubmit, {\n          size: size,\n          setSize: setSize,\n          fromToken: fromToken,\n          toToken: toToken,\n          wallet: wallet,\n          customMarkets: customMarkets\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ConvertForm, \"u2qe6XkMypYjzVYPULNZPCxtGtw=\", false, function () {\n  return [useWallet, useCustomMarkets];\n});\n\n_c3 = ConvertForm;\n\nfunction ConvertFormSubmit(_ref) {\n  _s2();\n\n  let {\n    size,\n    setSize,\n    fromToken,\n    toToken,\n    wallet,\n    customMarkets\n  } = _ref;\n  const {\n    market\n  } = useMarket();\n  const [accounts] = useTokenAccounts();\n  const balances = useBalances();\n  const [fromAmount, setFromAmount] = useState();\n  const [toAmount, setToAmount] = useState();\n  const {\n    storedFeeDiscountKey: feeDiscountKey\n  } = useLocallyStoredFeeDiscountKey();\n  const connection = useConnection();\n  const sendConnection = useSendConnection();\n  const [isConverting, setIsConverting] = useState(false);\n\n  const isFromTokenBaseOfMarket = market => {\n    const {\n      marketName\n    } = getMarketDetails(market, customMarkets);\n\n    if (!marketName) {\n      throw Error('Cannot determine if coin is quote or base because marketName is missing');\n    }\n\n    const [base] = marketName.split('/');\n    return fromToken === base;\n  };\n\n  const onConvert = async () => {\n    if (!market) {\n      console.warn('Market is null when attempting convert.');\n      notify({\n        message: 'Invalid market',\n        type: 'error'\n      });\n      return;\n    } // get accounts\n\n\n    const baseCurrencyAccount = getSelectedTokenAccountForMint(accounts, market === null || market === void 0 ? void 0 : market.baseMintAddress);\n    const quoteCurrencyAccount = getSelectedTokenAccountForMint(accounts, market === null || market === void 0 ? void 0 : market.quoteMintAddress); // get approximate price\n\n    let side;\n\n    try {\n      side = isFromTokenBaseOfMarket(market) ? 'sell' : 'buy';\n    } catch (e) {\n      console.warn(e);\n      notify({\n        message: 'Error placing order',\n        description: e.message,\n        type: 'error'\n      });\n      return;\n    }\n\n    const sidedOrderbookAccount = // @ts-ignore\n    side === 'buy' ? market._decoded.asks : market._decoded.bids;\n    const orderbookData = await connection.getAccountInfo(sidedOrderbookAccount);\n\n    if (!(orderbookData === null || orderbookData === void 0 ? void 0 : orderbookData.data)) {\n      notify({\n        message: 'Invalid orderbook data',\n        type: 'error'\n      });\n      return;\n    }\n\n    const decodedOrderbookData = Orderbook.decode(market, orderbookData.data);\n    const [bbo] = decodedOrderbookData && decodedOrderbookData.getL2(1).map(_ref2 => {\n      let [price] = _ref2;\n      return price;\n    });\n\n    if (!bbo) {\n      notify({\n        message: 'No best price found',\n        type: 'error'\n      });\n      return;\n    }\n\n    if (!size) {\n      notify({\n        message: 'Size not specified',\n        type: 'error'\n      });\n      return;\n    }\n\n    const tickSizeDecimals = getDecimalCount(market.tickSize);\n    const parsedPrice = getMarketOrderPrice(decodedOrderbookData, size, tickSizeDecimals); // round size\n\n    const sizeDecimalCount = getDecimalCount(market.minOrderSize);\n    const nativeSize = side === 'sell' ? size : size / parsedPrice;\n    const parsedSize = floorToDecimal(nativeSize, sizeDecimalCount);\n    setIsConverting(true);\n\n    try {\n      if (!wallet) {\n        return null;\n      }\n\n      await placeOrder({\n        side,\n        price: parsedPrice,\n        size: parsedSize,\n        orderType: 'ioc',\n        market,\n        connection: sendConnection,\n        wallet,\n        baseCurrencyAccount: baseCurrencyAccount === null || baseCurrencyAccount === void 0 ? void 0 : baseCurrencyAccount.pubkey,\n        quoteCurrencyAccount: quoteCurrencyAccount === null || quoteCurrencyAccount === void 0 ? void 0 : quoteCurrencyAccount.pubkey,\n        feeDiscountPubkey: feeDiscountKey\n      });\n    } catch (e) {\n      console.warn(e);\n      notify({\n        message: 'Error placing order',\n        description: e.message,\n        type: 'error'\n      });\n    } finally {\n      setIsConverting(false);\n    }\n  };\n\n  const getPrice = async () => {\n    try {\n      const side = isFromTokenBaseOfMarket(market) ? 'sell' : 'buy';\n      const sidedOrderbookAccount = // @ts-ignore\n      side === 'buy' ? market._decoded.asks : market._decoded.bids;\n      const orderbookData = await connection.getAccountInfo(sidedOrderbookAccount);\n\n      if (!(orderbookData === null || orderbookData === void 0 ? void 0 : orderbookData.data) || !market) {\n        return [null, null];\n      }\n\n      const decodedOrderbookData = Orderbook.decode(market, orderbookData.data);\n      const [bbo] = decodedOrderbookData && decodedOrderbookData.getL2(1).map(_ref3 => {\n        let [price] = _ref3;\n        return price;\n      });\n\n      if (!bbo || !size) {\n        return [null, null];\n      }\n\n      const tickSizeDecimals = getDecimalCount(market.tickSize);\n      const expectedPrice = getExpectedFillPrice(decodedOrderbookData, size, tickSizeDecimals);\n\n      if (side === 'buy') {\n        return [expectedPrice.toFixed(6), 1];\n      } else {\n        return [1, expectedPrice.toFixed(6)];\n      }\n    } catch (e) {\n      console.log(`Got error ${e}`);\n      return [null, null];\n    }\n  };\n\n  useEffect(() => {\n    getPrice().then(_ref4 => {\n      let [fromAmount, toAmount] = _ref4;\n      setFromAmount(fromAmount || undefined);\n      setToAmount(toAmount || undefined);\n    });\n  }, // eslint-disable-next-line\n  [market === null || market === void 0 ? void 0 : market.address.toBase58(), size]);\n  const canConvert = market && size && size > 0;\n  const balance = balances.find(coinBalance => coinBalance.coin === fromToken);\n  const availableBalance = (((balance === null || balance === void 0 ? void 0 : balance.unsettled) || 0) + ((balance === null || balance === void 0 ? void 0 : balance.wallet) || 0)) * 0.99;\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      style: {\n        marginBottom: 8\n      },\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          style: {\n            minWidth: 300\n          },\n          addonBefore: `Size (${fromToken})`,\n          placeholder: \"Size\",\n          value: size === null ? undefined : size,\n          type: \"number\",\n          onChange: e => setSize(parseFloat(e.target.value) || undefined)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      gutter: 12,\n      style: {\n        marginBottom: 8\n      },\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        span: 12,\n        children: /*#__PURE__*/_jsxDEV(ActionButton, {\n          block: true,\n          size: \"large\",\n          onClick: () => setSize(floorToDecimal(availableBalance, 4)),\n          children: [\"Max: \", availableBalance.toFixed(4)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        span: 12,\n        children: /*#__PURE__*/_jsxDEV(ConvertButton, {\n          block: true,\n          type: \"primary\",\n          size: \"large\",\n          loading: isConverting,\n          onClick: onConvert,\n          disabled: !canConvert,\n          children: \"Convert\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 7\n    }, this), canConvert && /*#__PURE__*/_jsxDEV(Row, {\n      align: \"middle\",\n      justify: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        children: [fromAmount, \" \", fromToken]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        offset: 1,\n        children: /*#__PURE__*/_jsxDEV(SwapOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        offset: 1,\n        children: [toAmount, \" \", toToken]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 358,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConvertFormSubmit, \"gG0hYlUzurNmgBJ2j+dk31tMQ18=\", false, function () {\n  return [useMarket, useTokenAccounts, useBalances, useLocallyStoredFeeDiscountKey, useConnection, useSendConnection];\n});\n\n_c4 = ConvertFormSubmit;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ActionButton\");\n$RefreshReg$(_c2, \"ConvertButton\");\n$RefreshReg$(_c3, \"ConvertForm\");\n$RefreshReg$(_c4, \"ConvertFormSubmit\");","map":{"version":3,"sources":["/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/components/ConvertForm.tsx"],"names":["React","useEffect","useState","Button","Col","Input","Row","Select","Typography","styled","Orderbook","getExpectedFillPrice","getMarketDetails","getMarketInfos","getMarketOrderPrice","getSelectedTokenAccountForMint","MarketProvider","useBalances","useCustomMarkets","useLocallyStoredFeeDiscountKey","useMarket","useTokenAccounts","notify","useWallet","useConnection","useSendConnection","placeOrder","floorToDecimal","getDecimalCount","FloatingElement","WalletConnect","SwapOutlined","Option","Title","ActionButton","ConvertButton","ConvertForm","connected","wallet","customMarkets","marketInfos","marketAddress","setMarketAddress","fromToken","setFromToken","undefined","toToken","setToToken","size","setSize","marketInfosbyName","Object","fromEntries","map","market","name","tokenConvertMap","Map","keys","forEach","base","quote","split","has","set","Set","get","setMarket","marketInfo","filter","deprecated","find","console","warn","message","type","address","toBase58","maxWidth","marginBottom","minWidth","token","Array","from","ConvertFormSubmit","accounts","balances","fromAmount","setFromAmount","toAmount","setToAmount","storedFeeDiscountKey","feeDiscountKey","connection","sendConnection","isConverting","setIsConverting","isFromTokenBaseOfMarket","marketName","Error","onConvert","baseCurrencyAccount","baseMintAddress","quoteCurrencyAccount","quoteMintAddress","side","e","description","sidedOrderbookAccount","_decoded","asks","bids","orderbookData","getAccountInfo","data","decodedOrderbookData","decode","bbo","getL2","price","tickSizeDecimals","tickSize","parsedPrice","sizeDecimalCount","minOrderSize","nativeSize","parsedSize","orderType","pubkey","feeDiscountPubkey","getPrice","expectedPrice","toFixed","log","then","canConvert","balance","coinBalance","coin","availableBalance","unsettled","parseFloat","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, Col, Input, Row, Select, Typography } from 'antd';\nimport styled from 'styled-components';\nimport { Orderbook } from '@project-serum/serum';\nimport {\n  getExpectedFillPrice,\n  getMarketDetails,\n  getMarketInfos,\n  getMarketOrderPrice,\n  getSelectedTokenAccountForMint,\n  MarketProvider,\n  useBalances,\n  useCustomMarkets,\n  useLocallyStoredFeeDiscountKey,\n  useMarket,\n  useTokenAccounts,\n} from '../utils/markets';\nimport { notify } from '../utils/notifications';\nimport { useWallet } from '../utils/wallet';\nimport { useConnection, useSendConnection } from '../utils/connection';\nimport { placeOrder } from '../utils/send';\nimport { floorToDecimal, getDecimalCount } from '../utils/utils';\nimport FloatingElement from './layout/FloatingElement';\nimport WalletConnect from './WalletConnect';\nimport { SwapOutlined } from '@ant-design/icons';\nimport { CustomMarketInfo } from '../utils/types';\nimport { WalletAdapter } from '../wallet-adapters';\n\nconst { Option } = Select;\nconst { Title } = Typography;\n\nconst ActionButton = styled(Button)`\n  color: #2abdd2;\n  background-color: #212734;\n  border-width: 0px;\n`;\n\nconst ConvertButton = styled(Button)`\n  background: #02bf76;\n  border-color: #02bf76;\n`;\n\nexport default function ConvertForm() {\n  const { connected, wallet } = useWallet();\n  const { customMarkets } = useCustomMarkets();\n  const marketInfos = getMarketInfos(customMarkets);\n  const [marketAddress, setMarketAddress] = useState<string | null>(null);\n\n  const [fromToken, setFromToken] = useState<string | undefined>(undefined);\n  const [toToken, setToToken] = useState<string | undefined>(undefined);\n  const [size, setSize] = useState<number | undefined>(undefined);\n\n  const marketInfosbyName = Object.fromEntries(\n    marketInfos.map((market) => [market.name, market]),\n  );\n\n  const tokenConvertMap: Map<string, Set<string>> = new Map();\n  Object.keys(marketInfosbyName).forEach((market) => {\n    let [base, quote] = market.split('/');\n    !tokenConvertMap.has(base)\n      ? tokenConvertMap.set(base, new Set([quote]))\n      : tokenConvertMap.set(\n          base,\n          new Set([...(tokenConvertMap.get(base) || []), quote]),\n        );\n    !tokenConvertMap.has(quote)\n      ? tokenConvertMap.set(quote, new Set([base]))\n      : tokenConvertMap.set(\n          quote,\n          new Set([...(tokenConvertMap.get(quote) || []), base]),\n        );\n  });\n\n  const setMarket = (toToken) => {\n    const marketInfo = marketInfos\n      .filter((marketInfo) => !marketInfo.deprecated)\n      .find(\n        (marketInfo) =>\n          marketInfo.name === `${fromToken}/${toToken}` ||\n          marketInfo.name === `${toToken}/${fromToken}`,\n      );\n    if (!marketInfo) {\n      console.warn(\n        `Could not find market info for market names ${fromToken}/${toToken} or ${toToken}/${fromToken}`,\n      );\n      notify({\n        message: 'Invalid market',\n        type: 'error',\n      });\n      return;\n    }\n    setMarketAddress(marketInfo.address.toBase58());\n    setToToken(toToken);\n  };\n\n  return (\n    <FloatingElement style={{ maxWidth: 500 }}>\n      <Title level={3}>Convert</Title>\n      {!connected && (\n        <Row justify=\"center\">\n          <Col>\n            <WalletConnect />\n          </Col>\n        </Row>\n      )}\n      {tokenConvertMap && connected && (\n        <>\n          <Row style={{ marginBottom: 8 }}>\n            <Col>\n              <Select\n                style={{ minWidth: 300 }}\n                placeholder=\"Select a token\"\n                value={fromToken}\n                onChange={(token) => {\n                  setFromToken(token);\n                  setToToken(undefined);\n                }}\n              >\n                {Array.from(tokenConvertMap.keys()).map((token) => (\n                  <Option value={token} key={token}>\n                    {token}\n                  </Option>\n                ))}\n              </Select>\n            </Col>\n          </Row>\n          {fromToken && (\n            <Row style={{ marginBottom: 8 }}>\n              <Col>\n                <Select\n                  style={{ minWidth: 300 }}\n                  value={toToken}\n                  onChange={setMarket}\n                >\n                  {[...(tokenConvertMap.get(fromToken) || [])].map((token) => (\n                    <Option value={token} key={token}>\n                      {token}\n                    </Option>\n                  ))}\n                </Select>\n              </Col>\n            </Row>\n          )}\n          {fromToken && toToken && (\n            <MarketProvider\n              marketAddress={marketAddress}\n              setMarketAddress={setMarketAddress}\n            >\n              <ConvertFormSubmit\n                size={size}\n                setSize={setSize}\n                fromToken={fromToken}\n                toToken={toToken}\n                wallet={wallet}\n                customMarkets={customMarkets}\n              />\n            </MarketProvider>\n          )}\n        </>\n      )}\n    </FloatingElement>\n  );\n}\n\nfunction ConvertFormSubmit({\n  size,\n  setSize,\n  fromToken,\n  toToken,\n  wallet,\n  customMarkets,\n}: {\n  size: number | null | undefined;\n  setSize: (newSize: number | undefined) => void;\n  fromToken: string;\n  toToken: string;\n  wallet?: WalletAdapter;\n  customMarkets: CustomMarketInfo[];\n}) {\n  const { market } = useMarket();\n  const [accounts] = useTokenAccounts();\n  const balances = useBalances();\n  const [fromAmount, setFromAmount] = useState<number | undefined>();\n  const [toAmount, setToAmount] = useState<number | undefined>();\n  const {\n    storedFeeDiscountKey: feeDiscountKey,\n  } = useLocallyStoredFeeDiscountKey();\n\n  const connection = useConnection();\n  const sendConnection = useSendConnection();\n\n  const [isConverting, setIsConverting] = useState(false);\n\n  const isFromTokenBaseOfMarket = (market) => {\n    const { marketName } = getMarketDetails(market, customMarkets);\n    if (!marketName) {\n      throw Error(\n        'Cannot determine if coin is quote or base because marketName is missing',\n      );\n    }\n    const [base] = marketName.split('/');\n    return fromToken === base;\n  };\n\n  const onConvert = async () => {\n    if (!market) {\n      console.warn('Market is null when attempting convert.');\n      notify({\n        message: 'Invalid market',\n        type: 'error',\n      });\n      return;\n    }\n    // get accounts\n    const baseCurrencyAccount = getSelectedTokenAccountForMint(\n      accounts,\n      market?.baseMintAddress,\n    );\n    const quoteCurrencyAccount = getSelectedTokenAccountForMint(\n      accounts,\n      market?.quoteMintAddress,\n    );\n\n    // get approximate price\n    let side;\n    try {\n      side = isFromTokenBaseOfMarket(market) ? 'sell' : 'buy';\n    } catch (e) {\n      console.warn(e);\n      notify({\n        message: 'Error placing order',\n        description: e.message,\n        type: 'error',\n      });\n      return;\n    }\n\n    const sidedOrderbookAccount =\n      // @ts-ignore\n      side === 'buy' ? market._decoded.asks : market._decoded.bids;\n    const orderbookData = await connection.getAccountInfo(\n      sidedOrderbookAccount,\n    );\n    if (!orderbookData?.data) {\n      notify({ message: 'Invalid orderbook data', type: 'error' });\n      return;\n    }\n    const decodedOrderbookData = Orderbook.decode(market, orderbookData.data);\n    const [bbo] =\n      decodedOrderbookData &&\n      decodedOrderbookData.getL2(1).map(([price]) => price);\n    if (!bbo) {\n      notify({ message: 'No best price found', type: 'error' });\n      return;\n    }\n    if (!size) {\n      notify({ message: 'Size not specified', type: 'error' });\n      return;\n    }\n\n    const tickSizeDecimals = getDecimalCount(market.tickSize);\n    const parsedPrice = getMarketOrderPrice(\n      decodedOrderbookData,\n      size,\n      tickSizeDecimals,\n    );\n\n    // round size\n    const sizeDecimalCount = getDecimalCount(market.minOrderSize);\n    const nativeSize = side === 'sell' ? size : size / parsedPrice;\n    const parsedSize = floorToDecimal(nativeSize, sizeDecimalCount);\n\n    setIsConverting(true);\n    try {\n      if (!wallet) {\n        return null;\n      }\n\n      await placeOrder({\n        side,\n        price: parsedPrice,\n        size: parsedSize,\n        orderType: 'ioc',\n        market,\n        connection: sendConnection,\n        wallet,\n        baseCurrencyAccount: baseCurrencyAccount?.pubkey,\n        quoteCurrencyAccount: quoteCurrencyAccount?.pubkey,\n        feeDiscountPubkey: feeDiscountKey,\n      });\n    } catch (e) {\n      console.warn(e);\n      notify({\n        message: 'Error placing order',\n        description: e.message,\n        type: 'error',\n      });\n    } finally {\n      setIsConverting(false);\n    }\n  };\n\n  const getPrice = async () => {\n    try {\n      const side = isFromTokenBaseOfMarket(market) ? 'sell' : 'buy';\n      const sidedOrderbookAccount =\n        // @ts-ignore\n        side === 'buy' ? market._decoded.asks : market._decoded.bids;\n      const orderbookData = await connection.getAccountInfo(\n        sidedOrderbookAccount,\n      );\n      if (!orderbookData?.data || !market) {\n        return [null, null];\n      }\n      const decodedOrderbookData = Orderbook.decode(market, orderbookData.data);\n      const [bbo] =\n        decodedOrderbookData &&\n        decodedOrderbookData.getL2(1).map(([price]) => price);\n      if (!bbo || !size) {\n        return [null, null];\n      }\n      const tickSizeDecimals = getDecimalCount(market.tickSize);\n      const expectedPrice = getExpectedFillPrice(\n        decodedOrderbookData,\n        size,\n        tickSizeDecimals,\n      );\n      if (side === 'buy') {\n        return [expectedPrice.toFixed(6), 1];\n      } else {\n        return [1, expectedPrice.toFixed(6)];\n      }\n    } catch (e) {\n      console.log(`Got error ${e}`);\n      return [null, null];\n    }\n  };\n\n  useEffect(\n    () => {\n      getPrice().then(([fromAmount, toAmount]) => {\n        setFromAmount(fromAmount || undefined);\n        setToAmount(toAmount || undefined);\n      });\n    },\n    // eslint-disable-next-line\n    [market?.address.toBase58(), size],\n  );\n\n  const canConvert = market && size && size > 0;\n  const balance = balances.find(\n    (coinBalance) => coinBalance.coin === fromToken,\n  );\n  const availableBalance =\n    ((balance?.unsettled || 0) + (balance?.wallet || 0)) * 0.99;\n\n  return (\n    <React.Fragment>\n      <Row style={{ marginBottom: 8 }}>\n        <Col>\n          <Input\n            style={{ minWidth: 300 }}\n            addonBefore={`Size (${fromToken})`}\n            placeholder=\"Size\"\n            value={size === null ? undefined : size}\n            type=\"number\"\n            onChange={(e) => setSize(parseFloat(e.target.value) || undefined)}\n          />\n        </Col>\n      </Row>\n      <Row gutter={12} style={{ marginBottom: 8 }}>\n        <Col span={12}>\n          <ActionButton\n            block\n            size=\"large\"\n            onClick={() => setSize(floorToDecimal(availableBalance, 4))}\n          >\n            Max: {availableBalance.toFixed(4)}\n          </ActionButton>\n        </Col>\n        <Col span={12}>\n          <ConvertButton\n            block\n            type=\"primary\"\n            size=\"large\"\n            loading={isConverting}\n            onClick={onConvert}\n            disabled={!canConvert}\n          >\n            Convert\n          </ConvertButton>\n        </Col>\n      </Row>\n      {canConvert && (\n        <Row align=\"middle\" justify=\"center\">\n          <Col>\n            {fromAmount} {fromToken}\n          </Col>\n          <Col offset={1}>\n            <SwapOutlined />\n          </Col>\n          <Col offset={1}>\n            {toAmount} {toToken}\n          </Col>\n        </Row>\n      )}\n    </React.Fragment>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}