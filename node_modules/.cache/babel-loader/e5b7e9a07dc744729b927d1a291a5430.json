{"ast":null,"code":"var _jsxFileName = \"/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/components/TradeForm.tsx\";\nimport { Button, Input, Radio, Slider, Switch } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useFeeDiscountKeys, useLocallyStoredFeeDiscountKey, useMarket, useMarkPrice, useSelectedBaseCurrencyAccount, useSelectedBaseCurrencyBalances, useSelectedOpenOrdersAccount, useSelectedQuoteCurrencyAccount, useSelectedQuoteCurrencyBalances } from '../utils/markets';\nimport { useWallet } from '../utils/wallet';\nimport { notify } from '../utils/notifications';\nimport { floorToDecimal, getDecimalCount, roundToDecimal } from '../utils/utils';\nimport { useSendConnection } from '../utils/connection';\nimport FloatingElement from './layout/FloatingElement';\nimport { getUnixTs, placeOrder } from '../utils/send';\nimport { refreshCache } from '../utils/fetch-loop';\nimport tuple from 'immutable-tuple';\nconst SellButton = styled(Button)`\n  margin: 20px 0px 0px 0px;\n  background: #f23b69;\n  border-color: #f23b69;\n`;\nconst BuyButton = styled(Button)`\n  margin: 20px 0px 0px 0px;\n  background: #02bf76;\n  border-color: #02bf76;\n`;\nconst sliderMarks = {\n  0: '0%',\n  25: '25%',\n  50: '50%',\n  75: '75%',\n  100: '100%'\n};\nexport default function TradeForm({\n  style,\n  setChangeOrderRef\n}) {\n  const [side, setSide] = useState('buy');\n  const {\n    baseCurrency,\n    quoteCurrency,\n    market\n  } = useMarket();\n  const baseCurrencyBalances = useSelectedBaseCurrencyBalances();\n  const quoteCurrencyBalances = useSelectedQuoteCurrencyBalances();\n  const baseCurrencyAccount = useSelectedBaseCurrencyAccount();\n  const quoteCurrencyAccount = useSelectedQuoteCurrencyAccount();\n  const openOrdersAccount = useSelectedOpenOrdersAccount(true);\n  const {\n    wallet,\n    connected\n  } = useWallet();\n  const sendConnection = useSendConnection();\n  const markPrice = useMarkPrice();\n  useFeeDiscountKeys();\n  const {\n    storedFeeDiscountKey: feeDiscountKey\n  } = useLocallyStoredFeeDiscountKey();\n  const [postOnly, setPostOnly] = useState(false);\n  const [ioc, setIoc] = useState(false);\n  const [baseSize, setBaseSize] = useState(undefined);\n  const [quoteSize, setQuoteSize] = useState(undefined);\n  const [price, setPrice] = useState(undefined);\n  const [submitting, setSubmitting] = useState(false);\n  const [sizeFraction, setSizeFraction] = useState(0);\n  const availableQuote = openOrdersAccount && market ? market.quoteSplSizeToNumber(openOrdersAccount.quoteTokenFree) : 0;\n  let quoteBalance = (quoteCurrencyBalances || 0) + (availableQuote || 0);\n  let baseBalance = baseCurrencyBalances || 0;\n  let sizeDecimalCount = (market === null || market === void 0 ? void 0 : market.minOrderSize) && getDecimalCount(market.minOrderSize);\n  let priceDecimalCount = (market === null || market === void 0 ? void 0 : market.tickSize) && getDecimalCount(market.tickSize);\n  const publicKey = wallet === null || wallet === void 0 ? void 0 : wallet.publicKey;\n  useEffect(() => {\n    setChangeOrderRef && setChangeOrderRef(doChangeOrder); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setChangeOrderRef]);\n  useEffect(() => {\n    baseSize && price && onSliderChange(sizeFraction); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [side]);\n  useEffect(() => {\n    updateSizeFraction(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [price, baseSize]);\n  useEffect(() => {\n    const warmUpCache = async () => {\n      try {\n        if (!wallet || !publicKey || !market) {\n          console.log(`Skipping refreshing accounts`);\n          return;\n        }\n\n        const startTime = getUnixTs();\n        console.log(`Refreshing accounts for ${market.address}`);\n        await (market === null || market === void 0 ? void 0 : market.findOpenOrdersAccountsForOwner(sendConnection, publicKey));\n        await (market === null || market === void 0 ? void 0 : market.findBestFeeDiscountKey(sendConnection, publicKey));\n        const endTime = getUnixTs();\n        console.log(`Finished refreshing accounts for ${market.address} after ${endTime - startTime}`);\n      } catch (e) {\n        console.log(`Encountered error when refreshing trading accounts: ${e}`);\n      }\n    };\n\n    warmUpCache();\n    const id = setInterval(warmUpCache, 30000);\n    return () => clearInterval(id);\n  }, [market, sendConnection, wallet, publicKey]);\n\n  const onSetBaseSize = baseSize => {\n    setBaseSize(baseSize);\n\n    if (!baseSize) {\n      setQuoteSize(undefined);\n      return;\n    }\n\n    let usePrice = price || markPrice;\n\n    if (!usePrice) {\n      setQuoteSize(undefined);\n      return;\n    }\n\n    const rawQuoteSize = baseSize * usePrice;\n    const quoteSize = baseSize && roundToDecimal(rawQuoteSize, sizeDecimalCount);\n    setQuoteSize(quoteSize);\n  };\n\n  const onSetQuoteSize = quoteSize => {\n    setQuoteSize(quoteSize);\n\n    if (!quoteSize) {\n      setBaseSize(undefined);\n      return;\n    }\n\n    let usePrice = price || markPrice;\n\n    if (!usePrice) {\n      setBaseSize(undefined);\n      return;\n    }\n\n    const rawBaseSize = quoteSize / usePrice;\n    const baseSize = quoteSize && roundToDecimal(rawBaseSize, sizeDecimalCount);\n    setBaseSize(baseSize);\n  };\n\n  const doChangeOrder = ({\n    size,\n    price\n  }) => {\n    const formattedSize = size && roundToDecimal(size, sizeDecimalCount);\n    const formattedPrice = price && roundToDecimal(price, priceDecimalCount);\n    formattedSize && onSetBaseSize(formattedSize);\n    formattedPrice && setPrice(formattedPrice);\n  };\n\n  const updateSizeFraction = () => {\n    const rawMaxSize = side === 'buy' ? quoteBalance / (price || markPrice || 1) : baseBalance;\n    const maxSize = floorToDecimal(rawMaxSize, sizeDecimalCount);\n    const sizeFraction = Math.min((baseSize || 0) / maxSize * 100, 100);\n    setSizeFraction(sizeFraction);\n  };\n\n  const onSliderChange = value => {\n    if (!price && markPrice) {\n      let formattedMarkPrice = priceDecimalCount ? markPrice.toFixed(priceDecimalCount) : markPrice;\n      setPrice(typeof formattedMarkPrice === 'number' ? formattedMarkPrice : parseFloat(formattedMarkPrice));\n    }\n\n    let newSize;\n\n    if (side === 'buy') {\n      if (price || markPrice) {\n        newSize = quoteBalance / (price || markPrice || 1) * value / 100;\n      }\n    } else {\n      newSize = baseBalance * value / 100;\n    } // round down to minOrderSize increment\n\n\n    let formatted = floorToDecimal(newSize, sizeDecimalCount);\n    onSetBaseSize(formatted);\n  };\n\n  const postOnChange = checked => {\n    if (checked) {\n      setIoc(false);\n    }\n\n    setPostOnly(checked);\n  };\n\n  const iocOnChange = checked => {\n    if (checked) {\n      setPostOnly(false);\n    }\n\n    setIoc(checked);\n  };\n\n  async function onSubmit() {\n    if (!price) {\n      console.warn('Missing price');\n      notify({\n        message: 'Missing price',\n        type: 'error'\n      });\n      return;\n    } else if (!baseSize) {\n      console.warn('Missing size');\n      notify({\n        message: 'Missing size',\n        type: 'error'\n      });\n      return;\n    }\n\n    setSubmitting(true);\n\n    try {\n      if (!wallet) {\n        return null;\n      }\n\n      await placeOrder({\n        side,\n        price,\n        size: baseSize,\n        orderType: ioc ? 'ioc' : postOnly ? 'postOnly' : 'limit',\n        market,\n        connection: sendConnection,\n        wallet,\n        baseCurrencyAccount: baseCurrencyAccount === null || baseCurrencyAccount === void 0 ? void 0 : baseCurrencyAccount.pubkey,\n        quoteCurrencyAccount: quoteCurrencyAccount === null || quoteCurrencyAccount === void 0 ? void 0 : quoteCurrencyAccount.pubkey,\n        feeDiscountPubkey: feeDiscountKey\n      });\n      refreshCache(tuple('getTokenAccounts', wallet, connected));\n      setPrice(undefined);\n      onSetBaseSize(undefined);\n    } catch (e) {\n      console.warn(e);\n      notify({\n        message: 'Error placing order',\n        description: e.message,\n        type: 'error'\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(FloatingElement, {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      ...style\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Radio.Group, {\n    onChange: e => setSide(e.target.value),\n    value: side,\n    buttonStyle: \"solid\",\n    style: {\n      marginBottom: 8,\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Radio.Button, {\n    value: \"buy\",\n    style: {\n      width: '50%',\n      textAlign: 'center',\n      background: side === 'buy' ? '#02bf76' : '',\n      borderColor: side === 'buy' ? '#02bf76' : ''\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 11\n    }\n  }, \"BUY\"), /*#__PURE__*/React.createElement(Radio.Button, {\n    value: \"sell\",\n    style: {\n      width: '50%',\n      textAlign: 'center',\n      background: side === 'sell' ? '#F23B69' : '',\n      borderColor: side === 'sell' ? '#F23B69' : ''\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 11\n    }\n  }, \"SELL\")), /*#__PURE__*/React.createElement(Input, {\n    style: {\n      textAlign: 'right',\n      paddingBottom: 8\n    },\n    addonBefore: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '30px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 24\n      }\n    }, \"Price\"),\n    suffix: /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontSize: 10,\n        opacity: 0.5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 13\n      }\n    }, quoteCurrency),\n    value: price,\n    type: \"number\",\n    step: (market === null || market === void 0 ? void 0 : market.tickSize) || 1,\n    onChange: e => setPrice(parseFloat(e.target.value)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Input.Group, {\n    compact: true,\n    style: {\n      paddingBottom: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    style: {\n      width: 'calc(50% + 30px)',\n      textAlign: 'right'\n    },\n    addonBefore: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '30px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 26\n      }\n    }, \"Size\"),\n    suffix: /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontSize: 10,\n        opacity: 0.5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 15\n      }\n    }, baseCurrency),\n    value: baseSize,\n    type: \"number\",\n    step: (market === null || market === void 0 ? void 0 : market.minOrderSize) || 1,\n    onChange: e => onSetBaseSize(parseFloat(e.target.value)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    style: {\n      width: 'calc(50% - 30px)',\n      textAlign: 'right'\n    },\n    suffix: /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontSize: 10,\n        opacity: 0.5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 15\n      }\n    }, quoteCurrency),\n    value: quoteSize,\n    type: \"number\",\n    step: (market === null || market === void 0 ? void 0 : market.minOrderSize) || 1,\n    onChange: e => onSetQuoteSize(parseFloat(e.target.value)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Slider, {\n    value: sizeFraction,\n    tipFormatter: value => `${value}%`,\n    marks: sliderMarks,\n    onChange: onSliderChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      paddingTop: 18\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 9\n    }\n  }, 'POST ', /*#__PURE__*/React.createElement(Switch, {\n    checked: postOnly,\n    onChange: postOnChange,\n    style: {\n      marginRight: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 11\n    }\n  }), 'IOC ', /*#__PURE__*/React.createElement(Switch, {\n    checked: ioc,\n    onChange: iocOnChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 11\n    }\n  }))), side === 'buy' ? /*#__PURE__*/React.createElement(BuyButton, {\n    disabled: !price || !baseSize,\n    onClick: onSubmit,\n    block: true,\n    type: \"primary\",\n    size: \"large\",\n    loading: submitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 9\n    }\n  }, \"Buy \", baseCurrency) : /*#__PURE__*/React.createElement(SellButton, {\n    disabled: !price || !baseSize,\n    onClick: onSubmit,\n    block: true,\n    type: \"primary\",\n    size: \"large\",\n    loading: submitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 9\n    }\n  }, \"Sell \", baseCurrency));\n}","map":{"version":3,"sources":["/Users/cesarhugo.barzano/Desktop/CesarCorp/coins/serum-dex-ui/src/components/TradeForm.tsx"],"names":["Button","Input","Radio","Slider","Switch","React","useEffect","useState","styled","useFeeDiscountKeys","useLocallyStoredFeeDiscountKey","useMarket","useMarkPrice","useSelectedBaseCurrencyAccount","useSelectedBaseCurrencyBalances","useSelectedOpenOrdersAccount","useSelectedQuoteCurrencyAccount","useSelectedQuoteCurrencyBalances","useWallet","notify","floorToDecimal","getDecimalCount","roundToDecimal","useSendConnection","FloatingElement","getUnixTs","placeOrder","refreshCache","tuple","SellButton","BuyButton","sliderMarks","TradeForm","style","setChangeOrderRef","side","setSide","baseCurrency","quoteCurrency","market","baseCurrencyBalances","quoteCurrencyBalances","baseCurrencyAccount","quoteCurrencyAccount","openOrdersAccount","wallet","connected","sendConnection","markPrice","storedFeeDiscountKey","feeDiscountKey","postOnly","setPostOnly","ioc","setIoc","baseSize","setBaseSize","undefined","quoteSize","setQuoteSize","price","setPrice","submitting","setSubmitting","sizeFraction","setSizeFraction","availableQuote","quoteSplSizeToNumber","quoteTokenFree","quoteBalance","baseBalance","sizeDecimalCount","minOrderSize","priceDecimalCount","tickSize","publicKey","doChangeOrder","onSliderChange","updateSizeFraction","warmUpCache","console","log","startTime","address","findOpenOrdersAccountsForOwner","findBestFeeDiscountKey","endTime","e","id","setInterval","clearInterval","onSetBaseSize","usePrice","rawQuoteSize","onSetQuoteSize","rawBaseSize","size","formattedSize","formattedPrice","rawMaxSize","maxSize","Math","min","value","formattedMarkPrice","toFixed","parseFloat","newSize","formatted","postOnChange","checked","iocOnChange","onSubmit","warn","message","type","orderType","connection","pubkey","feeDiscountPubkey","description","display","flexDirection","flex","target","marginBottom","width","textAlign","background","borderColor","paddingBottom","fontSize","opacity","paddingTop","marginRight"],"mappings":"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","sourcesContent":["import {Button, Input, Radio, Slider, Switch} from 'antd';\nimport React, {useEffect, useState} from 'react';\nimport styled from 'styled-components';\nimport {\n  useFeeDiscountKeys,\n  useLocallyStoredFeeDiscountKey,\n  useMarket,\n  useMarkPrice,\n  useSelectedBaseCurrencyAccount,\n  useSelectedBaseCurrencyBalances,\n  useSelectedOpenOrdersAccount,\n  useSelectedQuoteCurrencyAccount,\n  useSelectedQuoteCurrencyBalances,\n} from '../utils/markets';\nimport {useWallet} from '../utils/wallet';\nimport {notify} from '../utils/notifications';\nimport {floorToDecimal, getDecimalCount, roundToDecimal,} from '../utils/utils';\nimport {useSendConnection} from '../utils/connection';\nimport FloatingElement from './layout/FloatingElement';\nimport {getUnixTs, placeOrder} from '../utils/send';\nimport {SwitchChangeEventHandler} from 'antd/es/switch';\nimport {refreshCache} from '../utils/fetch-loop';\nimport tuple from 'immutable-tuple';\n\nconst SellButton = styled(Button)`\n  margin: 20px 0px 0px 0px;\n  background: #f23b69;\n  border-color: #f23b69;\n`;\n\nconst BuyButton = styled(Button)`\n  margin: 20px 0px 0px 0px;\n  background: #02bf76;\n  border-color: #02bf76;\n`;\n\nconst sliderMarks = {\n  0: '0%',\n  25: '25%',\n  50: '50%',\n  75: '75%',\n  100: '100%',\n};\n\nexport default function TradeForm({\n  style,\n  setChangeOrderRef,\n}: {\n  style?: any;\n  setChangeOrderRef?: (\n    ref: ({ size, price }: { size?: number; price?: number }) => void,\n  ) => void;\n}) {\n  const [side, setSide] = useState<'buy' | 'sell'>('buy');\n  const { baseCurrency, quoteCurrency, market } = useMarket();\n  const baseCurrencyBalances = useSelectedBaseCurrencyBalances();\n  const quoteCurrencyBalances = useSelectedQuoteCurrencyBalances();\n  const baseCurrencyAccount = useSelectedBaseCurrencyAccount();\n  const quoteCurrencyAccount = useSelectedQuoteCurrencyAccount();\n  const openOrdersAccount = useSelectedOpenOrdersAccount(true);\n  const { wallet, connected } = useWallet();\n  const sendConnection = useSendConnection();\n  const markPrice = useMarkPrice();\n  useFeeDiscountKeys();\n  const {\n    storedFeeDiscountKey: feeDiscountKey,\n  } = useLocallyStoredFeeDiscountKey();\n\n  const [postOnly, setPostOnly] = useState(false);\n  const [ioc, setIoc] = useState(false);\n  const [baseSize, setBaseSize] = useState<number | undefined>(undefined);\n  const [quoteSize, setQuoteSize] = useState<number | undefined>(undefined);\n  const [price, setPrice] = useState<number | undefined>(undefined);\n  const [submitting, setSubmitting] = useState(false);\n  const [sizeFraction, setSizeFraction] = useState(0);\n\n  const availableQuote =\n    openOrdersAccount && market\n      ? market.quoteSplSizeToNumber(openOrdersAccount.quoteTokenFree)\n      : 0;\n\n  let quoteBalance = (quoteCurrencyBalances || 0) + (availableQuote || 0);\n  let baseBalance = baseCurrencyBalances || 0;\n  let sizeDecimalCount =\n    market?.minOrderSize && getDecimalCount(market.minOrderSize);\n  let priceDecimalCount = market?.tickSize && getDecimalCount(market.tickSize);\n\n  const publicKey = wallet?.publicKey;\n\n  useEffect(() => {\n    setChangeOrderRef && setChangeOrderRef(doChangeOrder);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setChangeOrderRef]);\n\n  useEffect(() => {\n    baseSize && price && onSliderChange(sizeFraction);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [side]);\n\n  useEffect(() => {\n    updateSizeFraction();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [price, baseSize]);\n\n  useEffect(() => {\n    const warmUpCache = async () => {\n      try {\n        if (!wallet || !publicKey || !market) {\n          console.log(`Skipping refreshing accounts`);\n          return;\n        }\n        const startTime = getUnixTs();\n        console.log(`Refreshing accounts for ${market.address}`);\n        await market?.findOpenOrdersAccountsForOwner(sendConnection, publicKey);\n        await market?.findBestFeeDiscountKey(sendConnection, publicKey);\n        const endTime = getUnixTs();\n        console.log(\n          `Finished refreshing accounts for ${market.address} after ${\n            endTime - startTime\n          }`,\n        );\n      } catch (e) {\n        console.log(`Encountered error when refreshing trading accounts: ${e}`);\n      }\n    };\n    warmUpCache();\n    const id = setInterval(warmUpCache, 30_000);\n    return () => clearInterval(id);\n  }, [market, sendConnection, wallet, publicKey]);\n\n  const onSetBaseSize = (baseSize: number | undefined) => {\n    setBaseSize(baseSize);\n    if (!baseSize) {\n      setQuoteSize(undefined);\n      return;\n    }\n    let usePrice = price || markPrice;\n    if (!usePrice) {\n      setQuoteSize(undefined);\n      return;\n    }\n    const rawQuoteSize = baseSize * usePrice;\n    const quoteSize =\n      baseSize && roundToDecimal(rawQuoteSize, sizeDecimalCount);\n    setQuoteSize(quoteSize);\n  };\n\n  const onSetQuoteSize = (quoteSize: number | undefined) => {\n    setQuoteSize(quoteSize);\n    if (!quoteSize) {\n      setBaseSize(undefined);\n      return;\n    }\n    let usePrice = price || markPrice;\n    if (!usePrice) {\n      setBaseSize(undefined);\n      return;\n    }\n    const rawBaseSize = quoteSize / usePrice;\n    const baseSize = quoteSize && roundToDecimal(rawBaseSize, sizeDecimalCount);\n    setBaseSize(baseSize);\n  };\n\n  const doChangeOrder = ({\n    size,\n    price,\n  }: {\n    size?: number;\n    price?: number;\n  }) => {\n    const formattedSize = size && roundToDecimal(size, sizeDecimalCount);\n    const formattedPrice = price && roundToDecimal(price, priceDecimalCount);\n    formattedSize && onSetBaseSize(formattedSize);\n    formattedPrice && setPrice(formattedPrice);\n  };\n\n  const updateSizeFraction = () => {\n    const rawMaxSize =\n      side === 'buy' ? quoteBalance / (price || markPrice || 1) : baseBalance;\n    const maxSize = floorToDecimal(rawMaxSize, sizeDecimalCount);\n    const sizeFraction = Math.min(((baseSize || 0) / maxSize) * 100, 100);\n    setSizeFraction(sizeFraction);\n  };\n\n  const onSliderChange = (value) => {\n    if (!price && markPrice) {\n      let formattedMarkPrice: number | string = priceDecimalCount\n        ? markPrice.toFixed(priceDecimalCount)\n        : markPrice;\n      setPrice(\n        typeof formattedMarkPrice === 'number'\n          ? formattedMarkPrice\n          : parseFloat(formattedMarkPrice),\n      );\n    }\n\n    let newSize;\n    if (side === 'buy') {\n      if (price || markPrice) {\n        newSize = ((quoteBalance / (price || markPrice || 1)) * value) / 100;\n      }\n    } else {\n      newSize = (baseBalance * value) / 100;\n    }\n\n    // round down to minOrderSize increment\n    let formatted = floorToDecimal(newSize, sizeDecimalCount);\n\n    onSetBaseSize(formatted);\n  };\n\n  const postOnChange: SwitchChangeEventHandler = (checked) => {\n    if (checked) {\n      setIoc(false);\n    }\n    setPostOnly(checked);\n  };\n  const iocOnChange: SwitchChangeEventHandler = (checked) => {\n    if (checked) {\n      setPostOnly(false);\n    }\n    setIoc(checked);\n  };\n\n  async function onSubmit() {\n    if (!price) {\n      console.warn('Missing price');\n      notify({\n        message: 'Missing price',\n        type: 'error',\n      });\n      return;\n    } else if (!baseSize) {\n      console.warn('Missing size');\n      notify({\n        message: 'Missing size',\n        type: 'error',\n      });\n      return;\n    }\n\n    setSubmitting(true);\n    try {\n      if (!wallet) {\n        return null;\n      }\n\n      await placeOrder({\n        side,\n        price,\n        size: baseSize,\n        orderType: ioc ? 'ioc' : postOnly ? 'postOnly' : 'limit',\n        market,\n        connection: sendConnection,\n        wallet,\n        baseCurrencyAccount: baseCurrencyAccount?.pubkey,\n        quoteCurrencyAccount: quoteCurrencyAccount?.pubkey,\n        feeDiscountPubkey: feeDiscountKey,\n      });\n      refreshCache(tuple('getTokenAccounts', wallet, connected));\n      setPrice(undefined);\n      onSetBaseSize(undefined);\n    } catch (e) {\n      console.warn(e);\n      notify({\n        message: 'Error placing order',\n        description: e.message,\n        type: 'error',\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return (\n    <FloatingElement\n      style={{ display: 'flex', flexDirection: 'column', ...style }}\n    >\n      <div style={{ flex: 1 }}>\n        <Radio.Group\n          onChange={(e) => setSide(e.target.value)}\n          value={side}\n          buttonStyle=\"solid\"\n          style={{\n            marginBottom: 8,\n            width: '100%',\n          }}\n        >\n          <Radio.Button\n            value=\"buy\"\n            style={{\n              width: '50%',\n              textAlign: 'center',\n              background: side === 'buy' ? '#02bf76' : '',\n              borderColor: side === 'buy' ? '#02bf76' : '',\n            }}\n          >\n            BUY\n          </Radio.Button>\n          <Radio.Button\n            value=\"sell\"\n            style={{\n              width: '50%',\n              textAlign: 'center',\n              background: side === 'sell' ? '#F23B69' : '',\n              borderColor: side === 'sell' ? '#F23B69' : '',\n            }}\n          >\n            SELL\n          </Radio.Button>\n        </Radio.Group>\n        <Input\n          style={{ textAlign: 'right', paddingBottom: 8 }}\n          addonBefore={<div style={{ width: '30px' }}>Price</div>}\n          suffix={\n            <span style={{ fontSize: 10, opacity: 0.5 }}>{quoteCurrency}</span>\n          }\n          value={price}\n          type=\"number\"\n          step={market?.tickSize || 1}\n          onChange={(e) => setPrice(parseFloat(e.target.value))}\n        />\n        <Input.Group compact style={{ paddingBottom: 8 }}>\n          <Input\n            style={{ width: 'calc(50% + 30px)', textAlign: 'right' }}\n            addonBefore={<div style={{ width: '30px' }}>Size</div>}\n            suffix={\n              <span style={{ fontSize: 10, opacity: 0.5 }}>{baseCurrency}</span>\n            }\n            value={baseSize}\n            type=\"number\"\n            step={market?.minOrderSize || 1}\n            onChange={(e) => onSetBaseSize(parseFloat(e.target.value))}\n          />\n          <Input\n            style={{ width: 'calc(50% - 30px)', textAlign: 'right' }}\n            suffix={\n              <span style={{ fontSize: 10, opacity: 0.5 }}>\n                {quoteCurrency}\n              </span>\n            }\n            value={quoteSize}\n            type=\"number\"\n            step={market?.minOrderSize || 1}\n            onChange={(e) => onSetQuoteSize(parseFloat(e.target.value))}\n          />\n        </Input.Group>\n        <Slider\n          value={sizeFraction}\n          tipFormatter={(value) => `${value}%`}\n          marks={sliderMarks}\n          onChange={onSliderChange}\n        />\n        <div style={{ paddingTop: 18 }}>\n          {'POST '}\n          <Switch\n            checked={postOnly}\n            onChange={postOnChange}\n            style={{ marginRight: 40 }}\n          />\n          {'IOC '}\n          <Switch checked={ioc} onChange={iocOnChange} />\n        </div>\n      </div>\n      {side === 'buy' ? (\n        <BuyButton\n          disabled={!price || !baseSize}\n          onClick={onSubmit}\n          block\n          type=\"primary\"\n          size=\"large\"\n          loading={submitting}\n        >\n          Buy {baseCurrency}\n        </BuyButton>\n      ) : (\n        <SellButton\n          disabled={!price || !baseSize}\n          onClick={onSubmit}\n          block\n          type=\"primary\"\n          size=\"large\"\n          loading={submitting}\n        >\n          Sell {baseCurrency}\n        </SellButton>\n      )}\n    </FloatingElement>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}